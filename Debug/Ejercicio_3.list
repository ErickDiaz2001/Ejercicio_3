
Ejercicio_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a7c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08003b88  08003b88  00004b88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c18  08003c18  0000506c  2**0
                  CONTENTS
  4 .ARM          00000000  08003c18  08003c18  0000506c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003c18  08003c18  0000506c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c18  08003c18  00004c18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003c1c  08003c1c  00004c1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08003c20  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000210  2000006c  08003c8c  0000506c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000027c  08003c8c  0000527c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000506c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cb8f  00000000  00000000  00005095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021c0  00000000  00000000  00011c24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cf8  00000000  00000000  00013de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a10  00000000  00000000  00014ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018c41  00000000  00000000  000154f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f768  00000000  00000000  0002e131  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c1cf  00000000  00000000  0003d899  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c9a68  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ca4  00000000  00000000  000c9aac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000cd750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000006c 	.word	0x2000006c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003b70 	.word	0x08003b70

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000070 	.word	0x20000070
 8000148:	08003b70 	.word	0x08003b70

0800014c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000152:	f107 0310 	add.w	r3, r7, #16
 8000156:	2200      	movs	r2, #0
 8000158:	601a      	str	r2, [r3, #0]
 800015a:	605a      	str	r2, [r3, #4]
 800015c:	609a      	str	r2, [r3, #8]
 800015e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000160:	4b33      	ldr	r3, [pc, #204]	@ (8000230 <MX_GPIO_Init+0xe4>)
 8000162:	699b      	ldr	r3, [r3, #24]
 8000164:	4a32      	ldr	r2, [pc, #200]	@ (8000230 <MX_GPIO_Init+0xe4>)
 8000166:	f043 0310 	orr.w	r3, r3, #16
 800016a:	6193      	str	r3, [r2, #24]
 800016c:	4b30      	ldr	r3, [pc, #192]	@ (8000230 <MX_GPIO_Init+0xe4>)
 800016e:	699b      	ldr	r3, [r3, #24]
 8000170:	f003 0310 	and.w	r3, r3, #16
 8000174:	60fb      	str	r3, [r7, #12]
 8000176:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000178:	4b2d      	ldr	r3, [pc, #180]	@ (8000230 <MX_GPIO_Init+0xe4>)
 800017a:	699b      	ldr	r3, [r3, #24]
 800017c:	4a2c      	ldr	r2, [pc, #176]	@ (8000230 <MX_GPIO_Init+0xe4>)
 800017e:	f043 0320 	orr.w	r3, r3, #32
 8000182:	6193      	str	r3, [r2, #24]
 8000184:	4b2a      	ldr	r3, [pc, #168]	@ (8000230 <MX_GPIO_Init+0xe4>)
 8000186:	699b      	ldr	r3, [r3, #24]
 8000188:	f003 0320 	and.w	r3, r3, #32
 800018c:	60bb      	str	r3, [r7, #8]
 800018e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000190:	4b27      	ldr	r3, [pc, #156]	@ (8000230 <MX_GPIO_Init+0xe4>)
 8000192:	699b      	ldr	r3, [r3, #24]
 8000194:	4a26      	ldr	r2, [pc, #152]	@ (8000230 <MX_GPIO_Init+0xe4>)
 8000196:	f043 0304 	orr.w	r3, r3, #4
 800019a:	6193      	str	r3, [r2, #24]
 800019c:	4b24      	ldr	r3, [pc, #144]	@ (8000230 <MX_GPIO_Init+0xe4>)
 800019e:	699b      	ldr	r3, [r3, #24]
 80001a0:	f003 0304 	and.w	r3, r3, #4
 80001a4:	607b      	str	r3, [r7, #4]
 80001a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001a8:	4b21      	ldr	r3, [pc, #132]	@ (8000230 <MX_GPIO_Init+0xe4>)
 80001aa:	699b      	ldr	r3, [r3, #24]
 80001ac:	4a20      	ldr	r2, [pc, #128]	@ (8000230 <MX_GPIO_Init+0xe4>)
 80001ae:	f043 0308 	orr.w	r3, r3, #8
 80001b2:	6193      	str	r3, [r2, #24]
 80001b4:	4b1e      	ldr	r3, [pc, #120]	@ (8000230 <MX_GPIO_Init+0xe4>)
 80001b6:	699b      	ldr	r3, [r3, #24]
 80001b8:	f003 0308 	and.w	r3, r3, #8
 80001bc:	603b      	str	r3, [r7, #0]
 80001be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 80001c0:	2200      	movs	r2, #0
 80001c2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80001c6:	481b      	ldr	r0, [pc, #108]	@ (8000234 <MX_GPIO_Init+0xe8>)
 80001c8:	f000 ff4d 	bl	8001066 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_1_Pin|LED_2_Pin, GPIO_PIN_RESET);
 80001cc:	2200      	movs	r2, #0
 80001ce:	2103      	movs	r1, #3
 80001d0:	4819      	ldr	r0, [pc, #100]	@ (8000238 <MX_GPIO_Init+0xec>)
 80001d2:	f000 ff48 	bl	8001066 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_3_Pin;
 80001d6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80001da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001dc:	2301      	movs	r3, #1
 80001de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001e0:	2300      	movs	r3, #0
 80001e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001e4:	2302      	movs	r3, #2
 80001e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_3_GPIO_Port, &GPIO_InitStruct);
 80001e8:	f107 0310 	add.w	r3, r7, #16
 80001ec:	4619      	mov	r1, r3
 80001ee:	4811      	ldr	r0, [pc, #68]	@ (8000234 <MX_GPIO_Init+0xe8>)
 80001f0:	f000 fd9e 	bl	8000d30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin;
 80001f4:	2303      	movs	r3, #3
 80001f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001f8:	2301      	movs	r3, #1
 80001fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001fc:	2300      	movs	r3, #0
 80001fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000200:	2302      	movs	r3, #2
 8000202:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000204:	f107 0310 	add.w	r3, r7, #16
 8000208:	4619      	mov	r1, r3
 800020a:	480b      	ldr	r0, [pc, #44]	@ (8000238 <MX_GPIO_Init+0xec>)
 800020c:	f000 fd90 	bl	8000d30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = TECLA_1_Pin|TECLA_2_Pin;
 8000210:	230c      	movs	r3, #12
 8000212:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000214:	2300      	movs	r3, #0
 8000216:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000218:	2300      	movs	r3, #0
 800021a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800021c:	f107 0310 	add.w	r3, r7, #16
 8000220:	4619      	mov	r1, r3
 8000222:	4805      	ldr	r0, [pc, #20]	@ (8000238 <MX_GPIO_Init+0xec>)
 8000224:	f000 fd84 	bl	8000d30 <HAL_GPIO_Init>

}
 8000228:	bf00      	nop
 800022a:	3720      	adds	r7, #32
 800022c:	46bd      	mov	sp, r7
 800022e:	bd80      	pop	{r7, pc}
 8000230:	40021000 	.word	0x40021000
 8000234:	40011000 	.word	0x40011000
 8000238:	40010800 	.word	0x40010800

0800023c <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// funcion para habilitar "printf"
int __io_putchar(int ch)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b082      	sub	sp, #8
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 100);
 8000244:	1d39      	adds	r1, r7, #4
 8000246:	2364      	movs	r3, #100	@ 0x64
 8000248:	2201      	movs	r2, #1
 800024a:	4804      	ldr	r0, [pc, #16]	@ (800025c <__io_putchar+0x20>)
 800024c:	f001 ff82 	bl	8002154 <HAL_UART_Transmit>
	return ch;
 8000250:	687b      	ldr	r3, [r7, #4]
}
 8000252:	4618      	mov	r0, r3
 8000254:	3708      	adds	r7, #8
 8000256:	46bd      	mov	sp, r7
 8000258:	bd80      	pop	{r7, pc}
 800025a:	bf00      	nop
 800025c:	200000e4 	.word	0x200000e4

08000260 <debounce>:
//funcion para el debouncing
//pin_tecla y pin_led solo para puertos A
// numero de tecla para guardar los datos individuales de cada boton en un array
// el tiempo de espera es de 10ms
void debounce(uint8_t pin_tecla, uint8_t pin_led, uint8_t i)
{
 8000260:	b590      	push	{r4, r7, lr}
 8000262:	b083      	sub	sp, #12
 8000264:	af00      	add	r7, sp, #0
 8000266:	4603      	mov	r3, r0
 8000268:	71fb      	strb	r3, [r7, #7]
 800026a:	460b      	mov	r3, r1
 800026c:	71bb      	strb	r3, [r7, #6]
 800026e:	4613      	mov	r3, r2
 8000270:	717b      	strb	r3, [r7, #5]
	switch (estado_boton[i])
 8000272:	797b      	ldrb	r3, [r7, #5]
 8000274:	4a44      	ldr	r2, [pc, #272]	@ (8000388 <debounce+0x128>)
 8000276:	5cd3      	ldrb	r3, [r2, r3]
 8000278:	2b02      	cmp	r3, #2
 800027a:	d05d      	beq.n	8000338 <debounce+0xd8>
 800027c:	2b02      	cmp	r3, #2
 800027e:	dc7f      	bgt.n	8000380 <debounce+0x120>
 8000280:	2b00      	cmp	r3, #0
 8000282:	d002      	beq.n	800028a <debounce+0x2a>
 8000284:	2b01      	cmp	r3, #1
 8000286:	d01b      	beq.n	80002c0 <debounce+0x60>
			printf("Tecla liberada: TEC%d\n\r", i);
			estado_boton[i] = TECLA_INACTIVA;
		}
		break;
	}
}
 8000288:	e07a      	b.n	8000380 <debounce+0x120>
		valor_swich[i]= HAL_GPIO_ReadPin(GPIOA, pin_tecla);//se lee el estado del boton
 800028a:	79fb      	ldrb	r3, [r7, #7]
 800028c:	b29b      	uxth	r3, r3
 800028e:	797c      	ldrb	r4, [r7, #5]
 8000290:	4619      	mov	r1, r3
 8000292:	483e      	ldr	r0, [pc, #248]	@ (800038c <debounce+0x12c>)
 8000294:	f000 fed0 	bl	8001038 <HAL_GPIO_ReadPin>
 8000298:	4603      	mov	r3, r0
 800029a:	461a      	mov	r2, r3
 800029c:	4b3c      	ldr	r3, [pc, #240]	@ (8000390 <debounce+0x130>)
 800029e:	551a      	strb	r2, [r3, r4]
		if (valor_swich[i] == 1)
 80002a0:	797b      	ldrb	r3, [r7, #5]
 80002a2:	4a3b      	ldr	r2, [pc, #236]	@ (8000390 <debounce+0x130>)
 80002a4:	5cd3      	ldrb	r3, [r2, r3]
 80002a6:	2b01      	cmp	r3, #1
 80002a8:	d167      	bne.n	800037a <debounce+0x11a>
			valor_swich_anterior[i] = valor_swich[i];
 80002aa:	797a      	ldrb	r2, [r7, #5]
 80002ac:	797b      	ldrb	r3, [r7, #5]
 80002ae:	4938      	ldr	r1, [pc, #224]	@ (8000390 <debounce+0x130>)
 80002b0:	5c89      	ldrb	r1, [r1, r2]
 80002b2:	4a38      	ldr	r2, [pc, #224]	@ (8000394 <debounce+0x134>)
 80002b4:	54d1      	strb	r1, [r2, r3]
			estado_boton[i] = TECLA_PRESIONADA;
 80002b6:	797b      	ldrb	r3, [r7, #5]
 80002b8:	4a33      	ldr	r2, [pc, #204]	@ (8000388 <debounce+0x128>)
 80002ba:	2101      	movs	r1, #1
 80002bc:	54d1      	strb	r1, [r2, r3]
		break;
 80002be:	e05c      	b.n	800037a <debounce+0x11a>
		valor_swich[i] = HAL_GPIO_ReadPin(GPIOA, pin_tecla);//se lee el estado del boton
 80002c0:	79fb      	ldrb	r3, [r7, #7]
 80002c2:	b29b      	uxth	r3, r3
 80002c4:	797c      	ldrb	r4, [r7, #5]
 80002c6:	4619      	mov	r1, r3
 80002c8:	4830      	ldr	r0, [pc, #192]	@ (800038c <debounce+0x12c>)
 80002ca:	f000 feb5 	bl	8001038 <HAL_GPIO_ReadPin>
 80002ce:	4603      	mov	r3, r0
 80002d0:	461a      	mov	r2, r3
 80002d2:	4b2f      	ldr	r3, [pc, #188]	@ (8000390 <debounce+0x130>)
 80002d4:	551a      	strb	r2, [r3, r4]
		if (valor_swich[i] == valor_swich_anterior[i]|| contador[i] > TIEMPO_DEBOUNCE)//comparamos valor anterior con el valor actual
 80002d6:	797b      	ldrb	r3, [r7, #5]
 80002d8:	4a2d      	ldr	r2, [pc, #180]	@ (8000390 <debounce+0x130>)
 80002da:	5cd2      	ldrb	r2, [r2, r3]
 80002dc:	797b      	ldrb	r3, [r7, #5]
 80002de:	492d      	ldr	r1, [pc, #180]	@ (8000394 <debounce+0x134>)
 80002e0:	5ccb      	ldrb	r3, [r1, r3]
 80002e2:	429a      	cmp	r2, r3
 80002e4:	d006      	beq.n	80002f4 <debounce+0x94>
 80002e6:	797b      	ldrb	r3, [r7, #5]
 80002e8:	4a2b      	ldr	r2, [pc, #172]	@ (8000398 <debounce+0x138>)
 80002ea:	5cd2      	ldrb	r2, [r2, r3]
 80002ec:	4b2b      	ldr	r3, [pc, #172]	@ (800039c <debounce+0x13c>)
 80002ee:	781b      	ldrb	r3, [r3, #0]
 80002f0:	429a      	cmp	r2, r3
 80002f2:	d914      	bls.n	800031e <debounce+0xbe>
			HAL_GPIO_WritePin(GPIOA, pin_led, 1);// encendemos el led
 80002f4:	79bb      	ldrb	r3, [r7, #6]
 80002f6:	b29b      	uxth	r3, r3
 80002f8:	2201      	movs	r2, #1
 80002fa:	4619      	mov	r1, r3
 80002fc:	4823      	ldr	r0, [pc, #140]	@ (800038c <debounce+0x12c>)
 80002fe:	f000 feb2 	bl	8001066 <HAL_GPIO_WritePin>
			printf("Tecla apretada: TEC%d\n\r", i);
 8000302:	797b      	ldrb	r3, [r7, #5]
 8000304:	4619      	mov	r1, r3
 8000306:	4826      	ldr	r0, [pc, #152]	@ (80003a0 <debounce+0x140>)
 8000308:	f002 fdba 	bl	8002e80 <iprintf>
			valor_swich_anterior[i] = 0;
 800030c:	797b      	ldrb	r3, [r7, #5]
 800030e:	4a21      	ldr	r2, [pc, #132]	@ (8000394 <debounce+0x134>)
 8000310:	2100      	movs	r1, #0
 8000312:	54d1      	strb	r1, [r2, r3]
			estado_boton[i] = TECLA_LIBERADA;
 8000314:	797b      	ldrb	r3, [r7, #5]
 8000316:	4a1c      	ldr	r2, [pc, #112]	@ (8000388 <debounce+0x128>)
 8000318:	2102      	movs	r1, #2
 800031a:	54d1      	strb	r1, [r2, r3]
 800031c:	e003      	b.n	8000326 <debounce+0xc6>
			estado_boton[i] = TECLA_INACTIVA;
 800031e:	797b      	ldrb	r3, [r7, #5]
 8000320:	4a19      	ldr	r2, [pc, #100]	@ (8000388 <debounce+0x128>)
 8000322:	2100      	movs	r1, #0
 8000324:	54d1      	strb	r1, [r2, r3]
		contador[i] = contador[i] + 1;
 8000326:	797b      	ldrb	r3, [r7, #5]
 8000328:	4a1b      	ldr	r2, [pc, #108]	@ (8000398 <debounce+0x138>)
 800032a:	5cd2      	ldrb	r2, [r2, r3]
 800032c:	797b      	ldrb	r3, [r7, #5]
 800032e:	3201      	adds	r2, #1
 8000330:	b2d1      	uxtb	r1, r2
 8000332:	4a19      	ldr	r2, [pc, #100]	@ (8000398 <debounce+0x138>)
 8000334:	54d1      	strb	r1, [r2, r3]
		break;
 8000336:	e023      	b.n	8000380 <debounce+0x120>
		valor_swich[i] = HAL_GPIO_ReadPin(GPIOA, pin_tecla);//se lee el estado del boton
 8000338:	79fb      	ldrb	r3, [r7, #7]
 800033a:	b29b      	uxth	r3, r3
 800033c:	797c      	ldrb	r4, [r7, #5]
 800033e:	4619      	mov	r1, r3
 8000340:	4812      	ldr	r0, [pc, #72]	@ (800038c <debounce+0x12c>)
 8000342:	f000 fe79 	bl	8001038 <HAL_GPIO_ReadPin>
 8000346:	4603      	mov	r3, r0
 8000348:	461a      	mov	r2, r3
 800034a:	4b11      	ldr	r3, [pc, #68]	@ (8000390 <debounce+0x130>)
 800034c:	551a      	strb	r2, [r3, r4]
		if (valor_swich[i] == 0)
 800034e:	797b      	ldrb	r3, [r7, #5]
 8000350:	4a0f      	ldr	r2, [pc, #60]	@ (8000390 <debounce+0x130>)
 8000352:	5cd3      	ldrb	r3, [r2, r3]
 8000354:	2b00      	cmp	r3, #0
 8000356:	d112      	bne.n	800037e <debounce+0x11e>
			HAL_GPIO_WritePin(GPIOA, pin_led, 0);// apagamos el led
 8000358:	79bb      	ldrb	r3, [r7, #6]
 800035a:	b29b      	uxth	r3, r3
 800035c:	2200      	movs	r2, #0
 800035e:	4619      	mov	r1, r3
 8000360:	480a      	ldr	r0, [pc, #40]	@ (800038c <debounce+0x12c>)
 8000362:	f000 fe80 	bl	8001066 <HAL_GPIO_WritePin>
			printf("Tecla liberada: TEC%d\n\r", i);
 8000366:	797b      	ldrb	r3, [r7, #5]
 8000368:	4619      	mov	r1, r3
 800036a:	480e      	ldr	r0, [pc, #56]	@ (80003a4 <debounce+0x144>)
 800036c:	f002 fd88 	bl	8002e80 <iprintf>
			estado_boton[i] = TECLA_INACTIVA;
 8000370:	797b      	ldrb	r3, [r7, #5]
 8000372:	4a05      	ldr	r2, [pc, #20]	@ (8000388 <debounce+0x128>)
 8000374:	2100      	movs	r1, #0
 8000376:	54d1      	strb	r1, [r2, r3]
		break;
 8000378:	e001      	b.n	800037e <debounce+0x11e>
		break;
 800037a:	bf00      	nop
 800037c:	e000      	b.n	8000380 <debounce+0x120>
		break;
 800037e:	bf00      	nop
}
 8000380:	bf00      	nop
 8000382:	370c      	adds	r7, #12
 8000384:	46bd      	mov	sp, r7
 8000386:	bd90      	pop	{r4, r7, pc}
 8000388:	20000088 	.word	0x20000088
 800038c:	40010800 	.word	0x40010800
 8000390:	20000094 	.word	0x20000094
 8000394:	20000090 	.word	0x20000090
 8000398:	2000008c 	.word	0x2000008c
 800039c:	20000000 	.word	0x20000000
 80003a0:	08003b88 	.word	0x08003b88
 80003a4:	08003ba0 	.word	0x08003ba0

080003a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003ac:	f000 fa9e 	bl	80008ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003b0:	f000 f80e 	bl	80003d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003b4:	f7ff feca 	bl	800014c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80003b8:	f000 f9f4 	bl	80007a4 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 80003bc:	f000 f982 	bl	80006c4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80003c0:	4802      	ldr	r0, [pc, #8]	@ (80003cc <main+0x24>)
 80003c2:	f001 fac9 	bl	8001958 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003c6:	bf00      	nop
 80003c8:	e7fd      	b.n	80003c6 <main+0x1e>
 80003ca:	bf00      	nop
 80003cc:	2000009c 	.word	0x2000009c

080003d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b090      	sub	sp, #64	@ 0x40
 80003d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003d6:	f107 0318 	add.w	r3, r7, #24
 80003da:	2228      	movs	r2, #40	@ 0x28
 80003dc:	2100      	movs	r1, #0
 80003de:	4618      	mov	r0, r3
 80003e0:	f002 fda3 	bl	8002f2a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003e4:	1d3b      	adds	r3, r7, #4
 80003e6:	2200      	movs	r2, #0
 80003e8:	601a      	str	r2, [r3, #0]
 80003ea:	605a      	str	r2, [r3, #4]
 80003ec:	609a      	str	r2, [r3, #8]
 80003ee:	60da      	str	r2, [r3, #12]
 80003f0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003f2:	2301      	movs	r3, #1
 80003f4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003f6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80003fa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003fc:	2300      	movs	r3, #0
 80003fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000400:	2301      	movs	r3, #1
 8000402:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000404:	2302      	movs	r3, #2
 8000406:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000408:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800040c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800040e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000412:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000414:	f107 0318 	add.w	r3, r7, #24
 8000418:	4618      	mov	r0, r3
 800041a:	f000 fe3d 	bl	8001098 <HAL_RCC_OscConfig>
 800041e:	4603      	mov	r3, r0
 8000420:	2b00      	cmp	r3, #0
 8000422:	d001      	beq.n	8000428 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000424:	f000 f830 	bl	8000488 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000428:	230f      	movs	r3, #15
 800042a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800042c:	2302      	movs	r3, #2
 800042e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000430:	2300      	movs	r3, #0
 8000432:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000434:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000438:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800043a:	2300      	movs	r3, #0
 800043c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800043e:	1d3b      	adds	r3, r7, #4
 8000440:	2102      	movs	r1, #2
 8000442:	4618      	mov	r0, r3
 8000444:	f001 f8aa 	bl	800159c <HAL_RCC_ClockConfig>
 8000448:	4603      	mov	r3, r0
 800044a:	2b00      	cmp	r3, #0
 800044c:	d001      	beq.n	8000452 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800044e:	f000 f81b 	bl	8000488 <Error_Handler>
  }
}
 8000452:	bf00      	nop
 8000454:	3740      	adds	r7, #64	@ 0x40
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}

0800045a <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

//interrupcion cada 1ms
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800045a:	b580      	push	{r7, lr}
 800045c:	b082      	sub	sp, #8
 800045e:	af00      	add	r7, sp, #0
 8000460:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM2)
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800046a:	d109      	bne.n	8000480 <HAL_TIM_PeriodElapsedCallback+0x26>
  {
	  debounce(TECLA_1_Pin, LED_1_Pin, 0);
 800046c:	2200      	movs	r2, #0
 800046e:	2101      	movs	r1, #1
 8000470:	2004      	movs	r0, #4
 8000472:	f7ff fef5 	bl	8000260 <debounce>
	  debounce(TECLA_2_Pin, LED_2_Pin, 1);
 8000476:	2201      	movs	r2, #1
 8000478:	2102      	movs	r1, #2
 800047a:	2008      	movs	r0, #8
 800047c:	f7ff fef0 	bl	8000260 <debounce>
  }
}
 8000480:	bf00      	nop
 8000482:	3708      	adds	r7, #8
 8000484:	46bd      	mov	sp, r7
 8000486:	bd80      	pop	{r7, pc}

08000488 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800048c:	b672      	cpsid	i
}
 800048e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000490:	bf00      	nop
 8000492:	e7fd      	b.n	8000490 <Error_Handler+0x8>

08000494 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000494:	b480      	push	{r7}
 8000496:	b085      	sub	sp, #20
 8000498:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800049a:	4b15      	ldr	r3, [pc, #84]	@ (80004f0 <HAL_MspInit+0x5c>)
 800049c:	699b      	ldr	r3, [r3, #24]
 800049e:	4a14      	ldr	r2, [pc, #80]	@ (80004f0 <HAL_MspInit+0x5c>)
 80004a0:	f043 0301 	orr.w	r3, r3, #1
 80004a4:	6193      	str	r3, [r2, #24]
 80004a6:	4b12      	ldr	r3, [pc, #72]	@ (80004f0 <HAL_MspInit+0x5c>)
 80004a8:	699b      	ldr	r3, [r3, #24]
 80004aa:	f003 0301 	and.w	r3, r3, #1
 80004ae:	60bb      	str	r3, [r7, #8]
 80004b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004b2:	4b0f      	ldr	r3, [pc, #60]	@ (80004f0 <HAL_MspInit+0x5c>)
 80004b4:	69db      	ldr	r3, [r3, #28]
 80004b6:	4a0e      	ldr	r2, [pc, #56]	@ (80004f0 <HAL_MspInit+0x5c>)
 80004b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80004bc:	61d3      	str	r3, [r2, #28]
 80004be:	4b0c      	ldr	r3, [pc, #48]	@ (80004f0 <HAL_MspInit+0x5c>)
 80004c0:	69db      	ldr	r3, [r3, #28]
 80004c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004c6:	607b      	str	r3, [r7, #4]
 80004c8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004ca:	4b0a      	ldr	r3, [pc, #40]	@ (80004f4 <HAL_MspInit+0x60>)
 80004cc:	685b      	ldr	r3, [r3, #4]
 80004ce:	60fb      	str	r3, [r7, #12]
 80004d0:	68fb      	ldr	r3, [r7, #12]
 80004d2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80004d6:	60fb      	str	r3, [r7, #12]
 80004d8:	68fb      	ldr	r3, [r7, #12]
 80004da:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80004de:	60fb      	str	r3, [r7, #12]
 80004e0:	4a04      	ldr	r2, [pc, #16]	@ (80004f4 <HAL_MspInit+0x60>)
 80004e2:	68fb      	ldr	r3, [r7, #12]
 80004e4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004e6:	bf00      	nop
 80004e8:	3714      	adds	r7, #20
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bc80      	pop	{r7}
 80004ee:	4770      	bx	lr
 80004f0:	40021000 	.word	0x40021000
 80004f4:	40010000 	.word	0x40010000

080004f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004fc:	bf00      	nop
 80004fe:	e7fd      	b.n	80004fc <NMI_Handler+0x4>

08000500 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000504:	bf00      	nop
 8000506:	e7fd      	b.n	8000504 <HardFault_Handler+0x4>

08000508 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800050c:	bf00      	nop
 800050e:	e7fd      	b.n	800050c <MemManage_Handler+0x4>

08000510 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000514:	bf00      	nop
 8000516:	e7fd      	b.n	8000514 <BusFault_Handler+0x4>

08000518 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800051c:	bf00      	nop
 800051e:	e7fd      	b.n	800051c <UsageFault_Handler+0x4>

08000520 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000524:	bf00      	nop
 8000526:	46bd      	mov	sp, r7
 8000528:	bc80      	pop	{r7}
 800052a:	4770      	bx	lr

0800052c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000530:	bf00      	nop
 8000532:	46bd      	mov	sp, r7
 8000534:	bc80      	pop	{r7}
 8000536:	4770      	bx	lr

08000538 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800053c:	bf00      	nop
 800053e:	46bd      	mov	sp, r7
 8000540:	bc80      	pop	{r7}
 8000542:	4770      	bx	lr

08000544 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000548:	f000 fa16 	bl	8000978 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800054c:	bf00      	nop
 800054e:	bd80      	pop	{r7, pc}

08000550 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000554:	4802      	ldr	r0, [pc, #8]	@ (8000560 <TIM2_IRQHandler+0x10>)
 8000556:	f001 fa51 	bl	80019fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800055a:	bf00      	nop
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	2000009c 	.word	0x2000009c

08000564 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000568:	4802      	ldr	r0, [pc, #8]	@ (8000574 <USART3_IRQHandler+0x10>)
 800056a:	f001 fe77 	bl	800225c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800056e:	bf00      	nop
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	200000e4 	.word	0x200000e4

08000578 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b086      	sub	sp, #24
 800057c:	af00      	add	r7, sp, #0
 800057e:	60f8      	str	r0, [r7, #12]
 8000580:	60b9      	str	r1, [r7, #8]
 8000582:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000584:	2300      	movs	r3, #0
 8000586:	617b      	str	r3, [r7, #20]
 8000588:	e00a      	b.n	80005a0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800058a:	f3af 8000 	nop.w
 800058e:	4601      	mov	r1, r0
 8000590:	68bb      	ldr	r3, [r7, #8]
 8000592:	1c5a      	adds	r2, r3, #1
 8000594:	60ba      	str	r2, [r7, #8]
 8000596:	b2ca      	uxtb	r2, r1
 8000598:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800059a:	697b      	ldr	r3, [r7, #20]
 800059c:	3301      	adds	r3, #1
 800059e:	617b      	str	r3, [r7, #20]
 80005a0:	697a      	ldr	r2, [r7, #20]
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	429a      	cmp	r2, r3
 80005a6:	dbf0      	blt.n	800058a <_read+0x12>
  }

  return len;
 80005a8:	687b      	ldr	r3, [r7, #4]
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	3718      	adds	r7, #24
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}

080005b2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80005b2:	b580      	push	{r7, lr}
 80005b4:	b086      	sub	sp, #24
 80005b6:	af00      	add	r7, sp, #0
 80005b8:	60f8      	str	r0, [r7, #12]
 80005ba:	60b9      	str	r1, [r7, #8]
 80005bc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005be:	2300      	movs	r3, #0
 80005c0:	617b      	str	r3, [r7, #20]
 80005c2:	e009      	b.n	80005d8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80005c4:	68bb      	ldr	r3, [r7, #8]
 80005c6:	1c5a      	adds	r2, r3, #1
 80005c8:	60ba      	str	r2, [r7, #8]
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	4618      	mov	r0, r3
 80005ce:	f7ff fe35 	bl	800023c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005d2:	697b      	ldr	r3, [r7, #20]
 80005d4:	3301      	adds	r3, #1
 80005d6:	617b      	str	r3, [r7, #20]
 80005d8:	697a      	ldr	r2, [r7, #20]
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	429a      	cmp	r2, r3
 80005de:	dbf1      	blt.n	80005c4 <_write+0x12>
  }
  return len;
 80005e0:	687b      	ldr	r3, [r7, #4]
}
 80005e2:	4618      	mov	r0, r3
 80005e4:	3718      	adds	r7, #24
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}

080005ea <_close>:

int _close(int file)
{
 80005ea:	b480      	push	{r7}
 80005ec:	b083      	sub	sp, #12
 80005ee:	af00      	add	r7, sp, #0
 80005f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80005f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80005f6:	4618      	mov	r0, r3
 80005f8:	370c      	adds	r7, #12
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bc80      	pop	{r7}
 80005fe:	4770      	bx	lr

08000600 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000600:	b480      	push	{r7}
 8000602:	b083      	sub	sp, #12
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
 8000608:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800060a:	683b      	ldr	r3, [r7, #0]
 800060c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000610:	605a      	str	r2, [r3, #4]
  return 0;
 8000612:	2300      	movs	r3, #0
}
 8000614:	4618      	mov	r0, r3
 8000616:	370c      	adds	r7, #12
 8000618:	46bd      	mov	sp, r7
 800061a:	bc80      	pop	{r7}
 800061c:	4770      	bx	lr

0800061e <_isatty>:

int _isatty(int file)
{
 800061e:	b480      	push	{r7}
 8000620:	b083      	sub	sp, #12
 8000622:	af00      	add	r7, sp, #0
 8000624:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000626:	2301      	movs	r3, #1
}
 8000628:	4618      	mov	r0, r3
 800062a:	370c      	adds	r7, #12
 800062c:	46bd      	mov	sp, r7
 800062e:	bc80      	pop	{r7}
 8000630:	4770      	bx	lr

08000632 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000632:	b480      	push	{r7}
 8000634:	b085      	sub	sp, #20
 8000636:	af00      	add	r7, sp, #0
 8000638:	60f8      	str	r0, [r7, #12]
 800063a:	60b9      	str	r1, [r7, #8]
 800063c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800063e:	2300      	movs	r3, #0
}
 8000640:	4618      	mov	r0, r3
 8000642:	3714      	adds	r7, #20
 8000644:	46bd      	mov	sp, r7
 8000646:	bc80      	pop	{r7}
 8000648:	4770      	bx	lr
	...

0800064c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b086      	sub	sp, #24
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000654:	4a14      	ldr	r2, [pc, #80]	@ (80006a8 <_sbrk+0x5c>)
 8000656:	4b15      	ldr	r3, [pc, #84]	@ (80006ac <_sbrk+0x60>)
 8000658:	1ad3      	subs	r3, r2, r3
 800065a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800065c:	697b      	ldr	r3, [r7, #20]
 800065e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000660:	4b13      	ldr	r3, [pc, #76]	@ (80006b0 <_sbrk+0x64>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d102      	bne.n	800066e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000668:	4b11      	ldr	r3, [pc, #68]	@ (80006b0 <_sbrk+0x64>)
 800066a:	4a12      	ldr	r2, [pc, #72]	@ (80006b4 <_sbrk+0x68>)
 800066c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800066e:	4b10      	ldr	r3, [pc, #64]	@ (80006b0 <_sbrk+0x64>)
 8000670:	681a      	ldr	r2, [r3, #0]
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	4413      	add	r3, r2
 8000676:	693a      	ldr	r2, [r7, #16]
 8000678:	429a      	cmp	r2, r3
 800067a:	d207      	bcs.n	800068c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800067c:	f002 fca4 	bl	8002fc8 <__errno>
 8000680:	4603      	mov	r3, r0
 8000682:	220c      	movs	r2, #12
 8000684:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000686:	f04f 33ff 	mov.w	r3, #4294967295
 800068a:	e009      	b.n	80006a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800068c:	4b08      	ldr	r3, [pc, #32]	@ (80006b0 <_sbrk+0x64>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000692:	4b07      	ldr	r3, [pc, #28]	@ (80006b0 <_sbrk+0x64>)
 8000694:	681a      	ldr	r2, [r3, #0]
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	4413      	add	r3, r2
 800069a:	4a05      	ldr	r2, [pc, #20]	@ (80006b0 <_sbrk+0x64>)
 800069c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800069e:	68fb      	ldr	r3, [r7, #12]
}
 80006a0:	4618      	mov	r0, r3
 80006a2:	3718      	adds	r7, #24
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	20005000 	.word	0x20005000
 80006ac:	00000400 	.word	0x00000400
 80006b0:	20000098 	.word	0x20000098
 80006b4:	20000280 	.word	0x20000280

080006b8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006bc:	bf00      	nop
 80006be:	46bd      	mov	sp, r7
 80006c0:	bc80      	pop	{r7}
 80006c2:	4770      	bx	lr

080006c4 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b086      	sub	sp, #24
 80006c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006ca:	f107 0308 	add.w	r3, r7, #8
 80006ce:	2200      	movs	r2, #0
 80006d0:	601a      	str	r2, [r3, #0]
 80006d2:	605a      	str	r2, [r3, #4]
 80006d4:	609a      	str	r2, [r3, #8]
 80006d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006d8:	463b      	mov	r3, r7
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
 80006de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006e0:	4b1d      	ldr	r3, [pc, #116]	@ (8000758 <MX_TIM2_Init+0x94>)
 80006e2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80006e6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200-1;
 80006e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000758 <MX_TIM2_Init+0x94>)
 80006ea:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 80006ee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006f0:	4b19      	ldr	r3, [pc, #100]	@ (8000758 <MX_TIM2_Init+0x94>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 80006f6:	4b18      	ldr	r3, [pc, #96]	@ (8000758 <MX_TIM2_Init+0x94>)
 80006f8:	220a      	movs	r2, #10
 80006fa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006fc:	4b16      	ldr	r3, [pc, #88]	@ (8000758 <MX_TIM2_Init+0x94>)
 80006fe:	2200      	movs	r2, #0
 8000700:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000702:	4b15      	ldr	r3, [pc, #84]	@ (8000758 <MX_TIM2_Init+0x94>)
 8000704:	2280      	movs	r2, #128	@ 0x80
 8000706:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000708:	4813      	ldr	r0, [pc, #76]	@ (8000758 <MX_TIM2_Init+0x94>)
 800070a:	f001 f8d5 	bl	80018b8 <HAL_TIM_Base_Init>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000714:	f7ff feb8 	bl	8000488 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000718:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800071c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800071e:	f107 0308 	add.w	r3, r7, #8
 8000722:	4619      	mov	r1, r3
 8000724:	480c      	ldr	r0, [pc, #48]	@ (8000758 <MX_TIM2_Init+0x94>)
 8000726:	f001 fa71 	bl	8001c0c <HAL_TIM_ConfigClockSource>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000730:	f7ff feaa 	bl	8000488 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000734:	2300      	movs	r3, #0
 8000736:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000738:	2300      	movs	r3, #0
 800073a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800073c:	463b      	mov	r3, r7
 800073e:	4619      	mov	r1, r3
 8000740:	4805      	ldr	r0, [pc, #20]	@ (8000758 <MX_TIM2_Init+0x94>)
 8000742:	f001 fc47 	bl	8001fd4 <HAL_TIMEx_MasterConfigSynchronization>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800074c:	f7ff fe9c 	bl	8000488 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000750:	bf00      	nop
 8000752:	3718      	adds	r7, #24
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	2000009c 	.word	0x2000009c

0800075c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b084      	sub	sp, #16
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800076c:	d113      	bne.n	8000796 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800076e:	4b0c      	ldr	r3, [pc, #48]	@ (80007a0 <HAL_TIM_Base_MspInit+0x44>)
 8000770:	69db      	ldr	r3, [r3, #28]
 8000772:	4a0b      	ldr	r2, [pc, #44]	@ (80007a0 <HAL_TIM_Base_MspInit+0x44>)
 8000774:	f043 0301 	orr.w	r3, r3, #1
 8000778:	61d3      	str	r3, [r2, #28]
 800077a:	4b09      	ldr	r3, [pc, #36]	@ (80007a0 <HAL_TIM_Base_MspInit+0x44>)
 800077c:	69db      	ldr	r3, [r3, #28]
 800077e:	f003 0301 	and.w	r3, r3, #1
 8000782:	60fb      	str	r3, [r7, #12]
 8000784:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000786:	2200      	movs	r2, #0
 8000788:	2100      	movs	r1, #0
 800078a:	201c      	movs	r0, #28
 800078c:	f000 f9e7 	bl	8000b5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000790:	201c      	movs	r0, #28
 8000792:	f000 fa00 	bl	8000b96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000796:	bf00      	nop
 8000798:	3710      	adds	r7, #16
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40021000 	.word	0x40021000

080007a4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007a8:	4b11      	ldr	r3, [pc, #68]	@ (80007f0 <MX_USART3_UART_Init+0x4c>)
 80007aa:	4a12      	ldr	r2, [pc, #72]	@ (80007f4 <MX_USART3_UART_Init+0x50>)
 80007ac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80007ae:	4b10      	ldr	r3, [pc, #64]	@ (80007f0 <MX_USART3_UART_Init+0x4c>)
 80007b0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80007b4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007b6:	4b0e      	ldr	r3, [pc, #56]	@ (80007f0 <MX_USART3_UART_Init+0x4c>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007bc:	4b0c      	ldr	r3, [pc, #48]	@ (80007f0 <MX_USART3_UART_Init+0x4c>)
 80007be:	2200      	movs	r2, #0
 80007c0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007c2:	4b0b      	ldr	r3, [pc, #44]	@ (80007f0 <MX_USART3_UART_Init+0x4c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007c8:	4b09      	ldr	r3, [pc, #36]	@ (80007f0 <MX_USART3_UART_Init+0x4c>)
 80007ca:	220c      	movs	r2, #12
 80007cc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ce:	4b08      	ldr	r3, [pc, #32]	@ (80007f0 <MX_USART3_UART_Init+0x4c>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d4:	4b06      	ldr	r3, [pc, #24]	@ (80007f0 <MX_USART3_UART_Init+0x4c>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007da:	4805      	ldr	r0, [pc, #20]	@ (80007f0 <MX_USART3_UART_Init+0x4c>)
 80007dc:	f001 fc6a 	bl	80020b4 <HAL_UART_Init>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80007e6:	f7ff fe4f 	bl	8000488 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007ea:	bf00      	nop
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	200000e4 	.word	0x200000e4
 80007f4:	40004800 	.word	0x40004800

080007f8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b088      	sub	sp, #32
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000800:	f107 0310 	add.w	r3, r7, #16
 8000804:	2200      	movs	r2, #0
 8000806:	601a      	str	r2, [r3, #0]
 8000808:	605a      	str	r2, [r3, #4]
 800080a:	609a      	str	r2, [r3, #8]
 800080c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART3)
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	4a20      	ldr	r2, [pc, #128]	@ (8000894 <HAL_UART_MspInit+0x9c>)
 8000814:	4293      	cmp	r3, r2
 8000816:	d139      	bne.n	800088c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000818:	4b1f      	ldr	r3, [pc, #124]	@ (8000898 <HAL_UART_MspInit+0xa0>)
 800081a:	69db      	ldr	r3, [r3, #28]
 800081c:	4a1e      	ldr	r2, [pc, #120]	@ (8000898 <HAL_UART_MspInit+0xa0>)
 800081e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000822:	61d3      	str	r3, [r2, #28]
 8000824:	4b1c      	ldr	r3, [pc, #112]	@ (8000898 <HAL_UART_MspInit+0xa0>)
 8000826:	69db      	ldr	r3, [r3, #28]
 8000828:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800082c:	60fb      	str	r3, [r7, #12]
 800082e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000830:	4b19      	ldr	r3, [pc, #100]	@ (8000898 <HAL_UART_MspInit+0xa0>)
 8000832:	699b      	ldr	r3, [r3, #24]
 8000834:	4a18      	ldr	r2, [pc, #96]	@ (8000898 <HAL_UART_MspInit+0xa0>)
 8000836:	f043 0308 	orr.w	r3, r3, #8
 800083a:	6193      	str	r3, [r2, #24]
 800083c:	4b16      	ldr	r3, [pc, #88]	@ (8000898 <HAL_UART_MspInit+0xa0>)
 800083e:	699b      	ldr	r3, [r3, #24]
 8000840:	f003 0308 	and.w	r3, r3, #8
 8000844:	60bb      	str	r3, [r7, #8]
 8000846:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000848:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800084c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084e:	2302      	movs	r3, #2
 8000850:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000852:	2303      	movs	r3, #3
 8000854:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000856:	f107 0310 	add.w	r3, r7, #16
 800085a:	4619      	mov	r1, r3
 800085c:	480f      	ldr	r0, [pc, #60]	@ (800089c <HAL_UART_MspInit+0xa4>)
 800085e:	f000 fa67 	bl	8000d30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000862:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000866:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000868:	2300      	movs	r3, #0
 800086a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086c:	2300      	movs	r3, #0
 800086e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000870:	f107 0310 	add.w	r3, r7, #16
 8000874:	4619      	mov	r1, r3
 8000876:	4809      	ldr	r0, [pc, #36]	@ (800089c <HAL_UART_MspInit+0xa4>)
 8000878:	f000 fa5a 	bl	8000d30 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800087c:	2200      	movs	r2, #0
 800087e:	2100      	movs	r1, #0
 8000880:	2027      	movs	r0, #39	@ 0x27
 8000882:	f000 f96c 	bl	8000b5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000886:	2027      	movs	r0, #39	@ 0x27
 8000888:	f000 f985 	bl	8000b96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800088c:	bf00      	nop
 800088e:	3720      	adds	r7, #32
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	40004800 	.word	0x40004800
 8000898:	40021000 	.word	0x40021000
 800089c:	40010c00 	.word	0x40010c00

080008a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008a0:	f7ff ff0a 	bl	80006b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008a4:	480b      	ldr	r0, [pc, #44]	@ (80008d4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80008a6:	490c      	ldr	r1, [pc, #48]	@ (80008d8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80008a8:	4a0c      	ldr	r2, [pc, #48]	@ (80008dc <LoopFillZerobss+0x16>)
  movs r3, #0
 80008aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008ac:	e002      	b.n	80008b4 <LoopCopyDataInit>

080008ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008b2:	3304      	adds	r3, #4

080008b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008b8:	d3f9      	bcc.n	80008ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ba:	4a09      	ldr	r2, [pc, #36]	@ (80008e0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80008bc:	4c09      	ldr	r4, [pc, #36]	@ (80008e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008c0:	e001      	b.n	80008c6 <LoopFillZerobss>

080008c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008c4:	3204      	adds	r2, #4

080008c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008c8:	d3fb      	bcc.n	80008c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008ca:	f002 fb83 	bl	8002fd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008ce:	f7ff fd6b 	bl	80003a8 <main>
  bx lr
 80008d2:	4770      	bx	lr
  ldr r0, =_sdata
 80008d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008d8:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80008dc:	08003c20 	.word	0x08003c20
  ldr r2, =_sbss
 80008e0:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80008e4:	2000027c 	.word	0x2000027c

080008e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008e8:	e7fe      	b.n	80008e8 <ADC1_2_IRQHandler>
	...

080008ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008f0:	4b08      	ldr	r3, [pc, #32]	@ (8000914 <HAL_Init+0x28>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4a07      	ldr	r2, [pc, #28]	@ (8000914 <HAL_Init+0x28>)
 80008f6:	f043 0310 	orr.w	r3, r3, #16
 80008fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008fc:	2003      	movs	r0, #3
 80008fe:	f000 f923 	bl	8000b48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000902:	200f      	movs	r0, #15
 8000904:	f000 f808 	bl	8000918 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000908:	f7ff fdc4 	bl	8000494 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800090c:	2300      	movs	r3, #0
}
 800090e:	4618      	mov	r0, r3
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40022000 	.word	0x40022000

08000918 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000920:	4b12      	ldr	r3, [pc, #72]	@ (800096c <HAL_InitTick+0x54>)
 8000922:	681a      	ldr	r2, [r3, #0]
 8000924:	4b12      	ldr	r3, [pc, #72]	@ (8000970 <HAL_InitTick+0x58>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	4619      	mov	r1, r3
 800092a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800092e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000932:	fbb2 f3f3 	udiv	r3, r2, r3
 8000936:	4618      	mov	r0, r3
 8000938:	f000 f93b 	bl	8000bb2 <HAL_SYSTICK_Config>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000942:	2301      	movs	r3, #1
 8000944:	e00e      	b.n	8000964 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	2b0f      	cmp	r3, #15
 800094a:	d80a      	bhi.n	8000962 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800094c:	2200      	movs	r2, #0
 800094e:	6879      	ldr	r1, [r7, #4]
 8000950:	f04f 30ff 	mov.w	r0, #4294967295
 8000954:	f000 f903 	bl	8000b5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000958:	4a06      	ldr	r2, [pc, #24]	@ (8000974 <HAL_InitTick+0x5c>)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800095e:	2300      	movs	r3, #0
 8000960:	e000      	b.n	8000964 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000962:	2301      	movs	r3, #1
}
 8000964:	4618      	mov	r0, r3
 8000966:	3708      	adds	r7, #8
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	20000004 	.word	0x20000004
 8000970:	2000000c 	.word	0x2000000c
 8000974:	20000008 	.word	0x20000008

08000978 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800097c:	4b05      	ldr	r3, [pc, #20]	@ (8000994 <HAL_IncTick+0x1c>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	461a      	mov	r2, r3
 8000982:	4b05      	ldr	r3, [pc, #20]	@ (8000998 <HAL_IncTick+0x20>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	4413      	add	r3, r2
 8000988:	4a03      	ldr	r2, [pc, #12]	@ (8000998 <HAL_IncTick+0x20>)
 800098a:	6013      	str	r3, [r2, #0]
}
 800098c:	bf00      	nop
 800098e:	46bd      	mov	sp, r7
 8000990:	bc80      	pop	{r7}
 8000992:	4770      	bx	lr
 8000994:	2000000c 	.word	0x2000000c
 8000998:	2000012c 	.word	0x2000012c

0800099c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  return uwTick;
 80009a0:	4b02      	ldr	r3, [pc, #8]	@ (80009ac <HAL_GetTick+0x10>)
 80009a2:	681b      	ldr	r3, [r3, #0]
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bc80      	pop	{r7}
 80009aa:	4770      	bx	lr
 80009ac:	2000012c 	.word	0x2000012c

080009b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b085      	sub	sp, #20
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	f003 0307 	and.w	r3, r3, #7
 80009be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009c0:	4b0c      	ldr	r3, [pc, #48]	@ (80009f4 <__NVIC_SetPriorityGrouping+0x44>)
 80009c2:	68db      	ldr	r3, [r3, #12]
 80009c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009c6:	68ba      	ldr	r2, [r7, #8]
 80009c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80009cc:	4013      	ands	r3, r2
 80009ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009d4:	68bb      	ldr	r3, [r7, #8]
 80009d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80009dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009e2:	4a04      	ldr	r2, [pc, #16]	@ (80009f4 <__NVIC_SetPriorityGrouping+0x44>)
 80009e4:	68bb      	ldr	r3, [r7, #8]
 80009e6:	60d3      	str	r3, [r2, #12]
}
 80009e8:	bf00      	nop
 80009ea:	3714      	adds	r7, #20
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bc80      	pop	{r7}
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	e000ed00 	.word	0xe000ed00

080009f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009fc:	4b04      	ldr	r3, [pc, #16]	@ (8000a10 <__NVIC_GetPriorityGrouping+0x18>)
 80009fe:	68db      	ldr	r3, [r3, #12]
 8000a00:	0a1b      	lsrs	r3, r3, #8
 8000a02:	f003 0307 	and.w	r3, r3, #7
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bc80      	pop	{r7}
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	e000ed00 	.word	0xe000ed00

08000a14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	db0b      	blt.n	8000a3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a26:	79fb      	ldrb	r3, [r7, #7]
 8000a28:	f003 021f 	and.w	r2, r3, #31
 8000a2c:	4906      	ldr	r1, [pc, #24]	@ (8000a48 <__NVIC_EnableIRQ+0x34>)
 8000a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a32:	095b      	lsrs	r3, r3, #5
 8000a34:	2001      	movs	r0, #1
 8000a36:	fa00 f202 	lsl.w	r2, r0, r2
 8000a3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a3e:	bf00      	nop
 8000a40:	370c      	adds	r7, #12
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bc80      	pop	{r7}
 8000a46:	4770      	bx	lr
 8000a48:	e000e100 	.word	0xe000e100

08000a4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	4603      	mov	r3, r0
 8000a54:	6039      	str	r1, [r7, #0]
 8000a56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	db0a      	blt.n	8000a76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	b2da      	uxtb	r2, r3
 8000a64:	490c      	ldr	r1, [pc, #48]	@ (8000a98 <__NVIC_SetPriority+0x4c>)
 8000a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a6a:	0112      	lsls	r2, r2, #4
 8000a6c:	b2d2      	uxtb	r2, r2
 8000a6e:	440b      	add	r3, r1
 8000a70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a74:	e00a      	b.n	8000a8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	b2da      	uxtb	r2, r3
 8000a7a:	4908      	ldr	r1, [pc, #32]	@ (8000a9c <__NVIC_SetPriority+0x50>)
 8000a7c:	79fb      	ldrb	r3, [r7, #7]
 8000a7e:	f003 030f 	and.w	r3, r3, #15
 8000a82:	3b04      	subs	r3, #4
 8000a84:	0112      	lsls	r2, r2, #4
 8000a86:	b2d2      	uxtb	r2, r2
 8000a88:	440b      	add	r3, r1
 8000a8a:	761a      	strb	r2, [r3, #24]
}
 8000a8c:	bf00      	nop
 8000a8e:	370c      	adds	r7, #12
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bc80      	pop	{r7}
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	e000e100 	.word	0xe000e100
 8000a9c:	e000ed00 	.word	0xe000ed00

08000aa0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b089      	sub	sp, #36	@ 0x24
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	60f8      	str	r0, [r7, #12]
 8000aa8:	60b9      	str	r1, [r7, #8]
 8000aaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	f003 0307 	and.w	r3, r3, #7
 8000ab2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ab4:	69fb      	ldr	r3, [r7, #28]
 8000ab6:	f1c3 0307 	rsb	r3, r3, #7
 8000aba:	2b04      	cmp	r3, #4
 8000abc:	bf28      	it	cs
 8000abe:	2304      	movcs	r3, #4
 8000ac0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ac2:	69fb      	ldr	r3, [r7, #28]
 8000ac4:	3304      	adds	r3, #4
 8000ac6:	2b06      	cmp	r3, #6
 8000ac8:	d902      	bls.n	8000ad0 <NVIC_EncodePriority+0x30>
 8000aca:	69fb      	ldr	r3, [r7, #28]
 8000acc:	3b03      	subs	r3, #3
 8000ace:	e000      	b.n	8000ad2 <NVIC_EncodePriority+0x32>
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ad4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ad8:	69bb      	ldr	r3, [r7, #24]
 8000ada:	fa02 f303 	lsl.w	r3, r2, r3
 8000ade:	43da      	mvns	r2, r3
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	401a      	ands	r2, r3
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ae8:	f04f 31ff 	mov.w	r1, #4294967295
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	fa01 f303 	lsl.w	r3, r1, r3
 8000af2:	43d9      	mvns	r1, r3
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000af8:	4313      	orrs	r3, r2
         );
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	3724      	adds	r7, #36	@ 0x24
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bc80      	pop	{r7}
 8000b02:	4770      	bx	lr

08000b04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	3b01      	subs	r3, #1
 8000b10:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b14:	d301      	bcc.n	8000b1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b16:	2301      	movs	r3, #1
 8000b18:	e00f      	b.n	8000b3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b1a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b44 <SysTick_Config+0x40>)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	3b01      	subs	r3, #1
 8000b20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b22:	210f      	movs	r1, #15
 8000b24:	f04f 30ff 	mov.w	r0, #4294967295
 8000b28:	f7ff ff90 	bl	8000a4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b2c:	4b05      	ldr	r3, [pc, #20]	@ (8000b44 <SysTick_Config+0x40>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b32:	4b04      	ldr	r3, [pc, #16]	@ (8000b44 <SysTick_Config+0x40>)
 8000b34:	2207      	movs	r2, #7
 8000b36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b38:	2300      	movs	r3, #0
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	e000e010 	.word	0xe000e010

08000b48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b50:	6878      	ldr	r0, [r7, #4]
 8000b52:	f7ff ff2d 	bl	80009b0 <__NVIC_SetPriorityGrouping>
}
 8000b56:	bf00      	nop
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}

08000b5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b5e:	b580      	push	{r7, lr}
 8000b60:	b086      	sub	sp, #24
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	4603      	mov	r3, r0
 8000b66:	60b9      	str	r1, [r7, #8]
 8000b68:	607a      	str	r2, [r7, #4]
 8000b6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b70:	f7ff ff42 	bl	80009f8 <__NVIC_GetPriorityGrouping>
 8000b74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b76:	687a      	ldr	r2, [r7, #4]
 8000b78:	68b9      	ldr	r1, [r7, #8]
 8000b7a:	6978      	ldr	r0, [r7, #20]
 8000b7c:	f7ff ff90 	bl	8000aa0 <NVIC_EncodePriority>
 8000b80:	4602      	mov	r2, r0
 8000b82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b86:	4611      	mov	r1, r2
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f7ff ff5f 	bl	8000a4c <__NVIC_SetPriority>
}
 8000b8e:	bf00      	nop
 8000b90:	3718      	adds	r7, #24
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b96:	b580      	push	{r7, lr}
 8000b98:	b082      	sub	sp, #8
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ba0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f7ff ff35 	bl	8000a14 <__NVIC_EnableIRQ>
}
 8000baa:	bf00      	nop
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}

08000bb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bb2:	b580      	push	{r7, lr}
 8000bb4:	b082      	sub	sp, #8
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bba:	6878      	ldr	r0, [r7, #4]
 8000bbc:	f7ff ffa2 	bl	8000b04 <SysTick_Config>
 8000bc0:	4603      	mov	r3, r0
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3708      	adds	r7, #8
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}

08000bca <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	b085      	sub	sp, #20
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000bdc:	b2db      	uxtb	r3, r3
 8000bde:	2b02      	cmp	r3, #2
 8000be0:	d008      	beq.n	8000bf4 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	2204      	movs	r2, #4
 8000be6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	2200      	movs	r2, #0
 8000bec:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	e020      	b.n	8000c36 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	681a      	ldr	r2, [r3, #0]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	f022 020e 	bic.w	r2, r2, #14
 8000c02:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	681a      	ldr	r2, [r3, #0]
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f022 0201 	bic.w	r2, r2, #1
 8000c12:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000c1c:	2101      	movs	r1, #1
 8000c1e:	fa01 f202 	lsl.w	r2, r1, r2
 8000c22:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	2201      	movs	r2, #1
 8000c28:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2200      	movs	r2, #0
 8000c30:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3714      	adds	r7, #20
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bc80      	pop	{r7}
 8000c3e:	4770      	bx	lr

08000c40 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	2b02      	cmp	r3, #2
 8000c56:	d005      	beq.n	8000c64 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	2204      	movs	r2, #4
 8000c5c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	73fb      	strb	r3, [r7, #15]
 8000c62:	e051      	b.n	8000d08 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	681a      	ldr	r2, [r3, #0]
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	f022 020e 	bic.w	r2, r2, #14
 8000c72:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f022 0201 	bic.w	r2, r2, #1
 8000c82:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a22      	ldr	r2, [pc, #136]	@ (8000d14 <HAL_DMA_Abort_IT+0xd4>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d029      	beq.n	8000ce2 <HAL_DMA_Abort_IT+0xa2>
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4a21      	ldr	r2, [pc, #132]	@ (8000d18 <HAL_DMA_Abort_IT+0xd8>)
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d022      	beq.n	8000cde <HAL_DMA_Abort_IT+0x9e>
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a1f      	ldr	r2, [pc, #124]	@ (8000d1c <HAL_DMA_Abort_IT+0xdc>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d01a      	beq.n	8000cd8 <HAL_DMA_Abort_IT+0x98>
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4a1e      	ldr	r2, [pc, #120]	@ (8000d20 <HAL_DMA_Abort_IT+0xe0>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d012      	beq.n	8000cd2 <HAL_DMA_Abort_IT+0x92>
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a1c      	ldr	r2, [pc, #112]	@ (8000d24 <HAL_DMA_Abort_IT+0xe4>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d00a      	beq.n	8000ccc <HAL_DMA_Abort_IT+0x8c>
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4a1b      	ldr	r2, [pc, #108]	@ (8000d28 <HAL_DMA_Abort_IT+0xe8>)
 8000cbc:	4293      	cmp	r3, r2
 8000cbe:	d102      	bne.n	8000cc6 <HAL_DMA_Abort_IT+0x86>
 8000cc0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000cc4:	e00e      	b.n	8000ce4 <HAL_DMA_Abort_IT+0xa4>
 8000cc6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000cca:	e00b      	b.n	8000ce4 <HAL_DMA_Abort_IT+0xa4>
 8000ccc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000cd0:	e008      	b.n	8000ce4 <HAL_DMA_Abort_IT+0xa4>
 8000cd2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cd6:	e005      	b.n	8000ce4 <HAL_DMA_Abort_IT+0xa4>
 8000cd8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000cdc:	e002      	b.n	8000ce4 <HAL_DMA_Abort_IT+0xa4>
 8000cde:	2310      	movs	r3, #16
 8000ce0:	e000      	b.n	8000ce4 <HAL_DMA_Abort_IT+0xa4>
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	4a11      	ldr	r2, [pc, #68]	@ (8000d2c <HAL_DMA_Abort_IT+0xec>)
 8000ce6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	2201      	movs	r2, #1
 8000cec:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d003      	beq.n	8000d08 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d04:	6878      	ldr	r0, [r7, #4]
 8000d06:	4798      	blx	r3
    } 
  }
  return status;
 8000d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3710      	adds	r7, #16
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	40020008 	.word	0x40020008
 8000d18:	4002001c 	.word	0x4002001c
 8000d1c:	40020030 	.word	0x40020030
 8000d20:	40020044 	.word	0x40020044
 8000d24:	40020058 	.word	0x40020058
 8000d28:	4002006c 	.word	0x4002006c
 8000d2c:	40020000 	.word	0x40020000

08000d30 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b08b      	sub	sp, #44	@ 0x2c
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
 8000d38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d42:	e169      	b.n	8001018 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d44:	2201      	movs	r2, #1
 8000d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d48:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	69fa      	ldr	r2, [r7, #28]
 8000d54:	4013      	ands	r3, r2
 8000d56:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d58:	69ba      	ldr	r2, [r7, #24]
 8000d5a:	69fb      	ldr	r3, [r7, #28]
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	f040 8158 	bne.w	8001012 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	4a9a      	ldr	r2, [pc, #616]	@ (8000fd0 <HAL_GPIO_Init+0x2a0>)
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d05e      	beq.n	8000e2a <HAL_GPIO_Init+0xfa>
 8000d6c:	4a98      	ldr	r2, [pc, #608]	@ (8000fd0 <HAL_GPIO_Init+0x2a0>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d875      	bhi.n	8000e5e <HAL_GPIO_Init+0x12e>
 8000d72:	4a98      	ldr	r2, [pc, #608]	@ (8000fd4 <HAL_GPIO_Init+0x2a4>)
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d058      	beq.n	8000e2a <HAL_GPIO_Init+0xfa>
 8000d78:	4a96      	ldr	r2, [pc, #600]	@ (8000fd4 <HAL_GPIO_Init+0x2a4>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d86f      	bhi.n	8000e5e <HAL_GPIO_Init+0x12e>
 8000d7e:	4a96      	ldr	r2, [pc, #600]	@ (8000fd8 <HAL_GPIO_Init+0x2a8>)
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d052      	beq.n	8000e2a <HAL_GPIO_Init+0xfa>
 8000d84:	4a94      	ldr	r2, [pc, #592]	@ (8000fd8 <HAL_GPIO_Init+0x2a8>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d869      	bhi.n	8000e5e <HAL_GPIO_Init+0x12e>
 8000d8a:	4a94      	ldr	r2, [pc, #592]	@ (8000fdc <HAL_GPIO_Init+0x2ac>)
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d04c      	beq.n	8000e2a <HAL_GPIO_Init+0xfa>
 8000d90:	4a92      	ldr	r2, [pc, #584]	@ (8000fdc <HAL_GPIO_Init+0x2ac>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d863      	bhi.n	8000e5e <HAL_GPIO_Init+0x12e>
 8000d96:	4a92      	ldr	r2, [pc, #584]	@ (8000fe0 <HAL_GPIO_Init+0x2b0>)
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d046      	beq.n	8000e2a <HAL_GPIO_Init+0xfa>
 8000d9c:	4a90      	ldr	r2, [pc, #576]	@ (8000fe0 <HAL_GPIO_Init+0x2b0>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d85d      	bhi.n	8000e5e <HAL_GPIO_Init+0x12e>
 8000da2:	2b12      	cmp	r3, #18
 8000da4:	d82a      	bhi.n	8000dfc <HAL_GPIO_Init+0xcc>
 8000da6:	2b12      	cmp	r3, #18
 8000da8:	d859      	bhi.n	8000e5e <HAL_GPIO_Init+0x12e>
 8000daa:	a201      	add	r2, pc, #4	@ (adr r2, 8000db0 <HAL_GPIO_Init+0x80>)
 8000dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000db0:	08000e2b 	.word	0x08000e2b
 8000db4:	08000e05 	.word	0x08000e05
 8000db8:	08000e17 	.word	0x08000e17
 8000dbc:	08000e59 	.word	0x08000e59
 8000dc0:	08000e5f 	.word	0x08000e5f
 8000dc4:	08000e5f 	.word	0x08000e5f
 8000dc8:	08000e5f 	.word	0x08000e5f
 8000dcc:	08000e5f 	.word	0x08000e5f
 8000dd0:	08000e5f 	.word	0x08000e5f
 8000dd4:	08000e5f 	.word	0x08000e5f
 8000dd8:	08000e5f 	.word	0x08000e5f
 8000ddc:	08000e5f 	.word	0x08000e5f
 8000de0:	08000e5f 	.word	0x08000e5f
 8000de4:	08000e5f 	.word	0x08000e5f
 8000de8:	08000e5f 	.word	0x08000e5f
 8000dec:	08000e5f 	.word	0x08000e5f
 8000df0:	08000e5f 	.word	0x08000e5f
 8000df4:	08000e0d 	.word	0x08000e0d
 8000df8:	08000e21 	.word	0x08000e21
 8000dfc:	4a79      	ldr	r2, [pc, #484]	@ (8000fe4 <HAL_GPIO_Init+0x2b4>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d013      	beq.n	8000e2a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e02:	e02c      	b.n	8000e5e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	68db      	ldr	r3, [r3, #12]
 8000e08:	623b      	str	r3, [r7, #32]
          break;
 8000e0a:	e029      	b.n	8000e60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	68db      	ldr	r3, [r3, #12]
 8000e10:	3304      	adds	r3, #4
 8000e12:	623b      	str	r3, [r7, #32]
          break;
 8000e14:	e024      	b.n	8000e60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	68db      	ldr	r3, [r3, #12]
 8000e1a:	3308      	adds	r3, #8
 8000e1c:	623b      	str	r3, [r7, #32]
          break;
 8000e1e:	e01f      	b.n	8000e60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	330c      	adds	r3, #12
 8000e26:	623b      	str	r3, [r7, #32]
          break;
 8000e28:	e01a      	b.n	8000e60 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	689b      	ldr	r3, [r3, #8]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d102      	bne.n	8000e38 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e32:	2304      	movs	r3, #4
 8000e34:	623b      	str	r3, [r7, #32]
          break;
 8000e36:	e013      	b.n	8000e60 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	689b      	ldr	r3, [r3, #8]
 8000e3c:	2b01      	cmp	r3, #1
 8000e3e:	d105      	bne.n	8000e4c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e40:	2308      	movs	r3, #8
 8000e42:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	69fa      	ldr	r2, [r7, #28]
 8000e48:	611a      	str	r2, [r3, #16]
          break;
 8000e4a:	e009      	b.n	8000e60 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e4c:	2308      	movs	r3, #8
 8000e4e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	69fa      	ldr	r2, [r7, #28]
 8000e54:	615a      	str	r2, [r3, #20]
          break;
 8000e56:	e003      	b.n	8000e60 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	623b      	str	r3, [r7, #32]
          break;
 8000e5c:	e000      	b.n	8000e60 <HAL_GPIO_Init+0x130>
          break;
 8000e5e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e60:	69bb      	ldr	r3, [r7, #24]
 8000e62:	2bff      	cmp	r3, #255	@ 0xff
 8000e64:	d801      	bhi.n	8000e6a <HAL_GPIO_Init+0x13a>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	e001      	b.n	8000e6e <HAL_GPIO_Init+0x13e>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	3304      	adds	r3, #4
 8000e6e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e70:	69bb      	ldr	r3, [r7, #24]
 8000e72:	2bff      	cmp	r3, #255	@ 0xff
 8000e74:	d802      	bhi.n	8000e7c <HAL_GPIO_Init+0x14c>
 8000e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e78:	009b      	lsls	r3, r3, #2
 8000e7a:	e002      	b.n	8000e82 <HAL_GPIO_Init+0x152>
 8000e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e7e:	3b08      	subs	r3, #8
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	210f      	movs	r1, #15
 8000e8a:	693b      	ldr	r3, [r7, #16]
 8000e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e90:	43db      	mvns	r3, r3
 8000e92:	401a      	ands	r2, r3
 8000e94:	6a39      	ldr	r1, [r7, #32]
 8000e96:	693b      	ldr	r3, [r7, #16]
 8000e98:	fa01 f303 	lsl.w	r3, r1, r3
 8000e9c:	431a      	orrs	r2, r3
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	f000 80b1 	beq.w	8001012 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000eb0:	4b4d      	ldr	r3, [pc, #308]	@ (8000fe8 <HAL_GPIO_Init+0x2b8>)
 8000eb2:	699b      	ldr	r3, [r3, #24]
 8000eb4:	4a4c      	ldr	r2, [pc, #304]	@ (8000fe8 <HAL_GPIO_Init+0x2b8>)
 8000eb6:	f043 0301 	orr.w	r3, r3, #1
 8000eba:	6193      	str	r3, [r2, #24]
 8000ebc:	4b4a      	ldr	r3, [pc, #296]	@ (8000fe8 <HAL_GPIO_Init+0x2b8>)
 8000ebe:	699b      	ldr	r3, [r3, #24]
 8000ec0:	f003 0301 	and.w	r3, r3, #1
 8000ec4:	60bb      	str	r3, [r7, #8]
 8000ec6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ec8:	4a48      	ldr	r2, [pc, #288]	@ (8000fec <HAL_GPIO_Init+0x2bc>)
 8000eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ecc:	089b      	lsrs	r3, r3, #2
 8000ece:	3302      	adds	r3, #2
 8000ed0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ed4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ed8:	f003 0303 	and.w	r3, r3, #3
 8000edc:	009b      	lsls	r3, r3, #2
 8000ede:	220f      	movs	r2, #15
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	43db      	mvns	r3, r3
 8000ee6:	68fa      	ldr	r2, [r7, #12]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	4a40      	ldr	r2, [pc, #256]	@ (8000ff0 <HAL_GPIO_Init+0x2c0>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d013      	beq.n	8000f1c <HAL_GPIO_Init+0x1ec>
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	4a3f      	ldr	r2, [pc, #252]	@ (8000ff4 <HAL_GPIO_Init+0x2c4>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d00d      	beq.n	8000f18 <HAL_GPIO_Init+0x1e8>
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	4a3e      	ldr	r2, [pc, #248]	@ (8000ff8 <HAL_GPIO_Init+0x2c8>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d007      	beq.n	8000f14 <HAL_GPIO_Init+0x1e4>
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	4a3d      	ldr	r2, [pc, #244]	@ (8000ffc <HAL_GPIO_Init+0x2cc>)
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d101      	bne.n	8000f10 <HAL_GPIO_Init+0x1e0>
 8000f0c:	2303      	movs	r3, #3
 8000f0e:	e006      	b.n	8000f1e <HAL_GPIO_Init+0x1ee>
 8000f10:	2304      	movs	r3, #4
 8000f12:	e004      	b.n	8000f1e <HAL_GPIO_Init+0x1ee>
 8000f14:	2302      	movs	r3, #2
 8000f16:	e002      	b.n	8000f1e <HAL_GPIO_Init+0x1ee>
 8000f18:	2301      	movs	r3, #1
 8000f1a:	e000      	b.n	8000f1e <HAL_GPIO_Init+0x1ee>
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f20:	f002 0203 	and.w	r2, r2, #3
 8000f24:	0092      	lsls	r2, r2, #2
 8000f26:	4093      	lsls	r3, r2
 8000f28:	68fa      	ldr	r2, [r7, #12]
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000f2e:	492f      	ldr	r1, [pc, #188]	@ (8000fec <HAL_GPIO_Init+0x2bc>)
 8000f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f32:	089b      	lsrs	r3, r3, #2
 8000f34:	3302      	adds	r3, #2
 8000f36:	68fa      	ldr	r2, [r7, #12]
 8000f38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d006      	beq.n	8000f56 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f48:	4b2d      	ldr	r3, [pc, #180]	@ (8001000 <HAL_GPIO_Init+0x2d0>)
 8000f4a:	689a      	ldr	r2, [r3, #8]
 8000f4c:	492c      	ldr	r1, [pc, #176]	@ (8001000 <HAL_GPIO_Init+0x2d0>)
 8000f4e:	69bb      	ldr	r3, [r7, #24]
 8000f50:	4313      	orrs	r3, r2
 8000f52:	608b      	str	r3, [r1, #8]
 8000f54:	e006      	b.n	8000f64 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f56:	4b2a      	ldr	r3, [pc, #168]	@ (8001000 <HAL_GPIO_Init+0x2d0>)
 8000f58:	689a      	ldr	r2, [r3, #8]
 8000f5a:	69bb      	ldr	r3, [r7, #24]
 8000f5c:	43db      	mvns	r3, r3
 8000f5e:	4928      	ldr	r1, [pc, #160]	@ (8001000 <HAL_GPIO_Init+0x2d0>)
 8000f60:	4013      	ands	r3, r2
 8000f62:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d006      	beq.n	8000f7e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f70:	4b23      	ldr	r3, [pc, #140]	@ (8001000 <HAL_GPIO_Init+0x2d0>)
 8000f72:	68da      	ldr	r2, [r3, #12]
 8000f74:	4922      	ldr	r1, [pc, #136]	@ (8001000 <HAL_GPIO_Init+0x2d0>)
 8000f76:	69bb      	ldr	r3, [r7, #24]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	60cb      	str	r3, [r1, #12]
 8000f7c:	e006      	b.n	8000f8c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f7e:	4b20      	ldr	r3, [pc, #128]	@ (8001000 <HAL_GPIO_Init+0x2d0>)
 8000f80:	68da      	ldr	r2, [r3, #12]
 8000f82:	69bb      	ldr	r3, [r7, #24]
 8000f84:	43db      	mvns	r3, r3
 8000f86:	491e      	ldr	r1, [pc, #120]	@ (8001000 <HAL_GPIO_Init+0x2d0>)
 8000f88:	4013      	ands	r3, r2
 8000f8a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d006      	beq.n	8000fa6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f98:	4b19      	ldr	r3, [pc, #100]	@ (8001000 <HAL_GPIO_Init+0x2d0>)
 8000f9a:	685a      	ldr	r2, [r3, #4]
 8000f9c:	4918      	ldr	r1, [pc, #96]	@ (8001000 <HAL_GPIO_Init+0x2d0>)
 8000f9e:	69bb      	ldr	r3, [r7, #24]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	604b      	str	r3, [r1, #4]
 8000fa4:	e006      	b.n	8000fb4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000fa6:	4b16      	ldr	r3, [pc, #88]	@ (8001000 <HAL_GPIO_Init+0x2d0>)
 8000fa8:	685a      	ldr	r2, [r3, #4]
 8000faa:	69bb      	ldr	r3, [r7, #24]
 8000fac:	43db      	mvns	r3, r3
 8000fae:	4914      	ldr	r1, [pc, #80]	@ (8001000 <HAL_GPIO_Init+0x2d0>)
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d021      	beq.n	8001004 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000fc0:	4b0f      	ldr	r3, [pc, #60]	@ (8001000 <HAL_GPIO_Init+0x2d0>)
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	490e      	ldr	r1, [pc, #56]	@ (8001000 <HAL_GPIO_Init+0x2d0>)
 8000fc6:	69bb      	ldr	r3, [r7, #24]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	600b      	str	r3, [r1, #0]
 8000fcc:	e021      	b.n	8001012 <HAL_GPIO_Init+0x2e2>
 8000fce:	bf00      	nop
 8000fd0:	10320000 	.word	0x10320000
 8000fd4:	10310000 	.word	0x10310000
 8000fd8:	10220000 	.word	0x10220000
 8000fdc:	10210000 	.word	0x10210000
 8000fe0:	10120000 	.word	0x10120000
 8000fe4:	10110000 	.word	0x10110000
 8000fe8:	40021000 	.word	0x40021000
 8000fec:	40010000 	.word	0x40010000
 8000ff0:	40010800 	.word	0x40010800
 8000ff4:	40010c00 	.word	0x40010c00
 8000ff8:	40011000 	.word	0x40011000
 8000ffc:	40011400 	.word	0x40011400
 8001000:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001004:	4b0b      	ldr	r3, [pc, #44]	@ (8001034 <HAL_GPIO_Init+0x304>)
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	69bb      	ldr	r3, [r7, #24]
 800100a:	43db      	mvns	r3, r3
 800100c:	4909      	ldr	r1, [pc, #36]	@ (8001034 <HAL_GPIO_Init+0x304>)
 800100e:	4013      	ands	r3, r2
 8001010:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001014:	3301      	adds	r3, #1
 8001016:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800101e:	fa22 f303 	lsr.w	r3, r2, r3
 8001022:	2b00      	cmp	r3, #0
 8001024:	f47f ae8e 	bne.w	8000d44 <HAL_GPIO_Init+0x14>
  }
}
 8001028:	bf00      	nop
 800102a:	bf00      	nop
 800102c:	372c      	adds	r7, #44	@ 0x2c
 800102e:	46bd      	mov	sp, r7
 8001030:	bc80      	pop	{r7}
 8001032:	4770      	bx	lr
 8001034:	40010400 	.word	0x40010400

08001038 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001038:	b480      	push	{r7}
 800103a:	b085      	sub	sp, #20
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	460b      	mov	r3, r1
 8001042:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	689a      	ldr	r2, [r3, #8]
 8001048:	887b      	ldrh	r3, [r7, #2]
 800104a:	4013      	ands	r3, r2
 800104c:	2b00      	cmp	r3, #0
 800104e:	d002      	beq.n	8001056 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001050:	2301      	movs	r3, #1
 8001052:	73fb      	strb	r3, [r7, #15]
 8001054:	e001      	b.n	800105a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001056:	2300      	movs	r3, #0
 8001058:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800105a:	7bfb      	ldrb	r3, [r7, #15]
}
 800105c:	4618      	mov	r0, r3
 800105e:	3714      	adds	r7, #20
 8001060:	46bd      	mov	sp, r7
 8001062:	bc80      	pop	{r7}
 8001064:	4770      	bx	lr

08001066 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001066:	b480      	push	{r7}
 8001068:	b083      	sub	sp, #12
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]
 800106e:	460b      	mov	r3, r1
 8001070:	807b      	strh	r3, [r7, #2]
 8001072:	4613      	mov	r3, r2
 8001074:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001076:	787b      	ldrb	r3, [r7, #1]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d003      	beq.n	8001084 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800107c:	887a      	ldrh	r2, [r7, #2]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001082:	e003      	b.n	800108c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001084:	887b      	ldrh	r3, [r7, #2]
 8001086:	041a      	lsls	r2, r3, #16
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	611a      	str	r2, [r3, #16]
}
 800108c:	bf00      	nop
 800108e:	370c      	adds	r7, #12
 8001090:	46bd      	mov	sp, r7
 8001092:	bc80      	pop	{r7}
 8001094:	4770      	bx	lr
	...

08001098 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b086      	sub	sp, #24
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d101      	bne.n	80010aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e272      	b.n	8001590 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f003 0301 	and.w	r3, r3, #1
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	f000 8087 	beq.w	80011c6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80010b8:	4b92      	ldr	r3, [pc, #584]	@ (8001304 <HAL_RCC_OscConfig+0x26c>)
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f003 030c 	and.w	r3, r3, #12
 80010c0:	2b04      	cmp	r3, #4
 80010c2:	d00c      	beq.n	80010de <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80010c4:	4b8f      	ldr	r3, [pc, #572]	@ (8001304 <HAL_RCC_OscConfig+0x26c>)
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f003 030c 	and.w	r3, r3, #12
 80010cc:	2b08      	cmp	r3, #8
 80010ce:	d112      	bne.n	80010f6 <HAL_RCC_OscConfig+0x5e>
 80010d0:	4b8c      	ldr	r3, [pc, #560]	@ (8001304 <HAL_RCC_OscConfig+0x26c>)
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010dc:	d10b      	bne.n	80010f6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010de:	4b89      	ldr	r3, [pc, #548]	@ (8001304 <HAL_RCC_OscConfig+0x26c>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d06c      	beq.n	80011c4 <HAL_RCC_OscConfig+0x12c>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d168      	bne.n	80011c4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
 80010f4:	e24c      	b.n	8001590 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010fe:	d106      	bne.n	800110e <HAL_RCC_OscConfig+0x76>
 8001100:	4b80      	ldr	r3, [pc, #512]	@ (8001304 <HAL_RCC_OscConfig+0x26c>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a7f      	ldr	r2, [pc, #508]	@ (8001304 <HAL_RCC_OscConfig+0x26c>)
 8001106:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800110a:	6013      	str	r3, [r2, #0]
 800110c:	e02e      	b.n	800116c <HAL_RCC_OscConfig+0xd4>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d10c      	bne.n	8001130 <HAL_RCC_OscConfig+0x98>
 8001116:	4b7b      	ldr	r3, [pc, #492]	@ (8001304 <HAL_RCC_OscConfig+0x26c>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a7a      	ldr	r2, [pc, #488]	@ (8001304 <HAL_RCC_OscConfig+0x26c>)
 800111c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001120:	6013      	str	r3, [r2, #0]
 8001122:	4b78      	ldr	r3, [pc, #480]	@ (8001304 <HAL_RCC_OscConfig+0x26c>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a77      	ldr	r2, [pc, #476]	@ (8001304 <HAL_RCC_OscConfig+0x26c>)
 8001128:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800112c:	6013      	str	r3, [r2, #0]
 800112e:	e01d      	b.n	800116c <HAL_RCC_OscConfig+0xd4>
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001138:	d10c      	bne.n	8001154 <HAL_RCC_OscConfig+0xbc>
 800113a:	4b72      	ldr	r3, [pc, #456]	@ (8001304 <HAL_RCC_OscConfig+0x26c>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a71      	ldr	r2, [pc, #452]	@ (8001304 <HAL_RCC_OscConfig+0x26c>)
 8001140:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001144:	6013      	str	r3, [r2, #0]
 8001146:	4b6f      	ldr	r3, [pc, #444]	@ (8001304 <HAL_RCC_OscConfig+0x26c>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a6e      	ldr	r2, [pc, #440]	@ (8001304 <HAL_RCC_OscConfig+0x26c>)
 800114c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001150:	6013      	str	r3, [r2, #0]
 8001152:	e00b      	b.n	800116c <HAL_RCC_OscConfig+0xd4>
 8001154:	4b6b      	ldr	r3, [pc, #428]	@ (8001304 <HAL_RCC_OscConfig+0x26c>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a6a      	ldr	r2, [pc, #424]	@ (8001304 <HAL_RCC_OscConfig+0x26c>)
 800115a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800115e:	6013      	str	r3, [r2, #0]
 8001160:	4b68      	ldr	r3, [pc, #416]	@ (8001304 <HAL_RCC_OscConfig+0x26c>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a67      	ldr	r2, [pc, #412]	@ (8001304 <HAL_RCC_OscConfig+0x26c>)
 8001166:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800116a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d013      	beq.n	800119c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001174:	f7ff fc12 	bl	800099c <HAL_GetTick>
 8001178:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800117a:	e008      	b.n	800118e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800117c:	f7ff fc0e 	bl	800099c <HAL_GetTick>
 8001180:	4602      	mov	r2, r0
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	2b64      	cmp	r3, #100	@ 0x64
 8001188:	d901      	bls.n	800118e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800118a:	2303      	movs	r3, #3
 800118c:	e200      	b.n	8001590 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800118e:	4b5d      	ldr	r3, [pc, #372]	@ (8001304 <HAL_RCC_OscConfig+0x26c>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001196:	2b00      	cmp	r3, #0
 8001198:	d0f0      	beq.n	800117c <HAL_RCC_OscConfig+0xe4>
 800119a:	e014      	b.n	80011c6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800119c:	f7ff fbfe 	bl	800099c <HAL_GetTick>
 80011a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011a2:	e008      	b.n	80011b6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011a4:	f7ff fbfa 	bl	800099c <HAL_GetTick>
 80011a8:	4602      	mov	r2, r0
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	2b64      	cmp	r3, #100	@ 0x64
 80011b0:	d901      	bls.n	80011b6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80011b2:	2303      	movs	r3, #3
 80011b4:	e1ec      	b.n	8001590 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011b6:	4b53      	ldr	r3, [pc, #332]	@ (8001304 <HAL_RCC_OscConfig+0x26c>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d1f0      	bne.n	80011a4 <HAL_RCC_OscConfig+0x10c>
 80011c2:	e000      	b.n	80011c6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f003 0302 	and.w	r3, r3, #2
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d063      	beq.n	800129a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80011d2:	4b4c      	ldr	r3, [pc, #304]	@ (8001304 <HAL_RCC_OscConfig+0x26c>)
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f003 030c 	and.w	r3, r3, #12
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d00b      	beq.n	80011f6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80011de:	4b49      	ldr	r3, [pc, #292]	@ (8001304 <HAL_RCC_OscConfig+0x26c>)
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	f003 030c 	and.w	r3, r3, #12
 80011e6:	2b08      	cmp	r3, #8
 80011e8:	d11c      	bne.n	8001224 <HAL_RCC_OscConfig+0x18c>
 80011ea:	4b46      	ldr	r3, [pc, #280]	@ (8001304 <HAL_RCC_OscConfig+0x26c>)
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d116      	bne.n	8001224 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011f6:	4b43      	ldr	r3, [pc, #268]	@ (8001304 <HAL_RCC_OscConfig+0x26c>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f003 0302 	and.w	r3, r3, #2
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d005      	beq.n	800120e <HAL_RCC_OscConfig+0x176>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	691b      	ldr	r3, [r3, #16]
 8001206:	2b01      	cmp	r3, #1
 8001208:	d001      	beq.n	800120e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	e1c0      	b.n	8001590 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800120e:	4b3d      	ldr	r3, [pc, #244]	@ (8001304 <HAL_RCC_OscConfig+0x26c>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	695b      	ldr	r3, [r3, #20]
 800121a:	00db      	lsls	r3, r3, #3
 800121c:	4939      	ldr	r1, [pc, #228]	@ (8001304 <HAL_RCC_OscConfig+0x26c>)
 800121e:	4313      	orrs	r3, r2
 8001220:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001222:	e03a      	b.n	800129a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	691b      	ldr	r3, [r3, #16]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d020      	beq.n	800126e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800122c:	4b36      	ldr	r3, [pc, #216]	@ (8001308 <HAL_RCC_OscConfig+0x270>)
 800122e:	2201      	movs	r2, #1
 8001230:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001232:	f7ff fbb3 	bl	800099c <HAL_GetTick>
 8001236:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001238:	e008      	b.n	800124c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800123a:	f7ff fbaf 	bl	800099c <HAL_GetTick>
 800123e:	4602      	mov	r2, r0
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	1ad3      	subs	r3, r2, r3
 8001244:	2b02      	cmp	r3, #2
 8001246:	d901      	bls.n	800124c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001248:	2303      	movs	r3, #3
 800124a:	e1a1      	b.n	8001590 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800124c:	4b2d      	ldr	r3, [pc, #180]	@ (8001304 <HAL_RCC_OscConfig+0x26c>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f003 0302 	and.w	r3, r3, #2
 8001254:	2b00      	cmp	r3, #0
 8001256:	d0f0      	beq.n	800123a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001258:	4b2a      	ldr	r3, [pc, #168]	@ (8001304 <HAL_RCC_OscConfig+0x26c>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	695b      	ldr	r3, [r3, #20]
 8001264:	00db      	lsls	r3, r3, #3
 8001266:	4927      	ldr	r1, [pc, #156]	@ (8001304 <HAL_RCC_OscConfig+0x26c>)
 8001268:	4313      	orrs	r3, r2
 800126a:	600b      	str	r3, [r1, #0]
 800126c:	e015      	b.n	800129a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800126e:	4b26      	ldr	r3, [pc, #152]	@ (8001308 <HAL_RCC_OscConfig+0x270>)
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001274:	f7ff fb92 	bl	800099c <HAL_GetTick>
 8001278:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800127a:	e008      	b.n	800128e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800127c:	f7ff fb8e 	bl	800099c <HAL_GetTick>
 8001280:	4602      	mov	r2, r0
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	2b02      	cmp	r3, #2
 8001288:	d901      	bls.n	800128e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800128a:	2303      	movs	r3, #3
 800128c:	e180      	b.n	8001590 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800128e:	4b1d      	ldr	r3, [pc, #116]	@ (8001304 <HAL_RCC_OscConfig+0x26c>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f003 0302 	and.w	r3, r3, #2
 8001296:	2b00      	cmp	r3, #0
 8001298:	d1f0      	bne.n	800127c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f003 0308 	and.w	r3, r3, #8
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d03a      	beq.n	800131c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	699b      	ldr	r3, [r3, #24]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d019      	beq.n	80012e2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012ae:	4b17      	ldr	r3, [pc, #92]	@ (800130c <HAL_RCC_OscConfig+0x274>)
 80012b0:	2201      	movs	r2, #1
 80012b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012b4:	f7ff fb72 	bl	800099c <HAL_GetTick>
 80012b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012ba:	e008      	b.n	80012ce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012bc:	f7ff fb6e 	bl	800099c <HAL_GetTick>
 80012c0:	4602      	mov	r2, r0
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d901      	bls.n	80012ce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80012ca:	2303      	movs	r3, #3
 80012cc:	e160      	b.n	8001590 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001304 <HAL_RCC_OscConfig+0x26c>)
 80012d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012d2:	f003 0302 	and.w	r3, r3, #2
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d0f0      	beq.n	80012bc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80012da:	2001      	movs	r0, #1
 80012dc:	f000 face 	bl	800187c <RCC_Delay>
 80012e0:	e01c      	b.n	800131c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012e2:	4b0a      	ldr	r3, [pc, #40]	@ (800130c <HAL_RCC_OscConfig+0x274>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012e8:	f7ff fb58 	bl	800099c <HAL_GetTick>
 80012ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012ee:	e00f      	b.n	8001310 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012f0:	f7ff fb54 	bl	800099c <HAL_GetTick>
 80012f4:	4602      	mov	r2, r0
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	d908      	bls.n	8001310 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80012fe:	2303      	movs	r3, #3
 8001300:	e146      	b.n	8001590 <HAL_RCC_OscConfig+0x4f8>
 8001302:	bf00      	nop
 8001304:	40021000 	.word	0x40021000
 8001308:	42420000 	.word	0x42420000
 800130c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001310:	4b92      	ldr	r3, [pc, #584]	@ (800155c <HAL_RCC_OscConfig+0x4c4>)
 8001312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001314:	f003 0302 	and.w	r3, r3, #2
 8001318:	2b00      	cmp	r3, #0
 800131a:	d1e9      	bne.n	80012f0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f003 0304 	and.w	r3, r3, #4
 8001324:	2b00      	cmp	r3, #0
 8001326:	f000 80a6 	beq.w	8001476 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800132a:	2300      	movs	r3, #0
 800132c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800132e:	4b8b      	ldr	r3, [pc, #556]	@ (800155c <HAL_RCC_OscConfig+0x4c4>)
 8001330:	69db      	ldr	r3, [r3, #28]
 8001332:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d10d      	bne.n	8001356 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800133a:	4b88      	ldr	r3, [pc, #544]	@ (800155c <HAL_RCC_OscConfig+0x4c4>)
 800133c:	69db      	ldr	r3, [r3, #28]
 800133e:	4a87      	ldr	r2, [pc, #540]	@ (800155c <HAL_RCC_OscConfig+0x4c4>)
 8001340:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001344:	61d3      	str	r3, [r2, #28]
 8001346:	4b85      	ldr	r3, [pc, #532]	@ (800155c <HAL_RCC_OscConfig+0x4c4>)
 8001348:	69db      	ldr	r3, [r3, #28]
 800134a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800134e:	60bb      	str	r3, [r7, #8]
 8001350:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001352:	2301      	movs	r3, #1
 8001354:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001356:	4b82      	ldr	r3, [pc, #520]	@ (8001560 <HAL_RCC_OscConfig+0x4c8>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800135e:	2b00      	cmp	r3, #0
 8001360:	d118      	bne.n	8001394 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001362:	4b7f      	ldr	r3, [pc, #508]	@ (8001560 <HAL_RCC_OscConfig+0x4c8>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a7e      	ldr	r2, [pc, #504]	@ (8001560 <HAL_RCC_OscConfig+0x4c8>)
 8001368:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800136c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800136e:	f7ff fb15 	bl	800099c <HAL_GetTick>
 8001372:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001374:	e008      	b.n	8001388 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001376:	f7ff fb11 	bl	800099c <HAL_GetTick>
 800137a:	4602      	mov	r2, r0
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	2b64      	cmp	r3, #100	@ 0x64
 8001382:	d901      	bls.n	8001388 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001384:	2303      	movs	r3, #3
 8001386:	e103      	b.n	8001590 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001388:	4b75      	ldr	r3, [pc, #468]	@ (8001560 <HAL_RCC_OscConfig+0x4c8>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001390:	2b00      	cmp	r3, #0
 8001392:	d0f0      	beq.n	8001376 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	2b01      	cmp	r3, #1
 800139a:	d106      	bne.n	80013aa <HAL_RCC_OscConfig+0x312>
 800139c:	4b6f      	ldr	r3, [pc, #444]	@ (800155c <HAL_RCC_OscConfig+0x4c4>)
 800139e:	6a1b      	ldr	r3, [r3, #32]
 80013a0:	4a6e      	ldr	r2, [pc, #440]	@ (800155c <HAL_RCC_OscConfig+0x4c4>)
 80013a2:	f043 0301 	orr.w	r3, r3, #1
 80013a6:	6213      	str	r3, [r2, #32]
 80013a8:	e02d      	b.n	8001406 <HAL_RCC_OscConfig+0x36e>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	68db      	ldr	r3, [r3, #12]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d10c      	bne.n	80013cc <HAL_RCC_OscConfig+0x334>
 80013b2:	4b6a      	ldr	r3, [pc, #424]	@ (800155c <HAL_RCC_OscConfig+0x4c4>)
 80013b4:	6a1b      	ldr	r3, [r3, #32]
 80013b6:	4a69      	ldr	r2, [pc, #420]	@ (800155c <HAL_RCC_OscConfig+0x4c4>)
 80013b8:	f023 0301 	bic.w	r3, r3, #1
 80013bc:	6213      	str	r3, [r2, #32]
 80013be:	4b67      	ldr	r3, [pc, #412]	@ (800155c <HAL_RCC_OscConfig+0x4c4>)
 80013c0:	6a1b      	ldr	r3, [r3, #32]
 80013c2:	4a66      	ldr	r2, [pc, #408]	@ (800155c <HAL_RCC_OscConfig+0x4c4>)
 80013c4:	f023 0304 	bic.w	r3, r3, #4
 80013c8:	6213      	str	r3, [r2, #32]
 80013ca:	e01c      	b.n	8001406 <HAL_RCC_OscConfig+0x36e>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	2b05      	cmp	r3, #5
 80013d2:	d10c      	bne.n	80013ee <HAL_RCC_OscConfig+0x356>
 80013d4:	4b61      	ldr	r3, [pc, #388]	@ (800155c <HAL_RCC_OscConfig+0x4c4>)
 80013d6:	6a1b      	ldr	r3, [r3, #32]
 80013d8:	4a60      	ldr	r2, [pc, #384]	@ (800155c <HAL_RCC_OscConfig+0x4c4>)
 80013da:	f043 0304 	orr.w	r3, r3, #4
 80013de:	6213      	str	r3, [r2, #32]
 80013e0:	4b5e      	ldr	r3, [pc, #376]	@ (800155c <HAL_RCC_OscConfig+0x4c4>)
 80013e2:	6a1b      	ldr	r3, [r3, #32]
 80013e4:	4a5d      	ldr	r2, [pc, #372]	@ (800155c <HAL_RCC_OscConfig+0x4c4>)
 80013e6:	f043 0301 	orr.w	r3, r3, #1
 80013ea:	6213      	str	r3, [r2, #32]
 80013ec:	e00b      	b.n	8001406 <HAL_RCC_OscConfig+0x36e>
 80013ee:	4b5b      	ldr	r3, [pc, #364]	@ (800155c <HAL_RCC_OscConfig+0x4c4>)
 80013f0:	6a1b      	ldr	r3, [r3, #32]
 80013f2:	4a5a      	ldr	r2, [pc, #360]	@ (800155c <HAL_RCC_OscConfig+0x4c4>)
 80013f4:	f023 0301 	bic.w	r3, r3, #1
 80013f8:	6213      	str	r3, [r2, #32]
 80013fa:	4b58      	ldr	r3, [pc, #352]	@ (800155c <HAL_RCC_OscConfig+0x4c4>)
 80013fc:	6a1b      	ldr	r3, [r3, #32]
 80013fe:	4a57      	ldr	r2, [pc, #348]	@ (800155c <HAL_RCC_OscConfig+0x4c4>)
 8001400:	f023 0304 	bic.w	r3, r3, #4
 8001404:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	68db      	ldr	r3, [r3, #12]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d015      	beq.n	800143a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800140e:	f7ff fac5 	bl	800099c <HAL_GetTick>
 8001412:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001414:	e00a      	b.n	800142c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001416:	f7ff fac1 	bl	800099c <HAL_GetTick>
 800141a:	4602      	mov	r2, r0
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001424:	4293      	cmp	r3, r2
 8001426:	d901      	bls.n	800142c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001428:	2303      	movs	r3, #3
 800142a:	e0b1      	b.n	8001590 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800142c:	4b4b      	ldr	r3, [pc, #300]	@ (800155c <HAL_RCC_OscConfig+0x4c4>)
 800142e:	6a1b      	ldr	r3, [r3, #32]
 8001430:	f003 0302 	and.w	r3, r3, #2
 8001434:	2b00      	cmp	r3, #0
 8001436:	d0ee      	beq.n	8001416 <HAL_RCC_OscConfig+0x37e>
 8001438:	e014      	b.n	8001464 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800143a:	f7ff faaf 	bl	800099c <HAL_GetTick>
 800143e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001440:	e00a      	b.n	8001458 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001442:	f7ff faab 	bl	800099c <HAL_GetTick>
 8001446:	4602      	mov	r2, r0
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	1ad3      	subs	r3, r2, r3
 800144c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001450:	4293      	cmp	r3, r2
 8001452:	d901      	bls.n	8001458 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001454:	2303      	movs	r3, #3
 8001456:	e09b      	b.n	8001590 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001458:	4b40      	ldr	r3, [pc, #256]	@ (800155c <HAL_RCC_OscConfig+0x4c4>)
 800145a:	6a1b      	ldr	r3, [r3, #32]
 800145c:	f003 0302 	and.w	r3, r3, #2
 8001460:	2b00      	cmp	r3, #0
 8001462:	d1ee      	bne.n	8001442 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001464:	7dfb      	ldrb	r3, [r7, #23]
 8001466:	2b01      	cmp	r3, #1
 8001468:	d105      	bne.n	8001476 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800146a:	4b3c      	ldr	r3, [pc, #240]	@ (800155c <HAL_RCC_OscConfig+0x4c4>)
 800146c:	69db      	ldr	r3, [r3, #28]
 800146e:	4a3b      	ldr	r2, [pc, #236]	@ (800155c <HAL_RCC_OscConfig+0x4c4>)
 8001470:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001474:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	69db      	ldr	r3, [r3, #28]
 800147a:	2b00      	cmp	r3, #0
 800147c:	f000 8087 	beq.w	800158e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001480:	4b36      	ldr	r3, [pc, #216]	@ (800155c <HAL_RCC_OscConfig+0x4c4>)
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f003 030c 	and.w	r3, r3, #12
 8001488:	2b08      	cmp	r3, #8
 800148a:	d061      	beq.n	8001550 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	69db      	ldr	r3, [r3, #28]
 8001490:	2b02      	cmp	r3, #2
 8001492:	d146      	bne.n	8001522 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001494:	4b33      	ldr	r3, [pc, #204]	@ (8001564 <HAL_RCC_OscConfig+0x4cc>)
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800149a:	f7ff fa7f 	bl	800099c <HAL_GetTick>
 800149e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014a0:	e008      	b.n	80014b4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014a2:	f7ff fa7b 	bl	800099c <HAL_GetTick>
 80014a6:	4602      	mov	r2, r0
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	d901      	bls.n	80014b4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80014b0:	2303      	movs	r3, #3
 80014b2:	e06d      	b.n	8001590 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014b4:	4b29      	ldr	r3, [pc, #164]	@ (800155c <HAL_RCC_OscConfig+0x4c4>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d1f0      	bne.n	80014a2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6a1b      	ldr	r3, [r3, #32]
 80014c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014c8:	d108      	bne.n	80014dc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80014ca:	4b24      	ldr	r3, [pc, #144]	@ (800155c <HAL_RCC_OscConfig+0x4c4>)
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	4921      	ldr	r1, [pc, #132]	@ (800155c <HAL_RCC_OscConfig+0x4c4>)
 80014d8:	4313      	orrs	r3, r2
 80014da:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014dc:	4b1f      	ldr	r3, [pc, #124]	@ (800155c <HAL_RCC_OscConfig+0x4c4>)
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6a19      	ldr	r1, [r3, #32]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014ec:	430b      	orrs	r3, r1
 80014ee:	491b      	ldr	r1, [pc, #108]	@ (800155c <HAL_RCC_OscConfig+0x4c4>)
 80014f0:	4313      	orrs	r3, r2
 80014f2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001564 <HAL_RCC_OscConfig+0x4cc>)
 80014f6:	2201      	movs	r2, #1
 80014f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014fa:	f7ff fa4f 	bl	800099c <HAL_GetTick>
 80014fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001500:	e008      	b.n	8001514 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001502:	f7ff fa4b 	bl	800099c <HAL_GetTick>
 8001506:	4602      	mov	r2, r0
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	2b02      	cmp	r3, #2
 800150e:	d901      	bls.n	8001514 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001510:	2303      	movs	r3, #3
 8001512:	e03d      	b.n	8001590 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001514:	4b11      	ldr	r3, [pc, #68]	@ (800155c <HAL_RCC_OscConfig+0x4c4>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800151c:	2b00      	cmp	r3, #0
 800151e:	d0f0      	beq.n	8001502 <HAL_RCC_OscConfig+0x46a>
 8001520:	e035      	b.n	800158e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001522:	4b10      	ldr	r3, [pc, #64]	@ (8001564 <HAL_RCC_OscConfig+0x4cc>)
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001528:	f7ff fa38 	bl	800099c <HAL_GetTick>
 800152c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800152e:	e008      	b.n	8001542 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001530:	f7ff fa34 	bl	800099c <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	2b02      	cmp	r3, #2
 800153c:	d901      	bls.n	8001542 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800153e:	2303      	movs	r3, #3
 8001540:	e026      	b.n	8001590 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001542:	4b06      	ldr	r3, [pc, #24]	@ (800155c <HAL_RCC_OscConfig+0x4c4>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d1f0      	bne.n	8001530 <HAL_RCC_OscConfig+0x498>
 800154e:	e01e      	b.n	800158e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	69db      	ldr	r3, [r3, #28]
 8001554:	2b01      	cmp	r3, #1
 8001556:	d107      	bne.n	8001568 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	e019      	b.n	8001590 <HAL_RCC_OscConfig+0x4f8>
 800155c:	40021000 	.word	0x40021000
 8001560:	40007000 	.word	0x40007000
 8001564:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001568:	4b0b      	ldr	r3, [pc, #44]	@ (8001598 <HAL_RCC_OscConfig+0x500>)
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6a1b      	ldr	r3, [r3, #32]
 8001578:	429a      	cmp	r2, r3
 800157a:	d106      	bne.n	800158a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001586:	429a      	cmp	r2, r3
 8001588:	d001      	beq.n	800158e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e000      	b.n	8001590 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800158e:	2300      	movs	r3, #0
}
 8001590:	4618      	mov	r0, r3
 8001592:	3718      	adds	r7, #24
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	40021000 	.word	0x40021000

0800159c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d101      	bne.n	80015b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	e0d0      	b.n	8001752 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015b0:	4b6a      	ldr	r3, [pc, #424]	@ (800175c <HAL_RCC_ClockConfig+0x1c0>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 0307 	and.w	r3, r3, #7
 80015b8:	683a      	ldr	r2, [r7, #0]
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d910      	bls.n	80015e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015be:	4b67      	ldr	r3, [pc, #412]	@ (800175c <HAL_RCC_ClockConfig+0x1c0>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f023 0207 	bic.w	r2, r3, #7
 80015c6:	4965      	ldr	r1, [pc, #404]	@ (800175c <HAL_RCC_ClockConfig+0x1c0>)
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015ce:	4b63      	ldr	r3, [pc, #396]	@ (800175c <HAL_RCC_ClockConfig+0x1c0>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 0307 	and.w	r3, r3, #7
 80015d6:	683a      	ldr	r2, [r7, #0]
 80015d8:	429a      	cmp	r2, r3
 80015da:	d001      	beq.n	80015e0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e0b8      	b.n	8001752 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 0302 	and.w	r3, r3, #2
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d020      	beq.n	800162e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 0304 	and.w	r3, r3, #4
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d005      	beq.n	8001604 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015f8:	4b59      	ldr	r3, [pc, #356]	@ (8001760 <HAL_RCC_ClockConfig+0x1c4>)
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	4a58      	ldr	r2, [pc, #352]	@ (8001760 <HAL_RCC_ClockConfig+0x1c4>)
 80015fe:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001602:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 0308 	and.w	r3, r3, #8
 800160c:	2b00      	cmp	r3, #0
 800160e:	d005      	beq.n	800161c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001610:	4b53      	ldr	r3, [pc, #332]	@ (8001760 <HAL_RCC_ClockConfig+0x1c4>)
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	4a52      	ldr	r2, [pc, #328]	@ (8001760 <HAL_RCC_ClockConfig+0x1c4>)
 8001616:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800161a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800161c:	4b50      	ldr	r3, [pc, #320]	@ (8001760 <HAL_RCC_ClockConfig+0x1c4>)
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	494d      	ldr	r1, [pc, #308]	@ (8001760 <HAL_RCC_ClockConfig+0x1c4>)
 800162a:	4313      	orrs	r3, r2
 800162c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 0301 	and.w	r3, r3, #1
 8001636:	2b00      	cmp	r3, #0
 8001638:	d040      	beq.n	80016bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	2b01      	cmp	r3, #1
 8001640:	d107      	bne.n	8001652 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001642:	4b47      	ldr	r3, [pc, #284]	@ (8001760 <HAL_RCC_ClockConfig+0x1c4>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d115      	bne.n	800167a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e07f      	b.n	8001752 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	2b02      	cmp	r3, #2
 8001658:	d107      	bne.n	800166a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800165a:	4b41      	ldr	r3, [pc, #260]	@ (8001760 <HAL_RCC_ClockConfig+0x1c4>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d109      	bne.n	800167a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e073      	b.n	8001752 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800166a:	4b3d      	ldr	r3, [pc, #244]	@ (8001760 <HAL_RCC_ClockConfig+0x1c4>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 0302 	and.w	r3, r3, #2
 8001672:	2b00      	cmp	r3, #0
 8001674:	d101      	bne.n	800167a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e06b      	b.n	8001752 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800167a:	4b39      	ldr	r3, [pc, #228]	@ (8001760 <HAL_RCC_ClockConfig+0x1c4>)
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f023 0203 	bic.w	r2, r3, #3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	4936      	ldr	r1, [pc, #216]	@ (8001760 <HAL_RCC_ClockConfig+0x1c4>)
 8001688:	4313      	orrs	r3, r2
 800168a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800168c:	f7ff f986 	bl	800099c <HAL_GetTick>
 8001690:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001692:	e00a      	b.n	80016aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001694:	f7ff f982 	bl	800099c <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d901      	bls.n	80016aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e053      	b.n	8001752 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016aa:	4b2d      	ldr	r3, [pc, #180]	@ (8001760 <HAL_RCC_ClockConfig+0x1c4>)
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f003 020c 	and.w	r2, r3, #12
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d1eb      	bne.n	8001694 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016bc:	4b27      	ldr	r3, [pc, #156]	@ (800175c <HAL_RCC_ClockConfig+0x1c0>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 0307 	and.w	r3, r3, #7
 80016c4:	683a      	ldr	r2, [r7, #0]
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d210      	bcs.n	80016ec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ca:	4b24      	ldr	r3, [pc, #144]	@ (800175c <HAL_RCC_ClockConfig+0x1c0>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f023 0207 	bic.w	r2, r3, #7
 80016d2:	4922      	ldr	r1, [pc, #136]	@ (800175c <HAL_RCC_ClockConfig+0x1c0>)
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	4313      	orrs	r3, r2
 80016d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016da:	4b20      	ldr	r3, [pc, #128]	@ (800175c <HAL_RCC_ClockConfig+0x1c0>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 0307 	and.w	r3, r3, #7
 80016e2:	683a      	ldr	r2, [r7, #0]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d001      	beq.n	80016ec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e032      	b.n	8001752 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 0304 	and.w	r3, r3, #4
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d008      	beq.n	800170a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016f8:	4b19      	ldr	r3, [pc, #100]	@ (8001760 <HAL_RCC_ClockConfig+0x1c4>)
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	4916      	ldr	r1, [pc, #88]	@ (8001760 <HAL_RCC_ClockConfig+0x1c4>)
 8001706:	4313      	orrs	r3, r2
 8001708:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 0308 	and.w	r3, r3, #8
 8001712:	2b00      	cmp	r3, #0
 8001714:	d009      	beq.n	800172a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001716:	4b12      	ldr	r3, [pc, #72]	@ (8001760 <HAL_RCC_ClockConfig+0x1c4>)
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	691b      	ldr	r3, [r3, #16]
 8001722:	00db      	lsls	r3, r3, #3
 8001724:	490e      	ldr	r1, [pc, #56]	@ (8001760 <HAL_RCC_ClockConfig+0x1c4>)
 8001726:	4313      	orrs	r3, r2
 8001728:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800172a:	f000 f821 	bl	8001770 <HAL_RCC_GetSysClockFreq>
 800172e:	4602      	mov	r2, r0
 8001730:	4b0b      	ldr	r3, [pc, #44]	@ (8001760 <HAL_RCC_ClockConfig+0x1c4>)
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	091b      	lsrs	r3, r3, #4
 8001736:	f003 030f 	and.w	r3, r3, #15
 800173a:	490a      	ldr	r1, [pc, #40]	@ (8001764 <HAL_RCC_ClockConfig+0x1c8>)
 800173c:	5ccb      	ldrb	r3, [r1, r3]
 800173e:	fa22 f303 	lsr.w	r3, r2, r3
 8001742:	4a09      	ldr	r2, [pc, #36]	@ (8001768 <HAL_RCC_ClockConfig+0x1cc>)
 8001744:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001746:	4b09      	ldr	r3, [pc, #36]	@ (800176c <HAL_RCC_ClockConfig+0x1d0>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4618      	mov	r0, r3
 800174c:	f7ff f8e4 	bl	8000918 <HAL_InitTick>

  return HAL_OK;
 8001750:	2300      	movs	r3, #0
}
 8001752:	4618      	mov	r0, r3
 8001754:	3710      	adds	r7, #16
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	40022000 	.word	0x40022000
 8001760:	40021000 	.word	0x40021000
 8001764:	08003bb8 	.word	0x08003bb8
 8001768:	20000004 	.word	0x20000004
 800176c:	20000008 	.word	0x20000008

08001770 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001770:	b480      	push	{r7}
 8001772:	b087      	sub	sp, #28
 8001774:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001776:	2300      	movs	r3, #0
 8001778:	60fb      	str	r3, [r7, #12]
 800177a:	2300      	movs	r3, #0
 800177c:	60bb      	str	r3, [r7, #8]
 800177e:	2300      	movs	r3, #0
 8001780:	617b      	str	r3, [r7, #20]
 8001782:	2300      	movs	r3, #0
 8001784:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001786:	2300      	movs	r3, #0
 8001788:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800178a:	4b1e      	ldr	r3, [pc, #120]	@ (8001804 <HAL_RCC_GetSysClockFreq+0x94>)
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	f003 030c 	and.w	r3, r3, #12
 8001796:	2b04      	cmp	r3, #4
 8001798:	d002      	beq.n	80017a0 <HAL_RCC_GetSysClockFreq+0x30>
 800179a:	2b08      	cmp	r3, #8
 800179c:	d003      	beq.n	80017a6 <HAL_RCC_GetSysClockFreq+0x36>
 800179e:	e027      	b.n	80017f0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80017a0:	4b19      	ldr	r3, [pc, #100]	@ (8001808 <HAL_RCC_GetSysClockFreq+0x98>)
 80017a2:	613b      	str	r3, [r7, #16]
      break;
 80017a4:	e027      	b.n	80017f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	0c9b      	lsrs	r3, r3, #18
 80017aa:	f003 030f 	and.w	r3, r3, #15
 80017ae:	4a17      	ldr	r2, [pc, #92]	@ (800180c <HAL_RCC_GetSysClockFreq+0x9c>)
 80017b0:	5cd3      	ldrb	r3, [r2, r3]
 80017b2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d010      	beq.n	80017e0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80017be:	4b11      	ldr	r3, [pc, #68]	@ (8001804 <HAL_RCC_GetSysClockFreq+0x94>)
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	0c5b      	lsrs	r3, r3, #17
 80017c4:	f003 0301 	and.w	r3, r3, #1
 80017c8:	4a11      	ldr	r2, [pc, #68]	@ (8001810 <HAL_RCC_GetSysClockFreq+0xa0>)
 80017ca:	5cd3      	ldrb	r3, [r2, r3]
 80017cc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4a0d      	ldr	r2, [pc, #52]	@ (8001808 <HAL_RCC_GetSysClockFreq+0x98>)
 80017d2:	fb03 f202 	mul.w	r2, r3, r2
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80017dc:	617b      	str	r3, [r7, #20]
 80017de:	e004      	b.n	80017ea <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	4a0c      	ldr	r2, [pc, #48]	@ (8001814 <HAL_RCC_GetSysClockFreq+0xa4>)
 80017e4:	fb02 f303 	mul.w	r3, r2, r3
 80017e8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	613b      	str	r3, [r7, #16]
      break;
 80017ee:	e002      	b.n	80017f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80017f0:	4b05      	ldr	r3, [pc, #20]	@ (8001808 <HAL_RCC_GetSysClockFreq+0x98>)
 80017f2:	613b      	str	r3, [r7, #16]
      break;
 80017f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017f6:	693b      	ldr	r3, [r7, #16]
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	371c      	adds	r7, #28
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bc80      	pop	{r7}
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	40021000 	.word	0x40021000
 8001808:	007a1200 	.word	0x007a1200
 800180c:	08003bd0 	.word	0x08003bd0
 8001810:	08003be0 	.word	0x08003be0
 8001814:	003d0900 	.word	0x003d0900

08001818 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800181c:	4b02      	ldr	r3, [pc, #8]	@ (8001828 <HAL_RCC_GetHCLKFreq+0x10>)
 800181e:	681b      	ldr	r3, [r3, #0]
}
 8001820:	4618      	mov	r0, r3
 8001822:	46bd      	mov	sp, r7
 8001824:	bc80      	pop	{r7}
 8001826:	4770      	bx	lr
 8001828:	20000004 	.word	0x20000004

0800182c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001830:	f7ff fff2 	bl	8001818 <HAL_RCC_GetHCLKFreq>
 8001834:	4602      	mov	r2, r0
 8001836:	4b05      	ldr	r3, [pc, #20]	@ (800184c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	0a1b      	lsrs	r3, r3, #8
 800183c:	f003 0307 	and.w	r3, r3, #7
 8001840:	4903      	ldr	r1, [pc, #12]	@ (8001850 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001842:	5ccb      	ldrb	r3, [r1, r3]
 8001844:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001848:	4618      	mov	r0, r3
 800184a:	bd80      	pop	{r7, pc}
 800184c:	40021000 	.word	0x40021000
 8001850:	08003bc8 	.word	0x08003bc8

08001854 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001858:	f7ff ffde 	bl	8001818 <HAL_RCC_GetHCLKFreq>
 800185c:	4602      	mov	r2, r0
 800185e:	4b05      	ldr	r3, [pc, #20]	@ (8001874 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	0adb      	lsrs	r3, r3, #11
 8001864:	f003 0307 	and.w	r3, r3, #7
 8001868:	4903      	ldr	r1, [pc, #12]	@ (8001878 <HAL_RCC_GetPCLK2Freq+0x24>)
 800186a:	5ccb      	ldrb	r3, [r1, r3]
 800186c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001870:	4618      	mov	r0, r3
 8001872:	bd80      	pop	{r7, pc}
 8001874:	40021000 	.word	0x40021000
 8001878:	08003bc8 	.word	0x08003bc8

0800187c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800187c:	b480      	push	{r7}
 800187e:	b085      	sub	sp, #20
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001884:	4b0a      	ldr	r3, [pc, #40]	@ (80018b0 <RCC_Delay+0x34>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a0a      	ldr	r2, [pc, #40]	@ (80018b4 <RCC_Delay+0x38>)
 800188a:	fba2 2303 	umull	r2, r3, r2, r3
 800188e:	0a5b      	lsrs	r3, r3, #9
 8001890:	687a      	ldr	r2, [r7, #4]
 8001892:	fb02 f303 	mul.w	r3, r2, r3
 8001896:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001898:	bf00      	nop
  }
  while (Delay --);
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	1e5a      	subs	r2, r3, #1
 800189e:	60fa      	str	r2, [r7, #12]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d1f9      	bne.n	8001898 <RCC_Delay+0x1c>
}
 80018a4:	bf00      	nop
 80018a6:	bf00      	nop
 80018a8:	3714      	adds	r7, #20
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bc80      	pop	{r7}
 80018ae:	4770      	bx	lr
 80018b0:	20000004 	.word	0x20000004
 80018b4:	10624dd3 	.word	0x10624dd3

080018b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d101      	bne.n	80018ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e041      	b.n	800194e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d106      	bne.n	80018e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2200      	movs	r2, #0
 80018da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f7fe ff3c 	bl	800075c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2202      	movs	r2, #2
 80018e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	3304      	adds	r3, #4
 80018f4:	4619      	mov	r1, r3
 80018f6:	4610      	mov	r0, r2
 80018f8:	f000 fa74 	bl	8001de4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2201      	movs	r2, #1
 8001900:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2201      	movs	r2, #1
 8001908:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2201      	movs	r2, #1
 8001910:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2201      	movs	r2, #1
 8001918:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2201      	movs	r2, #1
 8001920:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2201      	movs	r2, #1
 8001928:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2201      	movs	r2, #1
 8001930:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2201      	movs	r2, #1
 8001938:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2201      	movs	r2, #1
 8001940:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2201      	movs	r2, #1
 8001948:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800194c:	2300      	movs	r3, #0
}
 800194e:	4618      	mov	r0, r3
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
	...

08001958 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001958:	b480      	push	{r7}
 800195a:	b085      	sub	sp, #20
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001966:	b2db      	uxtb	r3, r3
 8001968:	2b01      	cmp	r3, #1
 800196a:	d001      	beq.n	8001970 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e03a      	b.n	80019e6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2202      	movs	r2, #2
 8001974:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	68da      	ldr	r2, [r3, #12]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f042 0201 	orr.w	r2, r2, #1
 8001986:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a18      	ldr	r2, [pc, #96]	@ (80019f0 <HAL_TIM_Base_Start_IT+0x98>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d00e      	beq.n	80019b0 <HAL_TIM_Base_Start_IT+0x58>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800199a:	d009      	beq.n	80019b0 <HAL_TIM_Base_Start_IT+0x58>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a14      	ldr	r2, [pc, #80]	@ (80019f4 <HAL_TIM_Base_Start_IT+0x9c>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d004      	beq.n	80019b0 <HAL_TIM_Base_Start_IT+0x58>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a13      	ldr	r2, [pc, #76]	@ (80019f8 <HAL_TIM_Base_Start_IT+0xa0>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d111      	bne.n	80019d4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	f003 0307 	and.w	r3, r3, #7
 80019ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	2b06      	cmp	r3, #6
 80019c0:	d010      	beq.n	80019e4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f042 0201 	orr.w	r2, r2, #1
 80019d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019d2:	e007      	b.n	80019e4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f042 0201 	orr.w	r2, r2, #1
 80019e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80019e4:	2300      	movs	r3, #0
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3714      	adds	r7, #20
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bc80      	pop	{r7}
 80019ee:	4770      	bx	lr
 80019f0:	40012c00 	.word	0x40012c00
 80019f4:	40000400 	.word	0x40000400
 80019f8:	40000800 	.word	0x40000800

080019fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	691b      	ldr	r3, [r3, #16]
 8001a0a:	f003 0302 	and.w	r3, r3, #2
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	d122      	bne.n	8001a58 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	f003 0302 	and.w	r3, r3, #2
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d11b      	bne.n	8001a58 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f06f 0202 	mvn.w	r2, #2
 8001a28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	699b      	ldr	r3, [r3, #24]
 8001a36:	f003 0303 	and.w	r3, r3, #3
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d003      	beq.n	8001a46 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f000 f9b4 	bl	8001dac <HAL_TIM_IC_CaptureCallback>
 8001a44:	e005      	b.n	8001a52 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f000 f9a7 	bl	8001d9a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f000 f9b6 	bl	8001dbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2200      	movs	r2, #0
 8001a56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	691b      	ldr	r3, [r3, #16]
 8001a5e:	f003 0304 	and.w	r3, r3, #4
 8001a62:	2b04      	cmp	r3, #4
 8001a64:	d122      	bne.n	8001aac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	f003 0304 	and.w	r3, r3, #4
 8001a70:	2b04      	cmp	r3, #4
 8001a72:	d11b      	bne.n	8001aac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f06f 0204 	mvn.w	r2, #4
 8001a7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2202      	movs	r2, #2
 8001a82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	699b      	ldr	r3, [r3, #24]
 8001a8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d003      	beq.n	8001a9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f000 f98a 	bl	8001dac <HAL_TIM_IC_CaptureCallback>
 8001a98:	e005      	b.n	8001aa6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f000 f97d 	bl	8001d9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f000 f98c 	bl	8001dbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	691b      	ldr	r3, [r3, #16]
 8001ab2:	f003 0308 	and.w	r3, r3, #8
 8001ab6:	2b08      	cmp	r3, #8
 8001ab8:	d122      	bne.n	8001b00 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	f003 0308 	and.w	r3, r3, #8
 8001ac4:	2b08      	cmp	r3, #8
 8001ac6:	d11b      	bne.n	8001b00 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f06f 0208 	mvn.w	r2, #8
 8001ad0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2204      	movs	r2, #4
 8001ad6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	69db      	ldr	r3, [r3, #28]
 8001ade:	f003 0303 	and.w	r3, r3, #3
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d003      	beq.n	8001aee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f000 f960 	bl	8001dac <HAL_TIM_IC_CaptureCallback>
 8001aec:	e005      	b.n	8001afa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f000 f953 	bl	8001d9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f000 f962 	bl	8001dbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2200      	movs	r2, #0
 8001afe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	691b      	ldr	r3, [r3, #16]
 8001b06:	f003 0310 	and.w	r3, r3, #16
 8001b0a:	2b10      	cmp	r3, #16
 8001b0c:	d122      	bne.n	8001b54 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	f003 0310 	and.w	r3, r3, #16
 8001b18:	2b10      	cmp	r3, #16
 8001b1a:	d11b      	bne.n	8001b54 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f06f 0210 	mvn.w	r2, #16
 8001b24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2208      	movs	r2, #8
 8001b2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	69db      	ldr	r3, [r3, #28]
 8001b32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d003      	beq.n	8001b42 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f000 f936 	bl	8001dac <HAL_TIM_IC_CaptureCallback>
 8001b40:	e005      	b.n	8001b4e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f000 f929 	bl	8001d9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f000 f938 	bl	8001dbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2200      	movs	r2, #0
 8001b52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	691b      	ldr	r3, [r3, #16]
 8001b5a:	f003 0301 	and.w	r3, r3, #1
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d10e      	bne.n	8001b80 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	f003 0301 	and.w	r3, r3, #1
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d107      	bne.n	8001b80 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f06f 0201 	mvn.w	r2, #1
 8001b78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f7fe fc6d 	bl	800045a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	691b      	ldr	r3, [r3, #16]
 8001b86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b8a:	2b80      	cmp	r3, #128	@ 0x80
 8001b8c:	d10e      	bne.n	8001bac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b98:	2b80      	cmp	r3, #128	@ 0x80
 8001b9a:	d107      	bne.n	8001bac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001ba4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f000 fa7b 	bl	80020a2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	691b      	ldr	r3, [r3, #16]
 8001bb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bb6:	2b40      	cmp	r3, #64	@ 0x40
 8001bb8:	d10e      	bne.n	8001bd8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bc4:	2b40      	cmp	r3, #64	@ 0x40
 8001bc6:	d107      	bne.n	8001bd8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001bd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f000 f8fc 	bl	8001dd0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	691b      	ldr	r3, [r3, #16]
 8001bde:	f003 0320 	and.w	r3, r3, #32
 8001be2:	2b20      	cmp	r3, #32
 8001be4:	d10e      	bne.n	8001c04 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	f003 0320 	and.w	r3, r3, #32
 8001bf0:	2b20      	cmp	r3, #32
 8001bf2:	d107      	bne.n	8001c04 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f06f 0220 	mvn.w	r2, #32
 8001bfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f000 fa46 	bl	8002090 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001c04:	bf00      	nop
 8001c06:	3708      	adds	r7, #8
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}

08001c0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c16:	2300      	movs	r3, #0
 8001c18:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d101      	bne.n	8001c28 <HAL_TIM_ConfigClockSource+0x1c>
 8001c24:	2302      	movs	r3, #2
 8001c26:	e0b4      	b.n	8001d92 <HAL_TIM_ConfigClockSource+0x186>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2202      	movs	r2, #2
 8001c34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8001c46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001c4e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	68ba      	ldr	r2, [r7, #8]
 8001c56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001c60:	d03e      	beq.n	8001ce0 <HAL_TIM_ConfigClockSource+0xd4>
 8001c62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001c66:	f200 8087 	bhi.w	8001d78 <HAL_TIM_ConfigClockSource+0x16c>
 8001c6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001c6e:	f000 8086 	beq.w	8001d7e <HAL_TIM_ConfigClockSource+0x172>
 8001c72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001c76:	d87f      	bhi.n	8001d78 <HAL_TIM_ConfigClockSource+0x16c>
 8001c78:	2b70      	cmp	r3, #112	@ 0x70
 8001c7a:	d01a      	beq.n	8001cb2 <HAL_TIM_ConfigClockSource+0xa6>
 8001c7c:	2b70      	cmp	r3, #112	@ 0x70
 8001c7e:	d87b      	bhi.n	8001d78 <HAL_TIM_ConfigClockSource+0x16c>
 8001c80:	2b60      	cmp	r3, #96	@ 0x60
 8001c82:	d050      	beq.n	8001d26 <HAL_TIM_ConfigClockSource+0x11a>
 8001c84:	2b60      	cmp	r3, #96	@ 0x60
 8001c86:	d877      	bhi.n	8001d78 <HAL_TIM_ConfigClockSource+0x16c>
 8001c88:	2b50      	cmp	r3, #80	@ 0x50
 8001c8a:	d03c      	beq.n	8001d06 <HAL_TIM_ConfigClockSource+0xfa>
 8001c8c:	2b50      	cmp	r3, #80	@ 0x50
 8001c8e:	d873      	bhi.n	8001d78 <HAL_TIM_ConfigClockSource+0x16c>
 8001c90:	2b40      	cmp	r3, #64	@ 0x40
 8001c92:	d058      	beq.n	8001d46 <HAL_TIM_ConfigClockSource+0x13a>
 8001c94:	2b40      	cmp	r3, #64	@ 0x40
 8001c96:	d86f      	bhi.n	8001d78 <HAL_TIM_ConfigClockSource+0x16c>
 8001c98:	2b30      	cmp	r3, #48	@ 0x30
 8001c9a:	d064      	beq.n	8001d66 <HAL_TIM_ConfigClockSource+0x15a>
 8001c9c:	2b30      	cmp	r3, #48	@ 0x30
 8001c9e:	d86b      	bhi.n	8001d78 <HAL_TIM_ConfigClockSource+0x16c>
 8001ca0:	2b20      	cmp	r3, #32
 8001ca2:	d060      	beq.n	8001d66 <HAL_TIM_ConfigClockSource+0x15a>
 8001ca4:	2b20      	cmp	r3, #32
 8001ca6:	d867      	bhi.n	8001d78 <HAL_TIM_ConfigClockSource+0x16c>
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d05c      	beq.n	8001d66 <HAL_TIM_ConfigClockSource+0x15a>
 8001cac:	2b10      	cmp	r3, #16
 8001cae:	d05a      	beq.n	8001d66 <HAL_TIM_ConfigClockSource+0x15a>
 8001cb0:	e062      	b.n	8001d78 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001cc2:	f000 f968 	bl	8001f96 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8001cd4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	68ba      	ldr	r2, [r7, #8]
 8001cdc:	609a      	str	r2, [r3, #8]
      break;
 8001cde:	e04f      	b.n	8001d80 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001cf0:	f000 f951 	bl	8001f96 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	689a      	ldr	r2, [r3, #8]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001d02:	609a      	str	r2, [r3, #8]
      break;
 8001d04:	e03c      	b.n	8001d80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d12:	461a      	mov	r2, r3
 8001d14:	f000 f8c8 	bl	8001ea8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2150      	movs	r1, #80	@ 0x50
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f000 f91f 	bl	8001f62 <TIM_ITRx_SetConfig>
      break;
 8001d24:	e02c      	b.n	8001d80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001d32:	461a      	mov	r2, r3
 8001d34:	f000 f8e6 	bl	8001f04 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2160      	movs	r1, #96	@ 0x60
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f000 f90f 	bl	8001f62 <TIM_ITRx_SetConfig>
      break;
 8001d44:	e01c      	b.n	8001d80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d52:	461a      	mov	r2, r3
 8001d54:	f000 f8a8 	bl	8001ea8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	2140      	movs	r1, #64	@ 0x40
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f000 f8ff 	bl	8001f62 <TIM_ITRx_SetConfig>
      break;
 8001d64:	e00c      	b.n	8001d80 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4619      	mov	r1, r3
 8001d70:	4610      	mov	r0, r2
 8001d72:	f000 f8f6 	bl	8001f62 <TIM_ITRx_SetConfig>
      break;
 8001d76:	e003      	b.n	8001d80 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	73fb      	strb	r3, [r7, #15]
      break;
 8001d7c:	e000      	b.n	8001d80 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001d7e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2201      	movs	r2, #1
 8001d84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3710      	adds	r7, #16
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	b083      	sub	sp, #12
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001da2:	bf00      	nop
 8001da4:	370c      	adds	r7, #12
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bc80      	pop	{r7}
 8001daa:	4770      	bx	lr

08001dac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001db4:	bf00      	nop
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bc80      	pop	{r7}
 8001dbc:	4770      	bx	lr

08001dbe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	b083      	sub	sp, #12
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001dc6:	bf00      	nop
 8001dc8:	370c      	adds	r7, #12
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bc80      	pop	{r7}
 8001dce:	4770      	bx	lr

08001dd0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001dd8:	bf00      	nop
 8001dda:	370c      	adds	r7, #12
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bc80      	pop	{r7}
 8001de0:	4770      	bx	lr
	...

08001de4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b085      	sub	sp, #20
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	4a29      	ldr	r2, [pc, #164]	@ (8001e9c <TIM_Base_SetConfig+0xb8>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d00b      	beq.n	8001e14 <TIM_Base_SetConfig+0x30>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e02:	d007      	beq.n	8001e14 <TIM_Base_SetConfig+0x30>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	4a26      	ldr	r2, [pc, #152]	@ (8001ea0 <TIM_Base_SetConfig+0xbc>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d003      	beq.n	8001e14 <TIM_Base_SetConfig+0x30>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	4a25      	ldr	r2, [pc, #148]	@ (8001ea4 <TIM_Base_SetConfig+0xc0>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d108      	bne.n	8001e26 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001e1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	68fa      	ldr	r2, [r7, #12]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4a1c      	ldr	r2, [pc, #112]	@ (8001e9c <TIM_Base_SetConfig+0xb8>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d00b      	beq.n	8001e46 <TIM_Base_SetConfig+0x62>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e34:	d007      	beq.n	8001e46 <TIM_Base_SetConfig+0x62>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a19      	ldr	r2, [pc, #100]	@ (8001ea0 <TIM_Base_SetConfig+0xbc>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d003      	beq.n	8001e46 <TIM_Base_SetConfig+0x62>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4a18      	ldr	r2, [pc, #96]	@ (8001ea4 <TIM_Base_SetConfig+0xc0>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d108      	bne.n	8001e58 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	68fa      	ldr	r2, [r7, #12]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	695b      	ldr	r3, [r3, #20]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	68fa      	ldr	r2, [r7, #12]
 8001e6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	689a      	ldr	r2, [r3, #8]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	4a07      	ldr	r2, [pc, #28]	@ (8001e9c <TIM_Base_SetConfig+0xb8>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d103      	bne.n	8001e8c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	691a      	ldr	r2, [r3, #16]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	615a      	str	r2, [r3, #20]
}
 8001e92:	bf00      	nop
 8001e94:	3714      	adds	r7, #20
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bc80      	pop	{r7}
 8001e9a:	4770      	bx	lr
 8001e9c:	40012c00 	.word	0x40012c00
 8001ea0:	40000400 	.word	0x40000400
 8001ea4:	40000800 	.word	0x40000800

08001ea8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b087      	sub	sp, #28
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	60f8      	str	r0, [r7, #12]
 8001eb0:	60b9      	str	r1, [r7, #8]
 8001eb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	6a1b      	ldr	r3, [r3, #32]
 8001eb8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	6a1b      	ldr	r3, [r3, #32]
 8001ebe:	f023 0201 	bic.w	r2, r3, #1
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	699b      	ldr	r3, [r3, #24]
 8001eca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001ed2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	011b      	lsls	r3, r3, #4
 8001ed8:	693a      	ldr	r2, [r7, #16]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	f023 030a 	bic.w	r3, r3, #10
 8001ee4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001ee6:	697a      	ldr	r2, [r7, #20]
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	693a      	ldr	r2, [r7, #16]
 8001ef2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	697a      	ldr	r2, [r7, #20]
 8001ef8:	621a      	str	r2, [r3, #32]
}
 8001efa:	bf00      	nop
 8001efc:	371c      	adds	r7, #28
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bc80      	pop	{r7}
 8001f02:	4770      	bx	lr

08001f04 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b087      	sub	sp, #28
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	60f8      	str	r0, [r7, #12]
 8001f0c:	60b9      	str	r1, [r7, #8]
 8001f0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	6a1b      	ldr	r3, [r3, #32]
 8001f14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	6a1b      	ldr	r3, [r3, #32]
 8001f1a:	f023 0210 	bic.w	r2, r3, #16
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	699b      	ldr	r3, [r3, #24]
 8001f26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8001f2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	031b      	lsls	r3, r3, #12
 8001f34:	693a      	ldr	r2, [r7, #16]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8001f40:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	011b      	lsls	r3, r3, #4
 8001f46:	697a      	ldr	r2, [r7, #20]
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	693a      	ldr	r2, [r7, #16]
 8001f50:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	697a      	ldr	r2, [r7, #20]
 8001f56:	621a      	str	r2, [r3, #32]
}
 8001f58:	bf00      	nop
 8001f5a:	371c      	adds	r7, #28
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bc80      	pop	{r7}
 8001f60:	4770      	bx	lr

08001f62 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001f62:	b480      	push	{r7}
 8001f64:	b085      	sub	sp, #20
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	6078      	str	r0, [r7, #4]
 8001f6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f78:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001f7a:	683a      	ldr	r2, [r7, #0]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	f043 0307 	orr.w	r3, r3, #7
 8001f84:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	68fa      	ldr	r2, [r7, #12]
 8001f8a:	609a      	str	r2, [r3, #8]
}
 8001f8c:	bf00      	nop
 8001f8e:	3714      	adds	r7, #20
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bc80      	pop	{r7}
 8001f94:	4770      	bx	lr

08001f96 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001f96:	b480      	push	{r7}
 8001f98:	b087      	sub	sp, #28
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	60f8      	str	r0, [r7, #12]
 8001f9e:	60b9      	str	r1, [r7, #8]
 8001fa0:	607a      	str	r2, [r7, #4]
 8001fa2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001fb0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	021a      	lsls	r2, r3, #8
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	431a      	orrs	r2, r3
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	697a      	ldr	r2, [r7, #20]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	697a      	ldr	r2, [r7, #20]
 8001fc8:	609a      	str	r2, [r3, #8]
}
 8001fca:	bf00      	nop
 8001fcc:	371c      	adds	r7, #28
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bc80      	pop	{r7}
 8001fd2:	4770      	bx	lr

08001fd4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b085      	sub	sp, #20
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d101      	bne.n	8001fec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001fe8:	2302      	movs	r3, #2
 8001fea:	e046      	b.n	800207a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2202      	movs	r2, #2
 8001ff8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002012:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	68fa      	ldr	r2, [r7, #12]
 800201a:	4313      	orrs	r3, r2
 800201c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	68fa      	ldr	r2, [r7, #12]
 8002024:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a16      	ldr	r2, [pc, #88]	@ (8002084 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d00e      	beq.n	800204e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002038:	d009      	beq.n	800204e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a12      	ldr	r2, [pc, #72]	@ (8002088 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d004      	beq.n	800204e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a10      	ldr	r2, [pc, #64]	@ (800208c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d10c      	bne.n	8002068 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002054:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	68ba      	ldr	r2, [r7, #8]
 800205c:	4313      	orrs	r3, r2
 800205e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	68ba      	ldr	r2, [r7, #8]
 8002066:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2201      	movs	r2, #1
 800206c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2200      	movs	r2, #0
 8002074:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002078:	2300      	movs	r3, #0
}
 800207a:	4618      	mov	r0, r3
 800207c:	3714      	adds	r7, #20
 800207e:	46bd      	mov	sp, r7
 8002080:	bc80      	pop	{r7}
 8002082:	4770      	bx	lr
 8002084:	40012c00 	.word	0x40012c00
 8002088:	40000400 	.word	0x40000400
 800208c:	40000800 	.word	0x40000800

08002090 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002098:	bf00      	nop
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	bc80      	pop	{r7}
 80020a0:	4770      	bx	lr

080020a2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80020a2:	b480      	push	{r7}
 80020a4:	b083      	sub	sp, #12
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80020aa:	bf00      	nop
 80020ac:	370c      	adds	r7, #12
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bc80      	pop	{r7}
 80020b2:	4770      	bx	lr

080020b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d101      	bne.n	80020c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e042      	b.n	800214c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d106      	bne.n	80020e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2200      	movs	r2, #0
 80020d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f7fe fb8c 	bl	80007f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2224      	movs	r2, #36	@ 0x24
 80020e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	68da      	ldr	r2, [r3, #12]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80020f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f000 fd71 	bl	8002be0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	691a      	ldr	r2, [r3, #16]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800210c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	695a      	ldr	r2, [r3, #20]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800211c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	68da      	ldr	r2, [r3, #12]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800212c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2200      	movs	r2, #0
 8002132:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2220      	movs	r2, #32
 8002138:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2220      	movs	r2, #32
 8002140:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800214a:	2300      	movs	r3, #0
}
 800214c:	4618      	mov	r0, r3
 800214e:	3708      	adds	r7, #8
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}

08002154 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b08a      	sub	sp, #40	@ 0x28
 8002158:	af02      	add	r7, sp, #8
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	60b9      	str	r1, [r7, #8]
 800215e:	603b      	str	r3, [r7, #0]
 8002160:	4613      	mov	r3, r2
 8002162:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002164:	2300      	movs	r3, #0
 8002166:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800216e:	b2db      	uxtb	r3, r3
 8002170:	2b20      	cmp	r3, #32
 8002172:	d16d      	bne.n	8002250 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d002      	beq.n	8002180 <HAL_UART_Transmit+0x2c>
 800217a:	88fb      	ldrh	r3, [r7, #6]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d101      	bne.n	8002184 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e066      	b.n	8002252 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2200      	movs	r2, #0
 8002188:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2221      	movs	r2, #33	@ 0x21
 800218e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002192:	f7fe fc03 	bl	800099c <HAL_GetTick>
 8002196:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	88fa      	ldrh	r2, [r7, #6]
 800219c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	88fa      	ldrh	r2, [r7, #6]
 80021a2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80021ac:	d108      	bne.n	80021c0 <HAL_UART_Transmit+0x6c>
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	691b      	ldr	r3, [r3, #16]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d104      	bne.n	80021c0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80021b6:	2300      	movs	r3, #0
 80021b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	61bb      	str	r3, [r7, #24]
 80021be:	e003      	b.n	80021c8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80021c4:	2300      	movs	r3, #0
 80021c6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80021c8:	e02a      	b.n	8002220 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	9300      	str	r3, [sp, #0]
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	2200      	movs	r2, #0
 80021d2:	2180      	movs	r1, #128	@ 0x80
 80021d4:	68f8      	ldr	r0, [r7, #12]
 80021d6:	f000 faf9 	bl	80027cc <UART_WaitOnFlagUntilTimeout>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d001      	beq.n	80021e4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80021e0:	2303      	movs	r3, #3
 80021e2:	e036      	b.n	8002252 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d10b      	bne.n	8002202 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80021ea:	69bb      	ldr	r3, [r7, #24]
 80021ec:	881b      	ldrh	r3, [r3, #0]
 80021ee:	461a      	mov	r2, r3
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80021f8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80021fa:	69bb      	ldr	r3, [r7, #24]
 80021fc:	3302      	adds	r3, #2
 80021fe:	61bb      	str	r3, [r7, #24]
 8002200:	e007      	b.n	8002212 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	781a      	ldrb	r2, [r3, #0]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	3301      	adds	r3, #1
 8002210:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002216:	b29b      	uxth	r3, r3
 8002218:	3b01      	subs	r3, #1
 800221a:	b29a      	uxth	r2, r3
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002224:	b29b      	uxth	r3, r3
 8002226:	2b00      	cmp	r3, #0
 8002228:	d1cf      	bne.n	80021ca <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	9300      	str	r3, [sp, #0]
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	2200      	movs	r2, #0
 8002232:	2140      	movs	r1, #64	@ 0x40
 8002234:	68f8      	ldr	r0, [r7, #12]
 8002236:	f000 fac9 	bl	80027cc <UART_WaitOnFlagUntilTimeout>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d001      	beq.n	8002244 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002240:	2303      	movs	r3, #3
 8002242:	e006      	b.n	8002252 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2220      	movs	r2, #32
 8002248:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800224c:	2300      	movs	r3, #0
 800224e:	e000      	b.n	8002252 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002250:	2302      	movs	r3, #2
  }
}
 8002252:	4618      	mov	r0, r3
 8002254:	3720      	adds	r7, #32
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
	...

0800225c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b0ba      	sub	sp, #232	@ 0xe8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	695b      	ldr	r3, [r3, #20]
 800227e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002282:	2300      	movs	r3, #0
 8002284:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002288:	2300      	movs	r3, #0
 800228a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800228e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002292:	f003 030f 	and.w	r3, r3, #15
 8002296:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800229a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d10f      	bne.n	80022c2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80022a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80022a6:	f003 0320 	and.w	r3, r3, #32
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d009      	beq.n	80022c2 <HAL_UART_IRQHandler+0x66>
 80022ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80022b2:	f003 0320 	and.w	r3, r3, #32
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d003      	beq.n	80022c2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f000 fbd1 	bl	8002a62 <UART_Receive_IT>
      return;
 80022c0:	e25b      	b.n	800277a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80022c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	f000 80de 	beq.w	8002488 <HAL_UART_IRQHandler+0x22c>
 80022cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80022d0:	f003 0301 	and.w	r3, r3, #1
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d106      	bne.n	80022e6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80022d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80022dc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	f000 80d1 	beq.w	8002488 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80022e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80022ea:	f003 0301 	and.w	r3, r3, #1
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d00b      	beq.n	800230a <HAL_UART_IRQHandler+0xae>
 80022f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80022f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d005      	beq.n	800230a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002302:	f043 0201 	orr.w	r2, r3, #1
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800230a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800230e:	f003 0304 	and.w	r3, r3, #4
 8002312:	2b00      	cmp	r3, #0
 8002314:	d00b      	beq.n	800232e <HAL_UART_IRQHandler+0xd2>
 8002316:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800231a:	f003 0301 	and.w	r3, r3, #1
 800231e:	2b00      	cmp	r3, #0
 8002320:	d005      	beq.n	800232e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002326:	f043 0202 	orr.w	r2, r3, #2
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800232e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002332:	f003 0302 	and.w	r3, r3, #2
 8002336:	2b00      	cmp	r3, #0
 8002338:	d00b      	beq.n	8002352 <HAL_UART_IRQHandler+0xf6>
 800233a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	2b00      	cmp	r3, #0
 8002344:	d005      	beq.n	8002352 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800234a:	f043 0204 	orr.w	r2, r3, #4
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002352:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002356:	f003 0308 	and.w	r3, r3, #8
 800235a:	2b00      	cmp	r3, #0
 800235c:	d011      	beq.n	8002382 <HAL_UART_IRQHandler+0x126>
 800235e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002362:	f003 0320 	and.w	r3, r3, #32
 8002366:	2b00      	cmp	r3, #0
 8002368:	d105      	bne.n	8002376 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800236a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800236e:	f003 0301 	and.w	r3, r3, #1
 8002372:	2b00      	cmp	r3, #0
 8002374:	d005      	beq.n	8002382 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800237a:	f043 0208 	orr.w	r2, r3, #8
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002386:	2b00      	cmp	r3, #0
 8002388:	f000 81f2 	beq.w	8002770 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800238c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002390:	f003 0320 	and.w	r3, r3, #32
 8002394:	2b00      	cmp	r3, #0
 8002396:	d008      	beq.n	80023aa <HAL_UART_IRQHandler+0x14e>
 8002398:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800239c:	f003 0320 	and.w	r3, r3, #32
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d002      	beq.n	80023aa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f000 fb5c 	bl	8002a62 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	695b      	ldr	r3, [r3, #20]
 80023b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	bf14      	ite	ne
 80023b8:	2301      	movne	r3, #1
 80023ba:	2300      	moveq	r3, #0
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023c6:	f003 0308 	and.w	r3, r3, #8
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d103      	bne.n	80023d6 <HAL_UART_IRQHandler+0x17a>
 80023ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d04f      	beq.n	8002476 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f000 fa66 	bl	80028a8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	695b      	ldr	r3, [r3, #20]
 80023e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d041      	beq.n	800246e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	3314      	adds	r3, #20
 80023f0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80023f8:	e853 3f00 	ldrex	r3, [r3]
 80023fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002400:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002404:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002408:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	3314      	adds	r3, #20
 8002412:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002416:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800241a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800241e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002422:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002426:	e841 2300 	strex	r3, r2, [r1]
 800242a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800242e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d1d9      	bne.n	80023ea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800243a:	2b00      	cmp	r3, #0
 800243c:	d013      	beq.n	8002466 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002442:	4a7e      	ldr	r2, [pc, #504]	@ (800263c <HAL_UART_IRQHandler+0x3e0>)
 8002444:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800244a:	4618      	mov	r0, r3
 800244c:	f7fe fbf8 	bl	8000c40 <HAL_DMA_Abort_IT>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d016      	beq.n	8002484 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800245a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002460:	4610      	mov	r0, r2
 8002462:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002464:	e00e      	b.n	8002484 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f000 f99c 	bl	80027a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800246c:	e00a      	b.n	8002484 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f000 f998 	bl	80027a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002474:	e006      	b.n	8002484 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f000 f994 	bl	80027a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002482:	e175      	b.n	8002770 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002484:	bf00      	nop
    return;
 8002486:	e173      	b.n	8002770 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800248c:	2b01      	cmp	r3, #1
 800248e:	f040 814f 	bne.w	8002730 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002492:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002496:	f003 0310 	and.w	r3, r3, #16
 800249a:	2b00      	cmp	r3, #0
 800249c:	f000 8148 	beq.w	8002730 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80024a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80024a4:	f003 0310 	and.w	r3, r3, #16
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	f000 8141 	beq.w	8002730 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80024ae:	2300      	movs	r3, #0
 80024b0:	60bb      	str	r3, [r7, #8]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	60bb      	str	r3, [r7, #8]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	60bb      	str	r3, [r7, #8]
 80024c2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	695b      	ldr	r3, [r3, #20]
 80024ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	f000 80b6 	beq.w	8002640 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80024e0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	f000 8145 	beq.w	8002774 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80024ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80024f2:	429a      	cmp	r2, r3
 80024f4:	f080 813e 	bcs.w	8002774 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80024fe:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002504:	699b      	ldr	r3, [r3, #24]
 8002506:	2b20      	cmp	r3, #32
 8002508:	f000 8088 	beq.w	800261c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	330c      	adds	r3, #12
 8002512:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002516:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800251a:	e853 3f00 	ldrex	r3, [r3]
 800251e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002522:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002526:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800252a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	330c      	adds	r3, #12
 8002534:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002538:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800253c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002540:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002544:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002548:	e841 2300 	strex	r3, r2, [r1]
 800254c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002550:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002554:	2b00      	cmp	r3, #0
 8002556:	d1d9      	bne.n	800250c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	3314      	adds	r3, #20
 800255e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002560:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002562:	e853 3f00 	ldrex	r3, [r3]
 8002566:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002568:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800256a:	f023 0301 	bic.w	r3, r3, #1
 800256e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	3314      	adds	r3, #20
 8002578:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800257c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002580:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002582:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002584:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002588:	e841 2300 	strex	r3, r2, [r1]
 800258c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800258e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002590:	2b00      	cmp	r3, #0
 8002592:	d1e1      	bne.n	8002558 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	3314      	adds	r3, #20
 800259a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800259c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800259e:	e853 3f00 	ldrex	r3, [r3]
 80025a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80025a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80025a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80025aa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	3314      	adds	r3, #20
 80025b4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80025b8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80025ba:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025bc:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80025be:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80025c0:	e841 2300 	strex	r3, r2, [r1]
 80025c4:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80025c6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d1e3      	bne.n	8002594 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2220      	movs	r2, #32
 80025d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2200      	movs	r2, #0
 80025d8:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	330c      	adds	r3, #12
 80025e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80025e4:	e853 3f00 	ldrex	r3, [r3]
 80025e8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80025ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80025ec:	f023 0310 	bic.w	r3, r3, #16
 80025f0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	330c      	adds	r3, #12
 80025fa:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80025fe:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002600:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002602:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002604:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002606:	e841 2300 	strex	r3, r2, [r1]
 800260a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800260c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1e3      	bne.n	80025da <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002616:	4618      	mov	r0, r3
 8002618:	f7fe fad7 	bl	8000bca <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2202      	movs	r2, #2
 8002620:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800262a:	b29b      	uxth	r3, r3
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	b29b      	uxth	r3, r3
 8002630:	4619      	mov	r1, r3
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f000 f8bf 	bl	80027b6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002638:	e09c      	b.n	8002774 <HAL_UART_IRQHandler+0x518>
 800263a:	bf00      	nop
 800263c:	0800296d 	.word	0x0800296d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002648:	b29b      	uxth	r3, r3
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002654:	b29b      	uxth	r3, r3
 8002656:	2b00      	cmp	r3, #0
 8002658:	f000 808e 	beq.w	8002778 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800265c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002660:	2b00      	cmp	r3, #0
 8002662:	f000 8089 	beq.w	8002778 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	330c      	adds	r3, #12
 800266c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800266e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002670:	e853 3f00 	ldrex	r3, [r3]
 8002674:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002676:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002678:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800267c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	330c      	adds	r3, #12
 8002686:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800268a:	647a      	str	r2, [r7, #68]	@ 0x44
 800268c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800268e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002690:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002692:	e841 2300 	strex	r3, r2, [r1]
 8002696:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002698:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800269a:	2b00      	cmp	r3, #0
 800269c:	d1e3      	bne.n	8002666 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	3314      	adds	r3, #20
 80026a4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a8:	e853 3f00 	ldrex	r3, [r3]
 80026ac:	623b      	str	r3, [r7, #32]
   return(result);
 80026ae:	6a3b      	ldr	r3, [r7, #32]
 80026b0:	f023 0301 	bic.w	r3, r3, #1
 80026b4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	3314      	adds	r3, #20
 80026be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80026c2:	633a      	str	r2, [r7, #48]	@ 0x30
 80026c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80026c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80026ca:	e841 2300 	strex	r3, r2, [r1]
 80026ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80026d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d1e3      	bne.n	800269e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2220      	movs	r2, #32
 80026da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	330c      	adds	r3, #12
 80026ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	e853 3f00 	ldrex	r3, [r3]
 80026f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f023 0310 	bic.w	r3, r3, #16
 80026fa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	330c      	adds	r3, #12
 8002704:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002708:	61fa      	str	r2, [r7, #28]
 800270a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800270c:	69b9      	ldr	r1, [r7, #24]
 800270e:	69fa      	ldr	r2, [r7, #28]
 8002710:	e841 2300 	strex	r3, r2, [r1]
 8002714:	617b      	str	r3, [r7, #20]
   return(result);
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d1e3      	bne.n	80026e4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2202      	movs	r2, #2
 8002720:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002722:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002726:	4619      	mov	r1, r3
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f000 f844 	bl	80027b6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800272e:	e023      	b.n	8002778 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002730:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002734:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002738:	2b00      	cmp	r3, #0
 800273a:	d009      	beq.n	8002750 <HAL_UART_IRQHandler+0x4f4>
 800273c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002740:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002744:	2b00      	cmp	r3, #0
 8002746:	d003      	beq.n	8002750 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002748:	6878      	ldr	r0, [r7, #4]
 800274a:	f000 f923 	bl	8002994 <UART_Transmit_IT>
    return;
 800274e:	e014      	b.n	800277a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002750:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002754:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002758:	2b00      	cmp	r3, #0
 800275a:	d00e      	beq.n	800277a <HAL_UART_IRQHandler+0x51e>
 800275c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002760:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002764:	2b00      	cmp	r3, #0
 8002766:	d008      	beq.n	800277a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f000 f962 	bl	8002a32 <UART_EndTransmit_IT>
    return;
 800276e:	e004      	b.n	800277a <HAL_UART_IRQHandler+0x51e>
    return;
 8002770:	bf00      	nop
 8002772:	e002      	b.n	800277a <HAL_UART_IRQHandler+0x51e>
      return;
 8002774:	bf00      	nop
 8002776:	e000      	b.n	800277a <HAL_UART_IRQHandler+0x51e>
      return;
 8002778:	bf00      	nop
  }
}
 800277a:	37e8      	adds	r7, #232	@ 0xe8
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}

08002780 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002788:	bf00      	nop
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	bc80      	pop	{r7}
 8002790:	4770      	bx	lr

08002792 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002792:	b480      	push	{r7}
 8002794:	b083      	sub	sp, #12
 8002796:	af00      	add	r7, sp, #0
 8002798:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800279a:	bf00      	nop
 800279c:	370c      	adds	r7, #12
 800279e:	46bd      	mov	sp, r7
 80027a0:	bc80      	pop	{r7}
 80027a2:	4770      	bx	lr

080027a4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80027ac:	bf00      	nop
 80027ae:	370c      	adds	r7, #12
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bc80      	pop	{r7}
 80027b4:	4770      	bx	lr

080027b6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80027b6:	b480      	push	{r7}
 80027b8:	b083      	sub	sp, #12
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
 80027be:	460b      	mov	r3, r1
 80027c0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80027c2:	bf00      	nop
 80027c4:	370c      	adds	r7, #12
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bc80      	pop	{r7}
 80027ca:	4770      	bx	lr

080027cc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b090      	sub	sp, #64	@ 0x40
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	60f8      	str	r0, [r7, #12]
 80027d4:	60b9      	str	r1, [r7, #8]
 80027d6:	603b      	str	r3, [r7, #0]
 80027d8:	4613      	mov	r3, r2
 80027da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027dc:	e050      	b.n	8002880 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80027e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027e4:	d04c      	beq.n	8002880 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80027e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d007      	beq.n	80027fc <UART_WaitOnFlagUntilTimeout+0x30>
 80027ec:	f7fe f8d6 	bl	800099c <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d241      	bcs.n	8002880 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	330c      	adds	r3, #12
 8002802:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002806:	e853 3f00 	ldrex	r3, [r3]
 800280a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800280c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800280e:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8002812:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	330c      	adds	r3, #12
 800281a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800281c:	637a      	str	r2, [r7, #52]	@ 0x34
 800281e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002820:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002822:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002824:	e841 2300 	strex	r3, r2, [r1]
 8002828:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800282a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800282c:	2b00      	cmp	r3, #0
 800282e:	d1e5      	bne.n	80027fc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	3314      	adds	r3, #20
 8002836:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	e853 3f00 	ldrex	r3, [r3]
 800283e:	613b      	str	r3, [r7, #16]
   return(result);
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	f023 0301 	bic.w	r3, r3, #1
 8002846:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	3314      	adds	r3, #20
 800284e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002850:	623a      	str	r2, [r7, #32]
 8002852:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002854:	69f9      	ldr	r1, [r7, #28]
 8002856:	6a3a      	ldr	r2, [r7, #32]
 8002858:	e841 2300 	strex	r3, r2, [r1]
 800285c:	61bb      	str	r3, [r7, #24]
   return(result);
 800285e:	69bb      	ldr	r3, [r7, #24]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d1e5      	bne.n	8002830 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2220      	movs	r2, #32
 8002868:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2220      	movs	r2, #32
 8002870:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2200      	movs	r2, #0
 8002878:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 800287c:	2303      	movs	r3, #3
 800287e:	e00f      	b.n	80028a0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	4013      	ands	r3, r2
 800288a:	68ba      	ldr	r2, [r7, #8]
 800288c:	429a      	cmp	r2, r3
 800288e:	bf0c      	ite	eq
 8002890:	2301      	moveq	r3, #1
 8002892:	2300      	movne	r3, #0
 8002894:	b2db      	uxtb	r3, r3
 8002896:	461a      	mov	r2, r3
 8002898:	79fb      	ldrb	r3, [r7, #7]
 800289a:	429a      	cmp	r2, r3
 800289c:	d09f      	beq.n	80027de <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800289e:	2300      	movs	r3, #0
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3740      	adds	r7, #64	@ 0x40
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b095      	sub	sp, #84	@ 0x54
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	330c      	adds	r3, #12
 80028b6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028ba:	e853 3f00 	ldrex	r3, [r3]
 80028be:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80028c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028c2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80028c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	330c      	adds	r3, #12
 80028ce:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80028d0:	643a      	str	r2, [r7, #64]	@ 0x40
 80028d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028d4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80028d6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80028d8:	e841 2300 	strex	r3, r2, [r1]
 80028dc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80028de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d1e5      	bne.n	80028b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	3314      	adds	r3, #20
 80028ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028ec:	6a3b      	ldr	r3, [r7, #32]
 80028ee:	e853 3f00 	ldrex	r3, [r3]
 80028f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	f023 0301 	bic.w	r3, r3, #1
 80028fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	3314      	adds	r3, #20
 8002902:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002904:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002906:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002908:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800290a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800290c:	e841 2300 	strex	r3, r2, [r1]
 8002910:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002914:	2b00      	cmp	r3, #0
 8002916:	d1e5      	bne.n	80028e4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800291c:	2b01      	cmp	r3, #1
 800291e:	d119      	bne.n	8002954 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	330c      	adds	r3, #12
 8002926:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	e853 3f00 	ldrex	r3, [r3]
 800292e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	f023 0310 	bic.w	r3, r3, #16
 8002936:	647b      	str	r3, [r7, #68]	@ 0x44
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	330c      	adds	r3, #12
 800293e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002940:	61ba      	str	r2, [r7, #24]
 8002942:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002944:	6979      	ldr	r1, [r7, #20]
 8002946:	69ba      	ldr	r2, [r7, #24]
 8002948:	e841 2300 	strex	r3, r2, [r1]
 800294c:	613b      	str	r3, [r7, #16]
   return(result);
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d1e5      	bne.n	8002920 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2220      	movs	r2, #32
 8002958:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2200      	movs	r2, #0
 8002960:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002962:	bf00      	nop
 8002964:	3754      	adds	r7, #84	@ 0x54
 8002966:	46bd      	mov	sp, r7
 8002968:	bc80      	pop	{r7}
 800296a:	4770      	bx	lr

0800296c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002978:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2200      	movs	r2, #0
 800297e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2200      	movs	r2, #0
 8002984:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002986:	68f8      	ldr	r0, [r7, #12]
 8002988:	f7ff ff0c 	bl	80027a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800298c:	bf00      	nop
 800298e:	3710      	adds	r7, #16
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}

08002994 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002994:	b480      	push	{r7}
 8002996:	b085      	sub	sp, #20
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	2b21      	cmp	r3, #33	@ 0x21
 80029a6:	d13e      	bne.n	8002a26 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029b0:	d114      	bne.n	80029dc <UART_Transmit_IT+0x48>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	691b      	ldr	r3, [r3, #16]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d110      	bne.n	80029dc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6a1b      	ldr	r3, [r3, #32]
 80029be:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	881b      	ldrh	r3, [r3, #0]
 80029c4:	461a      	mov	r2, r3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029ce:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6a1b      	ldr	r3, [r3, #32]
 80029d4:	1c9a      	adds	r2, r3, #2
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	621a      	str	r2, [r3, #32]
 80029da:	e008      	b.n	80029ee <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6a1b      	ldr	r3, [r3, #32]
 80029e0:	1c59      	adds	r1, r3, #1
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	6211      	str	r1, [r2, #32]
 80029e6:	781a      	ldrb	r2, [r3, #0]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	3b01      	subs	r3, #1
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	4619      	mov	r1, r3
 80029fc:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d10f      	bne.n	8002a22 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	68da      	ldr	r2, [r3, #12]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002a10:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	68da      	ldr	r2, [r3, #12]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002a20:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002a22:	2300      	movs	r3, #0
 8002a24:	e000      	b.n	8002a28 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002a26:	2302      	movs	r3, #2
  }
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3714      	adds	r7, #20
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bc80      	pop	{r7}
 8002a30:	4770      	bx	lr

08002a32 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002a32:	b580      	push	{r7, lr}
 8002a34:	b082      	sub	sp, #8
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	68da      	ldr	r2, [r3, #12]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002a48:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2220      	movs	r2, #32
 8002a4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f7ff fe94 	bl	8002780 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002a58:	2300      	movs	r3, #0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3708      	adds	r7, #8
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}

08002a62 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002a62:	b580      	push	{r7, lr}
 8002a64:	b08c      	sub	sp, #48	@ 0x30
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	2b22      	cmp	r3, #34	@ 0x22
 8002a74:	f040 80ae 	bne.w	8002bd4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a80:	d117      	bne.n	8002ab2 <UART_Receive_IT+0x50>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	691b      	ldr	r3, [r3, #16]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d113      	bne.n	8002ab2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a92:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002aa0:	b29a      	uxth	r2, r3
 8002aa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002aa4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aaa:	1c9a      	adds	r2, r3, #2
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	629a      	str	r2, [r3, #40]	@ 0x28
 8002ab0:	e026      	b.n	8002b00 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ab6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ac4:	d007      	beq.n	8002ad6 <UART_Receive_IT+0x74>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d10a      	bne.n	8002ae4 <UART_Receive_IT+0x82>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	691b      	ldr	r3, [r3, #16]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d106      	bne.n	8002ae4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	b2da      	uxtb	r2, r3
 8002ade:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ae0:	701a      	strb	r2, [r3, #0]
 8002ae2:	e008      	b.n	8002af6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002af0:	b2da      	uxtb	r2, r3
 8002af2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002af4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002afa:	1c5a      	adds	r2, r3, #1
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	3b01      	subs	r3, #1
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d15d      	bne.n	8002bd0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	68da      	ldr	r2, [r3, #12]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f022 0220 	bic.w	r2, r2, #32
 8002b22:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	68da      	ldr	r2, [r3, #12]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002b32:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	695a      	ldr	r2, [r3, #20]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f022 0201 	bic.w	r2, r2, #1
 8002b42:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2220      	movs	r2, #32
 8002b48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d135      	bne.n	8002bc6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	330c      	adds	r3, #12
 8002b66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	e853 3f00 	ldrex	r3, [r3]
 8002b6e:	613b      	str	r3, [r7, #16]
   return(result);
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	f023 0310 	bic.w	r3, r3, #16
 8002b76:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	330c      	adds	r3, #12
 8002b7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b80:	623a      	str	r2, [r7, #32]
 8002b82:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b84:	69f9      	ldr	r1, [r7, #28]
 8002b86:	6a3a      	ldr	r2, [r7, #32]
 8002b88:	e841 2300 	strex	r3, r2, [r1]
 8002b8c:	61bb      	str	r3, [r7, #24]
   return(result);
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d1e5      	bne.n	8002b60 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0310 	and.w	r3, r3, #16
 8002b9e:	2b10      	cmp	r3, #16
 8002ba0:	d10a      	bne.n	8002bb8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	60fb      	str	r3, [r7, #12]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	60fb      	str	r3, [r7, #12]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	60fb      	str	r3, [r7, #12]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f7ff fdf9 	bl	80027b6 <HAL_UARTEx_RxEventCallback>
 8002bc4:	e002      	b.n	8002bcc <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f7ff fde3 	bl	8002792 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	e002      	b.n	8002bd6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	e000      	b.n	8002bd6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002bd4:	2302      	movs	r3, #2
  }
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3730      	adds	r7, #48	@ 0x30
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
	...

08002be0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	691b      	ldr	r3, [r3, #16]
 8002bee:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	68da      	ldr	r2, [r3, #12]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	430a      	orrs	r2, r1
 8002bfc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	689a      	ldr	r2, [r3, #8]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	691b      	ldr	r3, [r3, #16]
 8002c06:	431a      	orrs	r2, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	695b      	ldr	r3, [r3, #20]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002c1a:	f023 030c 	bic.w	r3, r3, #12
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	6812      	ldr	r2, [r2, #0]
 8002c22:	68b9      	ldr	r1, [r7, #8]
 8002c24:	430b      	orrs	r3, r1
 8002c26:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	695b      	ldr	r3, [r3, #20]
 8002c2e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	699a      	ldr	r2, [r3, #24]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	430a      	orrs	r2, r1
 8002c3c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a2c      	ldr	r2, [pc, #176]	@ (8002cf4 <UART_SetConfig+0x114>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d103      	bne.n	8002c50 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002c48:	f7fe fe04 	bl	8001854 <HAL_RCC_GetPCLK2Freq>
 8002c4c:	60f8      	str	r0, [r7, #12]
 8002c4e:	e002      	b.n	8002c56 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002c50:	f7fe fdec 	bl	800182c <HAL_RCC_GetPCLK1Freq>
 8002c54:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c56:	68fa      	ldr	r2, [r7, #12]
 8002c58:	4613      	mov	r3, r2
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	4413      	add	r3, r2
 8002c5e:	009a      	lsls	r2, r3, #2
 8002c60:	441a      	add	r2, r3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c6c:	4a22      	ldr	r2, [pc, #136]	@ (8002cf8 <UART_SetConfig+0x118>)
 8002c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c72:	095b      	lsrs	r3, r3, #5
 8002c74:	0119      	lsls	r1, r3, #4
 8002c76:	68fa      	ldr	r2, [r7, #12]
 8002c78:	4613      	mov	r3, r2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	4413      	add	r3, r2
 8002c7e:	009a      	lsls	r2, r3, #2
 8002c80:	441a      	add	r2, r3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c8c:	4b1a      	ldr	r3, [pc, #104]	@ (8002cf8 <UART_SetConfig+0x118>)
 8002c8e:	fba3 0302 	umull	r0, r3, r3, r2
 8002c92:	095b      	lsrs	r3, r3, #5
 8002c94:	2064      	movs	r0, #100	@ 0x64
 8002c96:	fb00 f303 	mul.w	r3, r0, r3
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	011b      	lsls	r3, r3, #4
 8002c9e:	3332      	adds	r3, #50	@ 0x32
 8002ca0:	4a15      	ldr	r2, [pc, #84]	@ (8002cf8 <UART_SetConfig+0x118>)
 8002ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ca6:	095b      	lsrs	r3, r3, #5
 8002ca8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002cac:	4419      	add	r1, r3
 8002cae:	68fa      	ldr	r2, [r7, #12]
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	4413      	add	r3, r2
 8002cb6:	009a      	lsls	r2, r3, #2
 8002cb8:	441a      	add	r2, r3
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002cc4:	4b0c      	ldr	r3, [pc, #48]	@ (8002cf8 <UART_SetConfig+0x118>)
 8002cc6:	fba3 0302 	umull	r0, r3, r3, r2
 8002cca:	095b      	lsrs	r3, r3, #5
 8002ccc:	2064      	movs	r0, #100	@ 0x64
 8002cce:	fb00 f303 	mul.w	r3, r0, r3
 8002cd2:	1ad3      	subs	r3, r2, r3
 8002cd4:	011b      	lsls	r3, r3, #4
 8002cd6:	3332      	adds	r3, #50	@ 0x32
 8002cd8:	4a07      	ldr	r2, [pc, #28]	@ (8002cf8 <UART_SetConfig+0x118>)
 8002cda:	fba2 2303 	umull	r2, r3, r2, r3
 8002cde:	095b      	lsrs	r3, r3, #5
 8002ce0:	f003 020f 	and.w	r2, r3, #15
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	440a      	add	r2, r1
 8002cea:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002cec:	bf00      	nop
 8002cee:	3710      	adds	r7, #16
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	40013800 	.word	0x40013800
 8002cf8:	51eb851f 	.word	0x51eb851f

08002cfc <std>:
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	b510      	push	{r4, lr}
 8002d00:	4604      	mov	r4, r0
 8002d02:	e9c0 3300 	strd	r3, r3, [r0]
 8002d06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002d0a:	6083      	str	r3, [r0, #8]
 8002d0c:	8181      	strh	r1, [r0, #12]
 8002d0e:	6643      	str	r3, [r0, #100]	@ 0x64
 8002d10:	81c2      	strh	r2, [r0, #14]
 8002d12:	6183      	str	r3, [r0, #24]
 8002d14:	4619      	mov	r1, r3
 8002d16:	2208      	movs	r2, #8
 8002d18:	305c      	adds	r0, #92	@ 0x5c
 8002d1a:	f000 f906 	bl	8002f2a <memset>
 8002d1e:	4b0d      	ldr	r3, [pc, #52]	@ (8002d54 <std+0x58>)
 8002d20:	6224      	str	r4, [r4, #32]
 8002d22:	6263      	str	r3, [r4, #36]	@ 0x24
 8002d24:	4b0c      	ldr	r3, [pc, #48]	@ (8002d58 <std+0x5c>)
 8002d26:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002d28:	4b0c      	ldr	r3, [pc, #48]	@ (8002d5c <std+0x60>)
 8002d2a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002d2c:	4b0c      	ldr	r3, [pc, #48]	@ (8002d60 <std+0x64>)
 8002d2e:	6323      	str	r3, [r4, #48]	@ 0x30
 8002d30:	4b0c      	ldr	r3, [pc, #48]	@ (8002d64 <std+0x68>)
 8002d32:	429c      	cmp	r4, r3
 8002d34:	d006      	beq.n	8002d44 <std+0x48>
 8002d36:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002d3a:	4294      	cmp	r4, r2
 8002d3c:	d002      	beq.n	8002d44 <std+0x48>
 8002d3e:	33d0      	adds	r3, #208	@ 0xd0
 8002d40:	429c      	cmp	r4, r3
 8002d42:	d105      	bne.n	8002d50 <std+0x54>
 8002d44:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002d48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d4c:	f000 b966 	b.w	800301c <__retarget_lock_init_recursive>
 8002d50:	bd10      	pop	{r4, pc}
 8002d52:	bf00      	nop
 8002d54:	08002ea5 	.word	0x08002ea5
 8002d58:	08002ec7 	.word	0x08002ec7
 8002d5c:	08002eff 	.word	0x08002eff
 8002d60:	08002f23 	.word	0x08002f23
 8002d64:	20000130 	.word	0x20000130

08002d68 <stdio_exit_handler>:
 8002d68:	4a02      	ldr	r2, [pc, #8]	@ (8002d74 <stdio_exit_handler+0xc>)
 8002d6a:	4903      	ldr	r1, [pc, #12]	@ (8002d78 <stdio_exit_handler+0x10>)
 8002d6c:	4803      	ldr	r0, [pc, #12]	@ (8002d7c <stdio_exit_handler+0x14>)
 8002d6e:	f000 b869 	b.w	8002e44 <_fwalk_sglue>
 8002d72:	bf00      	nop
 8002d74:	20000010 	.word	0x20000010
 8002d78:	080038b5 	.word	0x080038b5
 8002d7c:	20000020 	.word	0x20000020

08002d80 <cleanup_stdio>:
 8002d80:	6841      	ldr	r1, [r0, #4]
 8002d82:	4b0c      	ldr	r3, [pc, #48]	@ (8002db4 <cleanup_stdio+0x34>)
 8002d84:	b510      	push	{r4, lr}
 8002d86:	4299      	cmp	r1, r3
 8002d88:	4604      	mov	r4, r0
 8002d8a:	d001      	beq.n	8002d90 <cleanup_stdio+0x10>
 8002d8c:	f000 fd92 	bl	80038b4 <_fflush_r>
 8002d90:	68a1      	ldr	r1, [r4, #8]
 8002d92:	4b09      	ldr	r3, [pc, #36]	@ (8002db8 <cleanup_stdio+0x38>)
 8002d94:	4299      	cmp	r1, r3
 8002d96:	d002      	beq.n	8002d9e <cleanup_stdio+0x1e>
 8002d98:	4620      	mov	r0, r4
 8002d9a:	f000 fd8b 	bl	80038b4 <_fflush_r>
 8002d9e:	68e1      	ldr	r1, [r4, #12]
 8002da0:	4b06      	ldr	r3, [pc, #24]	@ (8002dbc <cleanup_stdio+0x3c>)
 8002da2:	4299      	cmp	r1, r3
 8002da4:	d004      	beq.n	8002db0 <cleanup_stdio+0x30>
 8002da6:	4620      	mov	r0, r4
 8002da8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002dac:	f000 bd82 	b.w	80038b4 <_fflush_r>
 8002db0:	bd10      	pop	{r4, pc}
 8002db2:	bf00      	nop
 8002db4:	20000130 	.word	0x20000130
 8002db8:	20000198 	.word	0x20000198
 8002dbc:	20000200 	.word	0x20000200

08002dc0 <global_stdio_init.part.0>:
 8002dc0:	b510      	push	{r4, lr}
 8002dc2:	4b0b      	ldr	r3, [pc, #44]	@ (8002df0 <global_stdio_init.part.0+0x30>)
 8002dc4:	4c0b      	ldr	r4, [pc, #44]	@ (8002df4 <global_stdio_init.part.0+0x34>)
 8002dc6:	4a0c      	ldr	r2, [pc, #48]	@ (8002df8 <global_stdio_init.part.0+0x38>)
 8002dc8:	4620      	mov	r0, r4
 8002dca:	601a      	str	r2, [r3, #0]
 8002dcc:	2104      	movs	r1, #4
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f7ff ff94 	bl	8002cfc <std>
 8002dd4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002dd8:	2201      	movs	r2, #1
 8002dda:	2109      	movs	r1, #9
 8002ddc:	f7ff ff8e 	bl	8002cfc <std>
 8002de0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002de4:	2202      	movs	r2, #2
 8002de6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002dea:	2112      	movs	r1, #18
 8002dec:	f7ff bf86 	b.w	8002cfc <std>
 8002df0:	20000268 	.word	0x20000268
 8002df4:	20000130 	.word	0x20000130
 8002df8:	08002d69 	.word	0x08002d69

08002dfc <__sfp_lock_acquire>:
 8002dfc:	4801      	ldr	r0, [pc, #4]	@ (8002e04 <__sfp_lock_acquire+0x8>)
 8002dfe:	f000 b90e 	b.w	800301e <__retarget_lock_acquire_recursive>
 8002e02:	bf00      	nop
 8002e04:	20000271 	.word	0x20000271

08002e08 <__sfp_lock_release>:
 8002e08:	4801      	ldr	r0, [pc, #4]	@ (8002e10 <__sfp_lock_release+0x8>)
 8002e0a:	f000 b909 	b.w	8003020 <__retarget_lock_release_recursive>
 8002e0e:	bf00      	nop
 8002e10:	20000271 	.word	0x20000271

08002e14 <__sinit>:
 8002e14:	b510      	push	{r4, lr}
 8002e16:	4604      	mov	r4, r0
 8002e18:	f7ff fff0 	bl	8002dfc <__sfp_lock_acquire>
 8002e1c:	6a23      	ldr	r3, [r4, #32]
 8002e1e:	b11b      	cbz	r3, 8002e28 <__sinit+0x14>
 8002e20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e24:	f7ff bff0 	b.w	8002e08 <__sfp_lock_release>
 8002e28:	4b04      	ldr	r3, [pc, #16]	@ (8002e3c <__sinit+0x28>)
 8002e2a:	6223      	str	r3, [r4, #32]
 8002e2c:	4b04      	ldr	r3, [pc, #16]	@ (8002e40 <__sinit+0x2c>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d1f5      	bne.n	8002e20 <__sinit+0xc>
 8002e34:	f7ff ffc4 	bl	8002dc0 <global_stdio_init.part.0>
 8002e38:	e7f2      	b.n	8002e20 <__sinit+0xc>
 8002e3a:	bf00      	nop
 8002e3c:	08002d81 	.word	0x08002d81
 8002e40:	20000268 	.word	0x20000268

08002e44 <_fwalk_sglue>:
 8002e44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002e48:	4607      	mov	r7, r0
 8002e4a:	4688      	mov	r8, r1
 8002e4c:	4614      	mov	r4, r2
 8002e4e:	2600      	movs	r6, #0
 8002e50:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002e54:	f1b9 0901 	subs.w	r9, r9, #1
 8002e58:	d505      	bpl.n	8002e66 <_fwalk_sglue+0x22>
 8002e5a:	6824      	ldr	r4, [r4, #0]
 8002e5c:	2c00      	cmp	r4, #0
 8002e5e:	d1f7      	bne.n	8002e50 <_fwalk_sglue+0xc>
 8002e60:	4630      	mov	r0, r6
 8002e62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002e66:	89ab      	ldrh	r3, [r5, #12]
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d907      	bls.n	8002e7c <_fwalk_sglue+0x38>
 8002e6c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002e70:	3301      	adds	r3, #1
 8002e72:	d003      	beq.n	8002e7c <_fwalk_sglue+0x38>
 8002e74:	4629      	mov	r1, r5
 8002e76:	4638      	mov	r0, r7
 8002e78:	47c0      	blx	r8
 8002e7a:	4306      	orrs	r6, r0
 8002e7c:	3568      	adds	r5, #104	@ 0x68
 8002e7e:	e7e9      	b.n	8002e54 <_fwalk_sglue+0x10>

08002e80 <iprintf>:
 8002e80:	b40f      	push	{r0, r1, r2, r3}
 8002e82:	b507      	push	{r0, r1, r2, lr}
 8002e84:	4906      	ldr	r1, [pc, #24]	@ (8002ea0 <iprintf+0x20>)
 8002e86:	ab04      	add	r3, sp, #16
 8002e88:	6808      	ldr	r0, [r1, #0]
 8002e8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8002e8e:	6881      	ldr	r1, [r0, #8]
 8002e90:	9301      	str	r3, [sp, #4]
 8002e92:	f000 f9e5 	bl	8003260 <_vfiprintf_r>
 8002e96:	b003      	add	sp, #12
 8002e98:	f85d eb04 	ldr.w	lr, [sp], #4
 8002e9c:	b004      	add	sp, #16
 8002e9e:	4770      	bx	lr
 8002ea0:	2000001c 	.word	0x2000001c

08002ea4 <__sread>:
 8002ea4:	b510      	push	{r4, lr}
 8002ea6:	460c      	mov	r4, r1
 8002ea8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002eac:	f000 f868 	bl	8002f80 <_read_r>
 8002eb0:	2800      	cmp	r0, #0
 8002eb2:	bfab      	itete	ge
 8002eb4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002eb6:	89a3      	ldrhlt	r3, [r4, #12]
 8002eb8:	181b      	addge	r3, r3, r0
 8002eba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002ebe:	bfac      	ite	ge
 8002ec0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002ec2:	81a3      	strhlt	r3, [r4, #12]
 8002ec4:	bd10      	pop	{r4, pc}

08002ec6 <__swrite>:
 8002ec6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002eca:	461f      	mov	r7, r3
 8002ecc:	898b      	ldrh	r3, [r1, #12]
 8002ece:	4605      	mov	r5, r0
 8002ed0:	05db      	lsls	r3, r3, #23
 8002ed2:	460c      	mov	r4, r1
 8002ed4:	4616      	mov	r6, r2
 8002ed6:	d505      	bpl.n	8002ee4 <__swrite+0x1e>
 8002ed8:	2302      	movs	r3, #2
 8002eda:	2200      	movs	r2, #0
 8002edc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ee0:	f000 f83c 	bl	8002f5c <_lseek_r>
 8002ee4:	89a3      	ldrh	r3, [r4, #12]
 8002ee6:	4632      	mov	r2, r6
 8002ee8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002eec:	81a3      	strh	r3, [r4, #12]
 8002eee:	4628      	mov	r0, r5
 8002ef0:	463b      	mov	r3, r7
 8002ef2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002ef6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002efa:	f000 b853 	b.w	8002fa4 <_write_r>

08002efe <__sseek>:
 8002efe:	b510      	push	{r4, lr}
 8002f00:	460c      	mov	r4, r1
 8002f02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f06:	f000 f829 	bl	8002f5c <_lseek_r>
 8002f0a:	1c43      	adds	r3, r0, #1
 8002f0c:	89a3      	ldrh	r3, [r4, #12]
 8002f0e:	bf15      	itete	ne
 8002f10:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002f12:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002f16:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002f1a:	81a3      	strheq	r3, [r4, #12]
 8002f1c:	bf18      	it	ne
 8002f1e:	81a3      	strhne	r3, [r4, #12]
 8002f20:	bd10      	pop	{r4, pc}

08002f22 <__sclose>:
 8002f22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f26:	f000 b809 	b.w	8002f3c <_close_r>

08002f2a <memset>:
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	4402      	add	r2, r0
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d100      	bne.n	8002f34 <memset+0xa>
 8002f32:	4770      	bx	lr
 8002f34:	f803 1b01 	strb.w	r1, [r3], #1
 8002f38:	e7f9      	b.n	8002f2e <memset+0x4>
	...

08002f3c <_close_r>:
 8002f3c:	b538      	push	{r3, r4, r5, lr}
 8002f3e:	2300      	movs	r3, #0
 8002f40:	4d05      	ldr	r5, [pc, #20]	@ (8002f58 <_close_r+0x1c>)
 8002f42:	4604      	mov	r4, r0
 8002f44:	4608      	mov	r0, r1
 8002f46:	602b      	str	r3, [r5, #0]
 8002f48:	f7fd fb4f 	bl	80005ea <_close>
 8002f4c:	1c43      	adds	r3, r0, #1
 8002f4e:	d102      	bne.n	8002f56 <_close_r+0x1a>
 8002f50:	682b      	ldr	r3, [r5, #0]
 8002f52:	b103      	cbz	r3, 8002f56 <_close_r+0x1a>
 8002f54:	6023      	str	r3, [r4, #0]
 8002f56:	bd38      	pop	{r3, r4, r5, pc}
 8002f58:	2000026c 	.word	0x2000026c

08002f5c <_lseek_r>:
 8002f5c:	b538      	push	{r3, r4, r5, lr}
 8002f5e:	4604      	mov	r4, r0
 8002f60:	4608      	mov	r0, r1
 8002f62:	4611      	mov	r1, r2
 8002f64:	2200      	movs	r2, #0
 8002f66:	4d05      	ldr	r5, [pc, #20]	@ (8002f7c <_lseek_r+0x20>)
 8002f68:	602a      	str	r2, [r5, #0]
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	f7fd fb61 	bl	8000632 <_lseek>
 8002f70:	1c43      	adds	r3, r0, #1
 8002f72:	d102      	bne.n	8002f7a <_lseek_r+0x1e>
 8002f74:	682b      	ldr	r3, [r5, #0]
 8002f76:	b103      	cbz	r3, 8002f7a <_lseek_r+0x1e>
 8002f78:	6023      	str	r3, [r4, #0]
 8002f7a:	bd38      	pop	{r3, r4, r5, pc}
 8002f7c:	2000026c 	.word	0x2000026c

08002f80 <_read_r>:
 8002f80:	b538      	push	{r3, r4, r5, lr}
 8002f82:	4604      	mov	r4, r0
 8002f84:	4608      	mov	r0, r1
 8002f86:	4611      	mov	r1, r2
 8002f88:	2200      	movs	r2, #0
 8002f8a:	4d05      	ldr	r5, [pc, #20]	@ (8002fa0 <_read_r+0x20>)
 8002f8c:	602a      	str	r2, [r5, #0]
 8002f8e:	461a      	mov	r2, r3
 8002f90:	f7fd faf2 	bl	8000578 <_read>
 8002f94:	1c43      	adds	r3, r0, #1
 8002f96:	d102      	bne.n	8002f9e <_read_r+0x1e>
 8002f98:	682b      	ldr	r3, [r5, #0]
 8002f9a:	b103      	cbz	r3, 8002f9e <_read_r+0x1e>
 8002f9c:	6023      	str	r3, [r4, #0]
 8002f9e:	bd38      	pop	{r3, r4, r5, pc}
 8002fa0:	2000026c 	.word	0x2000026c

08002fa4 <_write_r>:
 8002fa4:	b538      	push	{r3, r4, r5, lr}
 8002fa6:	4604      	mov	r4, r0
 8002fa8:	4608      	mov	r0, r1
 8002faa:	4611      	mov	r1, r2
 8002fac:	2200      	movs	r2, #0
 8002fae:	4d05      	ldr	r5, [pc, #20]	@ (8002fc4 <_write_r+0x20>)
 8002fb0:	602a      	str	r2, [r5, #0]
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	f7fd fafd 	bl	80005b2 <_write>
 8002fb8:	1c43      	adds	r3, r0, #1
 8002fba:	d102      	bne.n	8002fc2 <_write_r+0x1e>
 8002fbc:	682b      	ldr	r3, [r5, #0]
 8002fbe:	b103      	cbz	r3, 8002fc2 <_write_r+0x1e>
 8002fc0:	6023      	str	r3, [r4, #0]
 8002fc2:	bd38      	pop	{r3, r4, r5, pc}
 8002fc4:	2000026c 	.word	0x2000026c

08002fc8 <__errno>:
 8002fc8:	4b01      	ldr	r3, [pc, #4]	@ (8002fd0 <__errno+0x8>)
 8002fca:	6818      	ldr	r0, [r3, #0]
 8002fcc:	4770      	bx	lr
 8002fce:	bf00      	nop
 8002fd0:	2000001c 	.word	0x2000001c

08002fd4 <__libc_init_array>:
 8002fd4:	b570      	push	{r4, r5, r6, lr}
 8002fd6:	2600      	movs	r6, #0
 8002fd8:	4d0c      	ldr	r5, [pc, #48]	@ (800300c <__libc_init_array+0x38>)
 8002fda:	4c0d      	ldr	r4, [pc, #52]	@ (8003010 <__libc_init_array+0x3c>)
 8002fdc:	1b64      	subs	r4, r4, r5
 8002fde:	10a4      	asrs	r4, r4, #2
 8002fe0:	42a6      	cmp	r6, r4
 8002fe2:	d109      	bne.n	8002ff8 <__libc_init_array+0x24>
 8002fe4:	f000 fdc4 	bl	8003b70 <_init>
 8002fe8:	2600      	movs	r6, #0
 8002fea:	4d0a      	ldr	r5, [pc, #40]	@ (8003014 <__libc_init_array+0x40>)
 8002fec:	4c0a      	ldr	r4, [pc, #40]	@ (8003018 <__libc_init_array+0x44>)
 8002fee:	1b64      	subs	r4, r4, r5
 8002ff0:	10a4      	asrs	r4, r4, #2
 8002ff2:	42a6      	cmp	r6, r4
 8002ff4:	d105      	bne.n	8003002 <__libc_init_array+0x2e>
 8002ff6:	bd70      	pop	{r4, r5, r6, pc}
 8002ff8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ffc:	4798      	blx	r3
 8002ffe:	3601      	adds	r6, #1
 8003000:	e7ee      	b.n	8002fe0 <__libc_init_array+0xc>
 8003002:	f855 3b04 	ldr.w	r3, [r5], #4
 8003006:	4798      	blx	r3
 8003008:	3601      	adds	r6, #1
 800300a:	e7f2      	b.n	8002ff2 <__libc_init_array+0x1e>
 800300c:	08003c18 	.word	0x08003c18
 8003010:	08003c18 	.word	0x08003c18
 8003014:	08003c18 	.word	0x08003c18
 8003018:	08003c1c 	.word	0x08003c1c

0800301c <__retarget_lock_init_recursive>:
 800301c:	4770      	bx	lr

0800301e <__retarget_lock_acquire_recursive>:
 800301e:	4770      	bx	lr

08003020 <__retarget_lock_release_recursive>:
 8003020:	4770      	bx	lr
	...

08003024 <_free_r>:
 8003024:	b538      	push	{r3, r4, r5, lr}
 8003026:	4605      	mov	r5, r0
 8003028:	2900      	cmp	r1, #0
 800302a:	d040      	beq.n	80030ae <_free_r+0x8a>
 800302c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003030:	1f0c      	subs	r4, r1, #4
 8003032:	2b00      	cmp	r3, #0
 8003034:	bfb8      	it	lt
 8003036:	18e4      	addlt	r4, r4, r3
 8003038:	f000 f8de 	bl	80031f8 <__malloc_lock>
 800303c:	4a1c      	ldr	r2, [pc, #112]	@ (80030b0 <_free_r+0x8c>)
 800303e:	6813      	ldr	r3, [r2, #0]
 8003040:	b933      	cbnz	r3, 8003050 <_free_r+0x2c>
 8003042:	6063      	str	r3, [r4, #4]
 8003044:	6014      	str	r4, [r2, #0]
 8003046:	4628      	mov	r0, r5
 8003048:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800304c:	f000 b8da 	b.w	8003204 <__malloc_unlock>
 8003050:	42a3      	cmp	r3, r4
 8003052:	d908      	bls.n	8003066 <_free_r+0x42>
 8003054:	6820      	ldr	r0, [r4, #0]
 8003056:	1821      	adds	r1, r4, r0
 8003058:	428b      	cmp	r3, r1
 800305a:	bf01      	itttt	eq
 800305c:	6819      	ldreq	r1, [r3, #0]
 800305e:	685b      	ldreq	r3, [r3, #4]
 8003060:	1809      	addeq	r1, r1, r0
 8003062:	6021      	streq	r1, [r4, #0]
 8003064:	e7ed      	b.n	8003042 <_free_r+0x1e>
 8003066:	461a      	mov	r2, r3
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	b10b      	cbz	r3, 8003070 <_free_r+0x4c>
 800306c:	42a3      	cmp	r3, r4
 800306e:	d9fa      	bls.n	8003066 <_free_r+0x42>
 8003070:	6811      	ldr	r1, [r2, #0]
 8003072:	1850      	adds	r0, r2, r1
 8003074:	42a0      	cmp	r0, r4
 8003076:	d10b      	bne.n	8003090 <_free_r+0x6c>
 8003078:	6820      	ldr	r0, [r4, #0]
 800307a:	4401      	add	r1, r0
 800307c:	1850      	adds	r0, r2, r1
 800307e:	4283      	cmp	r3, r0
 8003080:	6011      	str	r1, [r2, #0]
 8003082:	d1e0      	bne.n	8003046 <_free_r+0x22>
 8003084:	6818      	ldr	r0, [r3, #0]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	4408      	add	r0, r1
 800308a:	6010      	str	r0, [r2, #0]
 800308c:	6053      	str	r3, [r2, #4]
 800308e:	e7da      	b.n	8003046 <_free_r+0x22>
 8003090:	d902      	bls.n	8003098 <_free_r+0x74>
 8003092:	230c      	movs	r3, #12
 8003094:	602b      	str	r3, [r5, #0]
 8003096:	e7d6      	b.n	8003046 <_free_r+0x22>
 8003098:	6820      	ldr	r0, [r4, #0]
 800309a:	1821      	adds	r1, r4, r0
 800309c:	428b      	cmp	r3, r1
 800309e:	bf01      	itttt	eq
 80030a0:	6819      	ldreq	r1, [r3, #0]
 80030a2:	685b      	ldreq	r3, [r3, #4]
 80030a4:	1809      	addeq	r1, r1, r0
 80030a6:	6021      	streq	r1, [r4, #0]
 80030a8:	6063      	str	r3, [r4, #4]
 80030aa:	6054      	str	r4, [r2, #4]
 80030ac:	e7cb      	b.n	8003046 <_free_r+0x22>
 80030ae:	bd38      	pop	{r3, r4, r5, pc}
 80030b0:	20000278 	.word	0x20000278

080030b4 <sbrk_aligned>:
 80030b4:	b570      	push	{r4, r5, r6, lr}
 80030b6:	4e0f      	ldr	r6, [pc, #60]	@ (80030f4 <sbrk_aligned+0x40>)
 80030b8:	460c      	mov	r4, r1
 80030ba:	6831      	ldr	r1, [r6, #0]
 80030bc:	4605      	mov	r5, r0
 80030be:	b911      	cbnz	r1, 80030c6 <sbrk_aligned+0x12>
 80030c0:	f000 fcb4 	bl	8003a2c <_sbrk_r>
 80030c4:	6030      	str	r0, [r6, #0]
 80030c6:	4621      	mov	r1, r4
 80030c8:	4628      	mov	r0, r5
 80030ca:	f000 fcaf 	bl	8003a2c <_sbrk_r>
 80030ce:	1c43      	adds	r3, r0, #1
 80030d0:	d103      	bne.n	80030da <sbrk_aligned+0x26>
 80030d2:	f04f 34ff 	mov.w	r4, #4294967295
 80030d6:	4620      	mov	r0, r4
 80030d8:	bd70      	pop	{r4, r5, r6, pc}
 80030da:	1cc4      	adds	r4, r0, #3
 80030dc:	f024 0403 	bic.w	r4, r4, #3
 80030e0:	42a0      	cmp	r0, r4
 80030e2:	d0f8      	beq.n	80030d6 <sbrk_aligned+0x22>
 80030e4:	1a21      	subs	r1, r4, r0
 80030e6:	4628      	mov	r0, r5
 80030e8:	f000 fca0 	bl	8003a2c <_sbrk_r>
 80030ec:	3001      	adds	r0, #1
 80030ee:	d1f2      	bne.n	80030d6 <sbrk_aligned+0x22>
 80030f0:	e7ef      	b.n	80030d2 <sbrk_aligned+0x1e>
 80030f2:	bf00      	nop
 80030f4:	20000274 	.word	0x20000274

080030f8 <_malloc_r>:
 80030f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80030fc:	1ccd      	adds	r5, r1, #3
 80030fe:	f025 0503 	bic.w	r5, r5, #3
 8003102:	3508      	adds	r5, #8
 8003104:	2d0c      	cmp	r5, #12
 8003106:	bf38      	it	cc
 8003108:	250c      	movcc	r5, #12
 800310a:	2d00      	cmp	r5, #0
 800310c:	4606      	mov	r6, r0
 800310e:	db01      	blt.n	8003114 <_malloc_r+0x1c>
 8003110:	42a9      	cmp	r1, r5
 8003112:	d904      	bls.n	800311e <_malloc_r+0x26>
 8003114:	230c      	movs	r3, #12
 8003116:	6033      	str	r3, [r6, #0]
 8003118:	2000      	movs	r0, #0
 800311a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800311e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80031f4 <_malloc_r+0xfc>
 8003122:	f000 f869 	bl	80031f8 <__malloc_lock>
 8003126:	f8d8 3000 	ldr.w	r3, [r8]
 800312a:	461c      	mov	r4, r3
 800312c:	bb44      	cbnz	r4, 8003180 <_malloc_r+0x88>
 800312e:	4629      	mov	r1, r5
 8003130:	4630      	mov	r0, r6
 8003132:	f7ff ffbf 	bl	80030b4 <sbrk_aligned>
 8003136:	1c43      	adds	r3, r0, #1
 8003138:	4604      	mov	r4, r0
 800313a:	d158      	bne.n	80031ee <_malloc_r+0xf6>
 800313c:	f8d8 4000 	ldr.w	r4, [r8]
 8003140:	4627      	mov	r7, r4
 8003142:	2f00      	cmp	r7, #0
 8003144:	d143      	bne.n	80031ce <_malloc_r+0xd6>
 8003146:	2c00      	cmp	r4, #0
 8003148:	d04b      	beq.n	80031e2 <_malloc_r+0xea>
 800314a:	6823      	ldr	r3, [r4, #0]
 800314c:	4639      	mov	r1, r7
 800314e:	4630      	mov	r0, r6
 8003150:	eb04 0903 	add.w	r9, r4, r3
 8003154:	f000 fc6a 	bl	8003a2c <_sbrk_r>
 8003158:	4581      	cmp	r9, r0
 800315a:	d142      	bne.n	80031e2 <_malloc_r+0xea>
 800315c:	6821      	ldr	r1, [r4, #0]
 800315e:	4630      	mov	r0, r6
 8003160:	1a6d      	subs	r5, r5, r1
 8003162:	4629      	mov	r1, r5
 8003164:	f7ff ffa6 	bl	80030b4 <sbrk_aligned>
 8003168:	3001      	adds	r0, #1
 800316a:	d03a      	beq.n	80031e2 <_malloc_r+0xea>
 800316c:	6823      	ldr	r3, [r4, #0]
 800316e:	442b      	add	r3, r5
 8003170:	6023      	str	r3, [r4, #0]
 8003172:	f8d8 3000 	ldr.w	r3, [r8]
 8003176:	685a      	ldr	r2, [r3, #4]
 8003178:	bb62      	cbnz	r2, 80031d4 <_malloc_r+0xdc>
 800317a:	f8c8 7000 	str.w	r7, [r8]
 800317e:	e00f      	b.n	80031a0 <_malloc_r+0xa8>
 8003180:	6822      	ldr	r2, [r4, #0]
 8003182:	1b52      	subs	r2, r2, r5
 8003184:	d420      	bmi.n	80031c8 <_malloc_r+0xd0>
 8003186:	2a0b      	cmp	r2, #11
 8003188:	d917      	bls.n	80031ba <_malloc_r+0xc2>
 800318a:	1961      	adds	r1, r4, r5
 800318c:	42a3      	cmp	r3, r4
 800318e:	6025      	str	r5, [r4, #0]
 8003190:	bf18      	it	ne
 8003192:	6059      	strne	r1, [r3, #4]
 8003194:	6863      	ldr	r3, [r4, #4]
 8003196:	bf08      	it	eq
 8003198:	f8c8 1000 	streq.w	r1, [r8]
 800319c:	5162      	str	r2, [r4, r5]
 800319e:	604b      	str	r3, [r1, #4]
 80031a0:	4630      	mov	r0, r6
 80031a2:	f000 f82f 	bl	8003204 <__malloc_unlock>
 80031a6:	f104 000b 	add.w	r0, r4, #11
 80031aa:	1d23      	adds	r3, r4, #4
 80031ac:	f020 0007 	bic.w	r0, r0, #7
 80031b0:	1ac2      	subs	r2, r0, r3
 80031b2:	bf1c      	itt	ne
 80031b4:	1a1b      	subne	r3, r3, r0
 80031b6:	50a3      	strne	r3, [r4, r2]
 80031b8:	e7af      	b.n	800311a <_malloc_r+0x22>
 80031ba:	6862      	ldr	r2, [r4, #4]
 80031bc:	42a3      	cmp	r3, r4
 80031be:	bf0c      	ite	eq
 80031c0:	f8c8 2000 	streq.w	r2, [r8]
 80031c4:	605a      	strne	r2, [r3, #4]
 80031c6:	e7eb      	b.n	80031a0 <_malloc_r+0xa8>
 80031c8:	4623      	mov	r3, r4
 80031ca:	6864      	ldr	r4, [r4, #4]
 80031cc:	e7ae      	b.n	800312c <_malloc_r+0x34>
 80031ce:	463c      	mov	r4, r7
 80031d0:	687f      	ldr	r7, [r7, #4]
 80031d2:	e7b6      	b.n	8003142 <_malloc_r+0x4a>
 80031d4:	461a      	mov	r2, r3
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	42a3      	cmp	r3, r4
 80031da:	d1fb      	bne.n	80031d4 <_malloc_r+0xdc>
 80031dc:	2300      	movs	r3, #0
 80031de:	6053      	str	r3, [r2, #4]
 80031e0:	e7de      	b.n	80031a0 <_malloc_r+0xa8>
 80031e2:	230c      	movs	r3, #12
 80031e4:	4630      	mov	r0, r6
 80031e6:	6033      	str	r3, [r6, #0]
 80031e8:	f000 f80c 	bl	8003204 <__malloc_unlock>
 80031ec:	e794      	b.n	8003118 <_malloc_r+0x20>
 80031ee:	6005      	str	r5, [r0, #0]
 80031f0:	e7d6      	b.n	80031a0 <_malloc_r+0xa8>
 80031f2:	bf00      	nop
 80031f4:	20000278 	.word	0x20000278

080031f8 <__malloc_lock>:
 80031f8:	4801      	ldr	r0, [pc, #4]	@ (8003200 <__malloc_lock+0x8>)
 80031fa:	f7ff bf10 	b.w	800301e <__retarget_lock_acquire_recursive>
 80031fe:	bf00      	nop
 8003200:	20000270 	.word	0x20000270

08003204 <__malloc_unlock>:
 8003204:	4801      	ldr	r0, [pc, #4]	@ (800320c <__malloc_unlock+0x8>)
 8003206:	f7ff bf0b 	b.w	8003020 <__retarget_lock_release_recursive>
 800320a:	bf00      	nop
 800320c:	20000270 	.word	0x20000270

08003210 <__sfputc_r>:
 8003210:	6893      	ldr	r3, [r2, #8]
 8003212:	b410      	push	{r4}
 8003214:	3b01      	subs	r3, #1
 8003216:	2b00      	cmp	r3, #0
 8003218:	6093      	str	r3, [r2, #8]
 800321a:	da07      	bge.n	800322c <__sfputc_r+0x1c>
 800321c:	6994      	ldr	r4, [r2, #24]
 800321e:	42a3      	cmp	r3, r4
 8003220:	db01      	blt.n	8003226 <__sfputc_r+0x16>
 8003222:	290a      	cmp	r1, #10
 8003224:	d102      	bne.n	800322c <__sfputc_r+0x1c>
 8003226:	bc10      	pop	{r4}
 8003228:	f000 bb6c 	b.w	8003904 <__swbuf_r>
 800322c:	6813      	ldr	r3, [r2, #0]
 800322e:	1c58      	adds	r0, r3, #1
 8003230:	6010      	str	r0, [r2, #0]
 8003232:	7019      	strb	r1, [r3, #0]
 8003234:	4608      	mov	r0, r1
 8003236:	bc10      	pop	{r4}
 8003238:	4770      	bx	lr

0800323a <__sfputs_r>:
 800323a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800323c:	4606      	mov	r6, r0
 800323e:	460f      	mov	r7, r1
 8003240:	4614      	mov	r4, r2
 8003242:	18d5      	adds	r5, r2, r3
 8003244:	42ac      	cmp	r4, r5
 8003246:	d101      	bne.n	800324c <__sfputs_r+0x12>
 8003248:	2000      	movs	r0, #0
 800324a:	e007      	b.n	800325c <__sfputs_r+0x22>
 800324c:	463a      	mov	r2, r7
 800324e:	4630      	mov	r0, r6
 8003250:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003254:	f7ff ffdc 	bl	8003210 <__sfputc_r>
 8003258:	1c43      	adds	r3, r0, #1
 800325a:	d1f3      	bne.n	8003244 <__sfputs_r+0xa>
 800325c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003260 <_vfiprintf_r>:
 8003260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003264:	460d      	mov	r5, r1
 8003266:	4614      	mov	r4, r2
 8003268:	4698      	mov	r8, r3
 800326a:	4606      	mov	r6, r0
 800326c:	b09d      	sub	sp, #116	@ 0x74
 800326e:	b118      	cbz	r0, 8003278 <_vfiprintf_r+0x18>
 8003270:	6a03      	ldr	r3, [r0, #32]
 8003272:	b90b      	cbnz	r3, 8003278 <_vfiprintf_r+0x18>
 8003274:	f7ff fdce 	bl	8002e14 <__sinit>
 8003278:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800327a:	07d9      	lsls	r1, r3, #31
 800327c:	d405      	bmi.n	800328a <_vfiprintf_r+0x2a>
 800327e:	89ab      	ldrh	r3, [r5, #12]
 8003280:	059a      	lsls	r2, r3, #22
 8003282:	d402      	bmi.n	800328a <_vfiprintf_r+0x2a>
 8003284:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003286:	f7ff feca 	bl	800301e <__retarget_lock_acquire_recursive>
 800328a:	89ab      	ldrh	r3, [r5, #12]
 800328c:	071b      	lsls	r3, r3, #28
 800328e:	d501      	bpl.n	8003294 <_vfiprintf_r+0x34>
 8003290:	692b      	ldr	r3, [r5, #16]
 8003292:	b99b      	cbnz	r3, 80032bc <_vfiprintf_r+0x5c>
 8003294:	4629      	mov	r1, r5
 8003296:	4630      	mov	r0, r6
 8003298:	f000 fb72 	bl	8003980 <__swsetup_r>
 800329c:	b170      	cbz	r0, 80032bc <_vfiprintf_r+0x5c>
 800329e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80032a0:	07dc      	lsls	r4, r3, #31
 80032a2:	d504      	bpl.n	80032ae <_vfiprintf_r+0x4e>
 80032a4:	f04f 30ff 	mov.w	r0, #4294967295
 80032a8:	b01d      	add	sp, #116	@ 0x74
 80032aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032ae:	89ab      	ldrh	r3, [r5, #12]
 80032b0:	0598      	lsls	r0, r3, #22
 80032b2:	d4f7      	bmi.n	80032a4 <_vfiprintf_r+0x44>
 80032b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80032b6:	f7ff feb3 	bl	8003020 <__retarget_lock_release_recursive>
 80032ba:	e7f3      	b.n	80032a4 <_vfiprintf_r+0x44>
 80032bc:	2300      	movs	r3, #0
 80032be:	9309      	str	r3, [sp, #36]	@ 0x24
 80032c0:	2320      	movs	r3, #32
 80032c2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80032c6:	2330      	movs	r3, #48	@ 0x30
 80032c8:	f04f 0901 	mov.w	r9, #1
 80032cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80032d0:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800347c <_vfiprintf_r+0x21c>
 80032d4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80032d8:	4623      	mov	r3, r4
 80032da:	469a      	mov	sl, r3
 80032dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80032e0:	b10a      	cbz	r2, 80032e6 <_vfiprintf_r+0x86>
 80032e2:	2a25      	cmp	r2, #37	@ 0x25
 80032e4:	d1f9      	bne.n	80032da <_vfiprintf_r+0x7a>
 80032e6:	ebba 0b04 	subs.w	fp, sl, r4
 80032ea:	d00b      	beq.n	8003304 <_vfiprintf_r+0xa4>
 80032ec:	465b      	mov	r3, fp
 80032ee:	4622      	mov	r2, r4
 80032f0:	4629      	mov	r1, r5
 80032f2:	4630      	mov	r0, r6
 80032f4:	f7ff ffa1 	bl	800323a <__sfputs_r>
 80032f8:	3001      	adds	r0, #1
 80032fa:	f000 80a7 	beq.w	800344c <_vfiprintf_r+0x1ec>
 80032fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003300:	445a      	add	r2, fp
 8003302:	9209      	str	r2, [sp, #36]	@ 0x24
 8003304:	f89a 3000 	ldrb.w	r3, [sl]
 8003308:	2b00      	cmp	r3, #0
 800330a:	f000 809f 	beq.w	800344c <_vfiprintf_r+0x1ec>
 800330e:	2300      	movs	r3, #0
 8003310:	f04f 32ff 	mov.w	r2, #4294967295
 8003314:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003318:	f10a 0a01 	add.w	sl, sl, #1
 800331c:	9304      	str	r3, [sp, #16]
 800331e:	9307      	str	r3, [sp, #28]
 8003320:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003324:	931a      	str	r3, [sp, #104]	@ 0x68
 8003326:	4654      	mov	r4, sl
 8003328:	2205      	movs	r2, #5
 800332a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800332e:	4853      	ldr	r0, [pc, #332]	@ (800347c <_vfiprintf_r+0x21c>)
 8003330:	f000 fb8c 	bl	8003a4c <memchr>
 8003334:	9a04      	ldr	r2, [sp, #16]
 8003336:	b9d8      	cbnz	r0, 8003370 <_vfiprintf_r+0x110>
 8003338:	06d1      	lsls	r1, r2, #27
 800333a:	bf44      	itt	mi
 800333c:	2320      	movmi	r3, #32
 800333e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003342:	0713      	lsls	r3, r2, #28
 8003344:	bf44      	itt	mi
 8003346:	232b      	movmi	r3, #43	@ 0x2b
 8003348:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800334c:	f89a 3000 	ldrb.w	r3, [sl]
 8003350:	2b2a      	cmp	r3, #42	@ 0x2a
 8003352:	d015      	beq.n	8003380 <_vfiprintf_r+0x120>
 8003354:	4654      	mov	r4, sl
 8003356:	2000      	movs	r0, #0
 8003358:	f04f 0c0a 	mov.w	ip, #10
 800335c:	9a07      	ldr	r2, [sp, #28]
 800335e:	4621      	mov	r1, r4
 8003360:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003364:	3b30      	subs	r3, #48	@ 0x30
 8003366:	2b09      	cmp	r3, #9
 8003368:	d94b      	bls.n	8003402 <_vfiprintf_r+0x1a2>
 800336a:	b1b0      	cbz	r0, 800339a <_vfiprintf_r+0x13a>
 800336c:	9207      	str	r2, [sp, #28]
 800336e:	e014      	b.n	800339a <_vfiprintf_r+0x13a>
 8003370:	eba0 0308 	sub.w	r3, r0, r8
 8003374:	fa09 f303 	lsl.w	r3, r9, r3
 8003378:	4313      	orrs	r3, r2
 800337a:	46a2      	mov	sl, r4
 800337c:	9304      	str	r3, [sp, #16]
 800337e:	e7d2      	b.n	8003326 <_vfiprintf_r+0xc6>
 8003380:	9b03      	ldr	r3, [sp, #12]
 8003382:	1d19      	adds	r1, r3, #4
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	9103      	str	r1, [sp, #12]
 8003388:	2b00      	cmp	r3, #0
 800338a:	bfbb      	ittet	lt
 800338c:	425b      	neglt	r3, r3
 800338e:	f042 0202 	orrlt.w	r2, r2, #2
 8003392:	9307      	strge	r3, [sp, #28]
 8003394:	9307      	strlt	r3, [sp, #28]
 8003396:	bfb8      	it	lt
 8003398:	9204      	strlt	r2, [sp, #16]
 800339a:	7823      	ldrb	r3, [r4, #0]
 800339c:	2b2e      	cmp	r3, #46	@ 0x2e
 800339e:	d10a      	bne.n	80033b6 <_vfiprintf_r+0x156>
 80033a0:	7863      	ldrb	r3, [r4, #1]
 80033a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80033a4:	d132      	bne.n	800340c <_vfiprintf_r+0x1ac>
 80033a6:	9b03      	ldr	r3, [sp, #12]
 80033a8:	3402      	adds	r4, #2
 80033aa:	1d1a      	adds	r2, r3, #4
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	9203      	str	r2, [sp, #12]
 80033b0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80033b4:	9305      	str	r3, [sp, #20]
 80033b6:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8003480 <_vfiprintf_r+0x220>
 80033ba:	2203      	movs	r2, #3
 80033bc:	4650      	mov	r0, sl
 80033be:	7821      	ldrb	r1, [r4, #0]
 80033c0:	f000 fb44 	bl	8003a4c <memchr>
 80033c4:	b138      	cbz	r0, 80033d6 <_vfiprintf_r+0x176>
 80033c6:	2240      	movs	r2, #64	@ 0x40
 80033c8:	9b04      	ldr	r3, [sp, #16]
 80033ca:	eba0 000a 	sub.w	r0, r0, sl
 80033ce:	4082      	lsls	r2, r0
 80033d0:	4313      	orrs	r3, r2
 80033d2:	3401      	adds	r4, #1
 80033d4:	9304      	str	r3, [sp, #16]
 80033d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033da:	2206      	movs	r2, #6
 80033dc:	4829      	ldr	r0, [pc, #164]	@ (8003484 <_vfiprintf_r+0x224>)
 80033de:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80033e2:	f000 fb33 	bl	8003a4c <memchr>
 80033e6:	2800      	cmp	r0, #0
 80033e8:	d03f      	beq.n	800346a <_vfiprintf_r+0x20a>
 80033ea:	4b27      	ldr	r3, [pc, #156]	@ (8003488 <_vfiprintf_r+0x228>)
 80033ec:	bb1b      	cbnz	r3, 8003436 <_vfiprintf_r+0x1d6>
 80033ee:	9b03      	ldr	r3, [sp, #12]
 80033f0:	3307      	adds	r3, #7
 80033f2:	f023 0307 	bic.w	r3, r3, #7
 80033f6:	3308      	adds	r3, #8
 80033f8:	9303      	str	r3, [sp, #12]
 80033fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80033fc:	443b      	add	r3, r7
 80033fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8003400:	e76a      	b.n	80032d8 <_vfiprintf_r+0x78>
 8003402:	460c      	mov	r4, r1
 8003404:	2001      	movs	r0, #1
 8003406:	fb0c 3202 	mla	r2, ip, r2, r3
 800340a:	e7a8      	b.n	800335e <_vfiprintf_r+0xfe>
 800340c:	2300      	movs	r3, #0
 800340e:	f04f 0c0a 	mov.w	ip, #10
 8003412:	4619      	mov	r1, r3
 8003414:	3401      	adds	r4, #1
 8003416:	9305      	str	r3, [sp, #20]
 8003418:	4620      	mov	r0, r4
 800341a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800341e:	3a30      	subs	r2, #48	@ 0x30
 8003420:	2a09      	cmp	r2, #9
 8003422:	d903      	bls.n	800342c <_vfiprintf_r+0x1cc>
 8003424:	2b00      	cmp	r3, #0
 8003426:	d0c6      	beq.n	80033b6 <_vfiprintf_r+0x156>
 8003428:	9105      	str	r1, [sp, #20]
 800342a:	e7c4      	b.n	80033b6 <_vfiprintf_r+0x156>
 800342c:	4604      	mov	r4, r0
 800342e:	2301      	movs	r3, #1
 8003430:	fb0c 2101 	mla	r1, ip, r1, r2
 8003434:	e7f0      	b.n	8003418 <_vfiprintf_r+0x1b8>
 8003436:	ab03      	add	r3, sp, #12
 8003438:	9300      	str	r3, [sp, #0]
 800343a:	462a      	mov	r2, r5
 800343c:	4630      	mov	r0, r6
 800343e:	4b13      	ldr	r3, [pc, #76]	@ (800348c <_vfiprintf_r+0x22c>)
 8003440:	a904      	add	r1, sp, #16
 8003442:	f3af 8000 	nop.w
 8003446:	4607      	mov	r7, r0
 8003448:	1c78      	adds	r0, r7, #1
 800344a:	d1d6      	bne.n	80033fa <_vfiprintf_r+0x19a>
 800344c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800344e:	07d9      	lsls	r1, r3, #31
 8003450:	d405      	bmi.n	800345e <_vfiprintf_r+0x1fe>
 8003452:	89ab      	ldrh	r3, [r5, #12]
 8003454:	059a      	lsls	r2, r3, #22
 8003456:	d402      	bmi.n	800345e <_vfiprintf_r+0x1fe>
 8003458:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800345a:	f7ff fde1 	bl	8003020 <__retarget_lock_release_recursive>
 800345e:	89ab      	ldrh	r3, [r5, #12]
 8003460:	065b      	lsls	r3, r3, #25
 8003462:	f53f af1f 	bmi.w	80032a4 <_vfiprintf_r+0x44>
 8003466:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003468:	e71e      	b.n	80032a8 <_vfiprintf_r+0x48>
 800346a:	ab03      	add	r3, sp, #12
 800346c:	9300      	str	r3, [sp, #0]
 800346e:	462a      	mov	r2, r5
 8003470:	4630      	mov	r0, r6
 8003472:	4b06      	ldr	r3, [pc, #24]	@ (800348c <_vfiprintf_r+0x22c>)
 8003474:	a904      	add	r1, sp, #16
 8003476:	f000 f87d 	bl	8003574 <_printf_i>
 800347a:	e7e4      	b.n	8003446 <_vfiprintf_r+0x1e6>
 800347c:	08003be2 	.word	0x08003be2
 8003480:	08003be8 	.word	0x08003be8
 8003484:	08003bec 	.word	0x08003bec
 8003488:	00000000 	.word	0x00000000
 800348c:	0800323b 	.word	0x0800323b

08003490 <_printf_common>:
 8003490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003494:	4616      	mov	r6, r2
 8003496:	4698      	mov	r8, r3
 8003498:	688a      	ldr	r2, [r1, #8]
 800349a:	690b      	ldr	r3, [r1, #16]
 800349c:	4607      	mov	r7, r0
 800349e:	4293      	cmp	r3, r2
 80034a0:	bfb8      	it	lt
 80034a2:	4613      	movlt	r3, r2
 80034a4:	6033      	str	r3, [r6, #0]
 80034a6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80034aa:	460c      	mov	r4, r1
 80034ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80034b0:	b10a      	cbz	r2, 80034b6 <_printf_common+0x26>
 80034b2:	3301      	adds	r3, #1
 80034b4:	6033      	str	r3, [r6, #0]
 80034b6:	6823      	ldr	r3, [r4, #0]
 80034b8:	0699      	lsls	r1, r3, #26
 80034ba:	bf42      	ittt	mi
 80034bc:	6833      	ldrmi	r3, [r6, #0]
 80034be:	3302      	addmi	r3, #2
 80034c0:	6033      	strmi	r3, [r6, #0]
 80034c2:	6825      	ldr	r5, [r4, #0]
 80034c4:	f015 0506 	ands.w	r5, r5, #6
 80034c8:	d106      	bne.n	80034d8 <_printf_common+0x48>
 80034ca:	f104 0a19 	add.w	sl, r4, #25
 80034ce:	68e3      	ldr	r3, [r4, #12]
 80034d0:	6832      	ldr	r2, [r6, #0]
 80034d2:	1a9b      	subs	r3, r3, r2
 80034d4:	42ab      	cmp	r3, r5
 80034d6:	dc2b      	bgt.n	8003530 <_printf_common+0xa0>
 80034d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80034dc:	6822      	ldr	r2, [r4, #0]
 80034de:	3b00      	subs	r3, #0
 80034e0:	bf18      	it	ne
 80034e2:	2301      	movne	r3, #1
 80034e4:	0692      	lsls	r2, r2, #26
 80034e6:	d430      	bmi.n	800354a <_printf_common+0xba>
 80034e8:	4641      	mov	r1, r8
 80034ea:	4638      	mov	r0, r7
 80034ec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80034f0:	47c8      	blx	r9
 80034f2:	3001      	adds	r0, #1
 80034f4:	d023      	beq.n	800353e <_printf_common+0xae>
 80034f6:	6823      	ldr	r3, [r4, #0]
 80034f8:	6922      	ldr	r2, [r4, #16]
 80034fa:	f003 0306 	and.w	r3, r3, #6
 80034fe:	2b04      	cmp	r3, #4
 8003500:	bf14      	ite	ne
 8003502:	2500      	movne	r5, #0
 8003504:	6833      	ldreq	r3, [r6, #0]
 8003506:	f04f 0600 	mov.w	r6, #0
 800350a:	bf08      	it	eq
 800350c:	68e5      	ldreq	r5, [r4, #12]
 800350e:	f104 041a 	add.w	r4, r4, #26
 8003512:	bf08      	it	eq
 8003514:	1aed      	subeq	r5, r5, r3
 8003516:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800351a:	bf08      	it	eq
 800351c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003520:	4293      	cmp	r3, r2
 8003522:	bfc4      	itt	gt
 8003524:	1a9b      	subgt	r3, r3, r2
 8003526:	18ed      	addgt	r5, r5, r3
 8003528:	42b5      	cmp	r5, r6
 800352a:	d11a      	bne.n	8003562 <_printf_common+0xd2>
 800352c:	2000      	movs	r0, #0
 800352e:	e008      	b.n	8003542 <_printf_common+0xb2>
 8003530:	2301      	movs	r3, #1
 8003532:	4652      	mov	r2, sl
 8003534:	4641      	mov	r1, r8
 8003536:	4638      	mov	r0, r7
 8003538:	47c8      	blx	r9
 800353a:	3001      	adds	r0, #1
 800353c:	d103      	bne.n	8003546 <_printf_common+0xb6>
 800353e:	f04f 30ff 	mov.w	r0, #4294967295
 8003542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003546:	3501      	adds	r5, #1
 8003548:	e7c1      	b.n	80034ce <_printf_common+0x3e>
 800354a:	2030      	movs	r0, #48	@ 0x30
 800354c:	18e1      	adds	r1, r4, r3
 800354e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003552:	1c5a      	adds	r2, r3, #1
 8003554:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003558:	4422      	add	r2, r4
 800355a:	3302      	adds	r3, #2
 800355c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003560:	e7c2      	b.n	80034e8 <_printf_common+0x58>
 8003562:	2301      	movs	r3, #1
 8003564:	4622      	mov	r2, r4
 8003566:	4641      	mov	r1, r8
 8003568:	4638      	mov	r0, r7
 800356a:	47c8      	blx	r9
 800356c:	3001      	adds	r0, #1
 800356e:	d0e6      	beq.n	800353e <_printf_common+0xae>
 8003570:	3601      	adds	r6, #1
 8003572:	e7d9      	b.n	8003528 <_printf_common+0x98>

08003574 <_printf_i>:
 8003574:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003578:	7e0f      	ldrb	r7, [r1, #24]
 800357a:	4691      	mov	r9, r2
 800357c:	2f78      	cmp	r7, #120	@ 0x78
 800357e:	4680      	mov	r8, r0
 8003580:	460c      	mov	r4, r1
 8003582:	469a      	mov	sl, r3
 8003584:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003586:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800358a:	d807      	bhi.n	800359c <_printf_i+0x28>
 800358c:	2f62      	cmp	r7, #98	@ 0x62
 800358e:	d80a      	bhi.n	80035a6 <_printf_i+0x32>
 8003590:	2f00      	cmp	r7, #0
 8003592:	f000 80d3 	beq.w	800373c <_printf_i+0x1c8>
 8003596:	2f58      	cmp	r7, #88	@ 0x58
 8003598:	f000 80ba 	beq.w	8003710 <_printf_i+0x19c>
 800359c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80035a0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80035a4:	e03a      	b.n	800361c <_printf_i+0xa8>
 80035a6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80035aa:	2b15      	cmp	r3, #21
 80035ac:	d8f6      	bhi.n	800359c <_printf_i+0x28>
 80035ae:	a101      	add	r1, pc, #4	@ (adr r1, 80035b4 <_printf_i+0x40>)
 80035b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80035b4:	0800360d 	.word	0x0800360d
 80035b8:	08003621 	.word	0x08003621
 80035bc:	0800359d 	.word	0x0800359d
 80035c0:	0800359d 	.word	0x0800359d
 80035c4:	0800359d 	.word	0x0800359d
 80035c8:	0800359d 	.word	0x0800359d
 80035cc:	08003621 	.word	0x08003621
 80035d0:	0800359d 	.word	0x0800359d
 80035d4:	0800359d 	.word	0x0800359d
 80035d8:	0800359d 	.word	0x0800359d
 80035dc:	0800359d 	.word	0x0800359d
 80035e0:	08003723 	.word	0x08003723
 80035e4:	0800364b 	.word	0x0800364b
 80035e8:	080036dd 	.word	0x080036dd
 80035ec:	0800359d 	.word	0x0800359d
 80035f0:	0800359d 	.word	0x0800359d
 80035f4:	08003745 	.word	0x08003745
 80035f8:	0800359d 	.word	0x0800359d
 80035fc:	0800364b 	.word	0x0800364b
 8003600:	0800359d 	.word	0x0800359d
 8003604:	0800359d 	.word	0x0800359d
 8003608:	080036e5 	.word	0x080036e5
 800360c:	6833      	ldr	r3, [r6, #0]
 800360e:	1d1a      	adds	r2, r3, #4
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	6032      	str	r2, [r6, #0]
 8003614:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003618:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800361c:	2301      	movs	r3, #1
 800361e:	e09e      	b.n	800375e <_printf_i+0x1ea>
 8003620:	6833      	ldr	r3, [r6, #0]
 8003622:	6820      	ldr	r0, [r4, #0]
 8003624:	1d19      	adds	r1, r3, #4
 8003626:	6031      	str	r1, [r6, #0]
 8003628:	0606      	lsls	r6, r0, #24
 800362a:	d501      	bpl.n	8003630 <_printf_i+0xbc>
 800362c:	681d      	ldr	r5, [r3, #0]
 800362e:	e003      	b.n	8003638 <_printf_i+0xc4>
 8003630:	0645      	lsls	r5, r0, #25
 8003632:	d5fb      	bpl.n	800362c <_printf_i+0xb8>
 8003634:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003638:	2d00      	cmp	r5, #0
 800363a:	da03      	bge.n	8003644 <_printf_i+0xd0>
 800363c:	232d      	movs	r3, #45	@ 0x2d
 800363e:	426d      	negs	r5, r5
 8003640:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003644:	230a      	movs	r3, #10
 8003646:	4859      	ldr	r0, [pc, #356]	@ (80037ac <_printf_i+0x238>)
 8003648:	e011      	b.n	800366e <_printf_i+0xfa>
 800364a:	6821      	ldr	r1, [r4, #0]
 800364c:	6833      	ldr	r3, [r6, #0]
 800364e:	0608      	lsls	r0, r1, #24
 8003650:	f853 5b04 	ldr.w	r5, [r3], #4
 8003654:	d402      	bmi.n	800365c <_printf_i+0xe8>
 8003656:	0649      	lsls	r1, r1, #25
 8003658:	bf48      	it	mi
 800365a:	b2ad      	uxthmi	r5, r5
 800365c:	2f6f      	cmp	r7, #111	@ 0x6f
 800365e:	6033      	str	r3, [r6, #0]
 8003660:	bf14      	ite	ne
 8003662:	230a      	movne	r3, #10
 8003664:	2308      	moveq	r3, #8
 8003666:	4851      	ldr	r0, [pc, #324]	@ (80037ac <_printf_i+0x238>)
 8003668:	2100      	movs	r1, #0
 800366a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800366e:	6866      	ldr	r6, [r4, #4]
 8003670:	2e00      	cmp	r6, #0
 8003672:	bfa8      	it	ge
 8003674:	6821      	ldrge	r1, [r4, #0]
 8003676:	60a6      	str	r6, [r4, #8]
 8003678:	bfa4      	itt	ge
 800367a:	f021 0104 	bicge.w	r1, r1, #4
 800367e:	6021      	strge	r1, [r4, #0]
 8003680:	b90d      	cbnz	r5, 8003686 <_printf_i+0x112>
 8003682:	2e00      	cmp	r6, #0
 8003684:	d04b      	beq.n	800371e <_printf_i+0x1aa>
 8003686:	4616      	mov	r6, r2
 8003688:	fbb5 f1f3 	udiv	r1, r5, r3
 800368c:	fb03 5711 	mls	r7, r3, r1, r5
 8003690:	5dc7      	ldrb	r7, [r0, r7]
 8003692:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003696:	462f      	mov	r7, r5
 8003698:	42bb      	cmp	r3, r7
 800369a:	460d      	mov	r5, r1
 800369c:	d9f4      	bls.n	8003688 <_printf_i+0x114>
 800369e:	2b08      	cmp	r3, #8
 80036a0:	d10b      	bne.n	80036ba <_printf_i+0x146>
 80036a2:	6823      	ldr	r3, [r4, #0]
 80036a4:	07df      	lsls	r7, r3, #31
 80036a6:	d508      	bpl.n	80036ba <_printf_i+0x146>
 80036a8:	6923      	ldr	r3, [r4, #16]
 80036aa:	6861      	ldr	r1, [r4, #4]
 80036ac:	4299      	cmp	r1, r3
 80036ae:	bfde      	ittt	le
 80036b0:	2330      	movle	r3, #48	@ 0x30
 80036b2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80036b6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80036ba:	1b92      	subs	r2, r2, r6
 80036bc:	6122      	str	r2, [r4, #16]
 80036be:	464b      	mov	r3, r9
 80036c0:	4621      	mov	r1, r4
 80036c2:	4640      	mov	r0, r8
 80036c4:	f8cd a000 	str.w	sl, [sp]
 80036c8:	aa03      	add	r2, sp, #12
 80036ca:	f7ff fee1 	bl	8003490 <_printf_common>
 80036ce:	3001      	adds	r0, #1
 80036d0:	d14a      	bne.n	8003768 <_printf_i+0x1f4>
 80036d2:	f04f 30ff 	mov.w	r0, #4294967295
 80036d6:	b004      	add	sp, #16
 80036d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036dc:	6823      	ldr	r3, [r4, #0]
 80036de:	f043 0320 	orr.w	r3, r3, #32
 80036e2:	6023      	str	r3, [r4, #0]
 80036e4:	2778      	movs	r7, #120	@ 0x78
 80036e6:	4832      	ldr	r0, [pc, #200]	@ (80037b0 <_printf_i+0x23c>)
 80036e8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80036ec:	6823      	ldr	r3, [r4, #0]
 80036ee:	6831      	ldr	r1, [r6, #0]
 80036f0:	061f      	lsls	r7, r3, #24
 80036f2:	f851 5b04 	ldr.w	r5, [r1], #4
 80036f6:	d402      	bmi.n	80036fe <_printf_i+0x18a>
 80036f8:	065f      	lsls	r7, r3, #25
 80036fa:	bf48      	it	mi
 80036fc:	b2ad      	uxthmi	r5, r5
 80036fe:	6031      	str	r1, [r6, #0]
 8003700:	07d9      	lsls	r1, r3, #31
 8003702:	bf44      	itt	mi
 8003704:	f043 0320 	orrmi.w	r3, r3, #32
 8003708:	6023      	strmi	r3, [r4, #0]
 800370a:	b11d      	cbz	r5, 8003714 <_printf_i+0x1a0>
 800370c:	2310      	movs	r3, #16
 800370e:	e7ab      	b.n	8003668 <_printf_i+0xf4>
 8003710:	4826      	ldr	r0, [pc, #152]	@ (80037ac <_printf_i+0x238>)
 8003712:	e7e9      	b.n	80036e8 <_printf_i+0x174>
 8003714:	6823      	ldr	r3, [r4, #0]
 8003716:	f023 0320 	bic.w	r3, r3, #32
 800371a:	6023      	str	r3, [r4, #0]
 800371c:	e7f6      	b.n	800370c <_printf_i+0x198>
 800371e:	4616      	mov	r6, r2
 8003720:	e7bd      	b.n	800369e <_printf_i+0x12a>
 8003722:	6833      	ldr	r3, [r6, #0]
 8003724:	6825      	ldr	r5, [r4, #0]
 8003726:	1d18      	adds	r0, r3, #4
 8003728:	6961      	ldr	r1, [r4, #20]
 800372a:	6030      	str	r0, [r6, #0]
 800372c:	062e      	lsls	r6, r5, #24
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	d501      	bpl.n	8003736 <_printf_i+0x1c2>
 8003732:	6019      	str	r1, [r3, #0]
 8003734:	e002      	b.n	800373c <_printf_i+0x1c8>
 8003736:	0668      	lsls	r0, r5, #25
 8003738:	d5fb      	bpl.n	8003732 <_printf_i+0x1be>
 800373a:	8019      	strh	r1, [r3, #0]
 800373c:	2300      	movs	r3, #0
 800373e:	4616      	mov	r6, r2
 8003740:	6123      	str	r3, [r4, #16]
 8003742:	e7bc      	b.n	80036be <_printf_i+0x14a>
 8003744:	6833      	ldr	r3, [r6, #0]
 8003746:	2100      	movs	r1, #0
 8003748:	1d1a      	adds	r2, r3, #4
 800374a:	6032      	str	r2, [r6, #0]
 800374c:	681e      	ldr	r6, [r3, #0]
 800374e:	6862      	ldr	r2, [r4, #4]
 8003750:	4630      	mov	r0, r6
 8003752:	f000 f97b 	bl	8003a4c <memchr>
 8003756:	b108      	cbz	r0, 800375c <_printf_i+0x1e8>
 8003758:	1b80      	subs	r0, r0, r6
 800375a:	6060      	str	r0, [r4, #4]
 800375c:	6863      	ldr	r3, [r4, #4]
 800375e:	6123      	str	r3, [r4, #16]
 8003760:	2300      	movs	r3, #0
 8003762:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003766:	e7aa      	b.n	80036be <_printf_i+0x14a>
 8003768:	4632      	mov	r2, r6
 800376a:	4649      	mov	r1, r9
 800376c:	4640      	mov	r0, r8
 800376e:	6923      	ldr	r3, [r4, #16]
 8003770:	47d0      	blx	sl
 8003772:	3001      	adds	r0, #1
 8003774:	d0ad      	beq.n	80036d2 <_printf_i+0x15e>
 8003776:	6823      	ldr	r3, [r4, #0]
 8003778:	079b      	lsls	r3, r3, #30
 800377a:	d413      	bmi.n	80037a4 <_printf_i+0x230>
 800377c:	68e0      	ldr	r0, [r4, #12]
 800377e:	9b03      	ldr	r3, [sp, #12]
 8003780:	4298      	cmp	r0, r3
 8003782:	bfb8      	it	lt
 8003784:	4618      	movlt	r0, r3
 8003786:	e7a6      	b.n	80036d6 <_printf_i+0x162>
 8003788:	2301      	movs	r3, #1
 800378a:	4632      	mov	r2, r6
 800378c:	4649      	mov	r1, r9
 800378e:	4640      	mov	r0, r8
 8003790:	47d0      	blx	sl
 8003792:	3001      	adds	r0, #1
 8003794:	d09d      	beq.n	80036d2 <_printf_i+0x15e>
 8003796:	3501      	adds	r5, #1
 8003798:	68e3      	ldr	r3, [r4, #12]
 800379a:	9903      	ldr	r1, [sp, #12]
 800379c:	1a5b      	subs	r3, r3, r1
 800379e:	42ab      	cmp	r3, r5
 80037a0:	dcf2      	bgt.n	8003788 <_printf_i+0x214>
 80037a2:	e7eb      	b.n	800377c <_printf_i+0x208>
 80037a4:	2500      	movs	r5, #0
 80037a6:	f104 0619 	add.w	r6, r4, #25
 80037aa:	e7f5      	b.n	8003798 <_printf_i+0x224>
 80037ac:	08003bf3 	.word	0x08003bf3
 80037b0:	08003c04 	.word	0x08003c04

080037b4 <__sflush_r>:
 80037b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80037b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ba:	0716      	lsls	r6, r2, #28
 80037bc:	4605      	mov	r5, r0
 80037be:	460c      	mov	r4, r1
 80037c0:	d454      	bmi.n	800386c <__sflush_r+0xb8>
 80037c2:	684b      	ldr	r3, [r1, #4]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	dc02      	bgt.n	80037ce <__sflush_r+0x1a>
 80037c8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	dd48      	ble.n	8003860 <__sflush_r+0xac>
 80037ce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80037d0:	2e00      	cmp	r6, #0
 80037d2:	d045      	beq.n	8003860 <__sflush_r+0xac>
 80037d4:	2300      	movs	r3, #0
 80037d6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80037da:	682f      	ldr	r7, [r5, #0]
 80037dc:	6a21      	ldr	r1, [r4, #32]
 80037de:	602b      	str	r3, [r5, #0]
 80037e0:	d030      	beq.n	8003844 <__sflush_r+0x90>
 80037e2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80037e4:	89a3      	ldrh	r3, [r4, #12]
 80037e6:	0759      	lsls	r1, r3, #29
 80037e8:	d505      	bpl.n	80037f6 <__sflush_r+0x42>
 80037ea:	6863      	ldr	r3, [r4, #4]
 80037ec:	1ad2      	subs	r2, r2, r3
 80037ee:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80037f0:	b10b      	cbz	r3, 80037f6 <__sflush_r+0x42>
 80037f2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80037f4:	1ad2      	subs	r2, r2, r3
 80037f6:	2300      	movs	r3, #0
 80037f8:	4628      	mov	r0, r5
 80037fa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80037fc:	6a21      	ldr	r1, [r4, #32]
 80037fe:	47b0      	blx	r6
 8003800:	1c43      	adds	r3, r0, #1
 8003802:	89a3      	ldrh	r3, [r4, #12]
 8003804:	d106      	bne.n	8003814 <__sflush_r+0x60>
 8003806:	6829      	ldr	r1, [r5, #0]
 8003808:	291d      	cmp	r1, #29
 800380a:	d82b      	bhi.n	8003864 <__sflush_r+0xb0>
 800380c:	4a28      	ldr	r2, [pc, #160]	@ (80038b0 <__sflush_r+0xfc>)
 800380e:	410a      	asrs	r2, r1
 8003810:	07d6      	lsls	r6, r2, #31
 8003812:	d427      	bmi.n	8003864 <__sflush_r+0xb0>
 8003814:	2200      	movs	r2, #0
 8003816:	6062      	str	r2, [r4, #4]
 8003818:	6922      	ldr	r2, [r4, #16]
 800381a:	04d9      	lsls	r1, r3, #19
 800381c:	6022      	str	r2, [r4, #0]
 800381e:	d504      	bpl.n	800382a <__sflush_r+0x76>
 8003820:	1c42      	adds	r2, r0, #1
 8003822:	d101      	bne.n	8003828 <__sflush_r+0x74>
 8003824:	682b      	ldr	r3, [r5, #0]
 8003826:	b903      	cbnz	r3, 800382a <__sflush_r+0x76>
 8003828:	6560      	str	r0, [r4, #84]	@ 0x54
 800382a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800382c:	602f      	str	r7, [r5, #0]
 800382e:	b1b9      	cbz	r1, 8003860 <__sflush_r+0xac>
 8003830:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003834:	4299      	cmp	r1, r3
 8003836:	d002      	beq.n	800383e <__sflush_r+0x8a>
 8003838:	4628      	mov	r0, r5
 800383a:	f7ff fbf3 	bl	8003024 <_free_r>
 800383e:	2300      	movs	r3, #0
 8003840:	6363      	str	r3, [r4, #52]	@ 0x34
 8003842:	e00d      	b.n	8003860 <__sflush_r+0xac>
 8003844:	2301      	movs	r3, #1
 8003846:	4628      	mov	r0, r5
 8003848:	47b0      	blx	r6
 800384a:	4602      	mov	r2, r0
 800384c:	1c50      	adds	r0, r2, #1
 800384e:	d1c9      	bne.n	80037e4 <__sflush_r+0x30>
 8003850:	682b      	ldr	r3, [r5, #0]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d0c6      	beq.n	80037e4 <__sflush_r+0x30>
 8003856:	2b1d      	cmp	r3, #29
 8003858:	d001      	beq.n	800385e <__sflush_r+0xaa>
 800385a:	2b16      	cmp	r3, #22
 800385c:	d11d      	bne.n	800389a <__sflush_r+0xe6>
 800385e:	602f      	str	r7, [r5, #0]
 8003860:	2000      	movs	r0, #0
 8003862:	e021      	b.n	80038a8 <__sflush_r+0xf4>
 8003864:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003868:	b21b      	sxth	r3, r3
 800386a:	e01a      	b.n	80038a2 <__sflush_r+0xee>
 800386c:	690f      	ldr	r7, [r1, #16]
 800386e:	2f00      	cmp	r7, #0
 8003870:	d0f6      	beq.n	8003860 <__sflush_r+0xac>
 8003872:	0793      	lsls	r3, r2, #30
 8003874:	bf18      	it	ne
 8003876:	2300      	movne	r3, #0
 8003878:	680e      	ldr	r6, [r1, #0]
 800387a:	bf08      	it	eq
 800387c:	694b      	ldreq	r3, [r1, #20]
 800387e:	1bf6      	subs	r6, r6, r7
 8003880:	600f      	str	r7, [r1, #0]
 8003882:	608b      	str	r3, [r1, #8]
 8003884:	2e00      	cmp	r6, #0
 8003886:	ddeb      	ble.n	8003860 <__sflush_r+0xac>
 8003888:	4633      	mov	r3, r6
 800388a:	463a      	mov	r2, r7
 800388c:	4628      	mov	r0, r5
 800388e:	6a21      	ldr	r1, [r4, #32]
 8003890:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8003894:	47e0      	blx	ip
 8003896:	2800      	cmp	r0, #0
 8003898:	dc07      	bgt.n	80038aa <__sflush_r+0xf6>
 800389a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800389e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80038a2:	f04f 30ff 	mov.w	r0, #4294967295
 80038a6:	81a3      	strh	r3, [r4, #12]
 80038a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038aa:	4407      	add	r7, r0
 80038ac:	1a36      	subs	r6, r6, r0
 80038ae:	e7e9      	b.n	8003884 <__sflush_r+0xd0>
 80038b0:	dfbffffe 	.word	0xdfbffffe

080038b4 <_fflush_r>:
 80038b4:	b538      	push	{r3, r4, r5, lr}
 80038b6:	690b      	ldr	r3, [r1, #16]
 80038b8:	4605      	mov	r5, r0
 80038ba:	460c      	mov	r4, r1
 80038bc:	b913      	cbnz	r3, 80038c4 <_fflush_r+0x10>
 80038be:	2500      	movs	r5, #0
 80038c0:	4628      	mov	r0, r5
 80038c2:	bd38      	pop	{r3, r4, r5, pc}
 80038c4:	b118      	cbz	r0, 80038ce <_fflush_r+0x1a>
 80038c6:	6a03      	ldr	r3, [r0, #32]
 80038c8:	b90b      	cbnz	r3, 80038ce <_fflush_r+0x1a>
 80038ca:	f7ff faa3 	bl	8002e14 <__sinit>
 80038ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d0f3      	beq.n	80038be <_fflush_r+0xa>
 80038d6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80038d8:	07d0      	lsls	r0, r2, #31
 80038da:	d404      	bmi.n	80038e6 <_fflush_r+0x32>
 80038dc:	0599      	lsls	r1, r3, #22
 80038de:	d402      	bmi.n	80038e6 <_fflush_r+0x32>
 80038e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80038e2:	f7ff fb9c 	bl	800301e <__retarget_lock_acquire_recursive>
 80038e6:	4628      	mov	r0, r5
 80038e8:	4621      	mov	r1, r4
 80038ea:	f7ff ff63 	bl	80037b4 <__sflush_r>
 80038ee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80038f0:	4605      	mov	r5, r0
 80038f2:	07da      	lsls	r2, r3, #31
 80038f4:	d4e4      	bmi.n	80038c0 <_fflush_r+0xc>
 80038f6:	89a3      	ldrh	r3, [r4, #12]
 80038f8:	059b      	lsls	r3, r3, #22
 80038fa:	d4e1      	bmi.n	80038c0 <_fflush_r+0xc>
 80038fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80038fe:	f7ff fb8f 	bl	8003020 <__retarget_lock_release_recursive>
 8003902:	e7dd      	b.n	80038c0 <_fflush_r+0xc>

08003904 <__swbuf_r>:
 8003904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003906:	460e      	mov	r6, r1
 8003908:	4614      	mov	r4, r2
 800390a:	4605      	mov	r5, r0
 800390c:	b118      	cbz	r0, 8003916 <__swbuf_r+0x12>
 800390e:	6a03      	ldr	r3, [r0, #32]
 8003910:	b90b      	cbnz	r3, 8003916 <__swbuf_r+0x12>
 8003912:	f7ff fa7f 	bl	8002e14 <__sinit>
 8003916:	69a3      	ldr	r3, [r4, #24]
 8003918:	60a3      	str	r3, [r4, #8]
 800391a:	89a3      	ldrh	r3, [r4, #12]
 800391c:	071a      	lsls	r2, r3, #28
 800391e:	d501      	bpl.n	8003924 <__swbuf_r+0x20>
 8003920:	6923      	ldr	r3, [r4, #16]
 8003922:	b943      	cbnz	r3, 8003936 <__swbuf_r+0x32>
 8003924:	4621      	mov	r1, r4
 8003926:	4628      	mov	r0, r5
 8003928:	f000 f82a 	bl	8003980 <__swsetup_r>
 800392c:	b118      	cbz	r0, 8003936 <__swbuf_r+0x32>
 800392e:	f04f 37ff 	mov.w	r7, #4294967295
 8003932:	4638      	mov	r0, r7
 8003934:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003936:	6823      	ldr	r3, [r4, #0]
 8003938:	6922      	ldr	r2, [r4, #16]
 800393a:	b2f6      	uxtb	r6, r6
 800393c:	1a98      	subs	r0, r3, r2
 800393e:	6963      	ldr	r3, [r4, #20]
 8003940:	4637      	mov	r7, r6
 8003942:	4283      	cmp	r3, r0
 8003944:	dc05      	bgt.n	8003952 <__swbuf_r+0x4e>
 8003946:	4621      	mov	r1, r4
 8003948:	4628      	mov	r0, r5
 800394a:	f7ff ffb3 	bl	80038b4 <_fflush_r>
 800394e:	2800      	cmp	r0, #0
 8003950:	d1ed      	bne.n	800392e <__swbuf_r+0x2a>
 8003952:	68a3      	ldr	r3, [r4, #8]
 8003954:	3b01      	subs	r3, #1
 8003956:	60a3      	str	r3, [r4, #8]
 8003958:	6823      	ldr	r3, [r4, #0]
 800395a:	1c5a      	adds	r2, r3, #1
 800395c:	6022      	str	r2, [r4, #0]
 800395e:	701e      	strb	r6, [r3, #0]
 8003960:	6962      	ldr	r2, [r4, #20]
 8003962:	1c43      	adds	r3, r0, #1
 8003964:	429a      	cmp	r2, r3
 8003966:	d004      	beq.n	8003972 <__swbuf_r+0x6e>
 8003968:	89a3      	ldrh	r3, [r4, #12]
 800396a:	07db      	lsls	r3, r3, #31
 800396c:	d5e1      	bpl.n	8003932 <__swbuf_r+0x2e>
 800396e:	2e0a      	cmp	r6, #10
 8003970:	d1df      	bne.n	8003932 <__swbuf_r+0x2e>
 8003972:	4621      	mov	r1, r4
 8003974:	4628      	mov	r0, r5
 8003976:	f7ff ff9d 	bl	80038b4 <_fflush_r>
 800397a:	2800      	cmp	r0, #0
 800397c:	d0d9      	beq.n	8003932 <__swbuf_r+0x2e>
 800397e:	e7d6      	b.n	800392e <__swbuf_r+0x2a>

08003980 <__swsetup_r>:
 8003980:	b538      	push	{r3, r4, r5, lr}
 8003982:	4b29      	ldr	r3, [pc, #164]	@ (8003a28 <__swsetup_r+0xa8>)
 8003984:	4605      	mov	r5, r0
 8003986:	6818      	ldr	r0, [r3, #0]
 8003988:	460c      	mov	r4, r1
 800398a:	b118      	cbz	r0, 8003994 <__swsetup_r+0x14>
 800398c:	6a03      	ldr	r3, [r0, #32]
 800398e:	b90b      	cbnz	r3, 8003994 <__swsetup_r+0x14>
 8003990:	f7ff fa40 	bl	8002e14 <__sinit>
 8003994:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003998:	0719      	lsls	r1, r3, #28
 800399a:	d422      	bmi.n	80039e2 <__swsetup_r+0x62>
 800399c:	06da      	lsls	r2, r3, #27
 800399e:	d407      	bmi.n	80039b0 <__swsetup_r+0x30>
 80039a0:	2209      	movs	r2, #9
 80039a2:	602a      	str	r2, [r5, #0]
 80039a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80039a8:	f04f 30ff 	mov.w	r0, #4294967295
 80039ac:	81a3      	strh	r3, [r4, #12]
 80039ae:	e033      	b.n	8003a18 <__swsetup_r+0x98>
 80039b0:	0758      	lsls	r0, r3, #29
 80039b2:	d512      	bpl.n	80039da <__swsetup_r+0x5a>
 80039b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80039b6:	b141      	cbz	r1, 80039ca <__swsetup_r+0x4a>
 80039b8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80039bc:	4299      	cmp	r1, r3
 80039be:	d002      	beq.n	80039c6 <__swsetup_r+0x46>
 80039c0:	4628      	mov	r0, r5
 80039c2:	f7ff fb2f 	bl	8003024 <_free_r>
 80039c6:	2300      	movs	r3, #0
 80039c8:	6363      	str	r3, [r4, #52]	@ 0x34
 80039ca:	89a3      	ldrh	r3, [r4, #12]
 80039cc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80039d0:	81a3      	strh	r3, [r4, #12]
 80039d2:	2300      	movs	r3, #0
 80039d4:	6063      	str	r3, [r4, #4]
 80039d6:	6923      	ldr	r3, [r4, #16]
 80039d8:	6023      	str	r3, [r4, #0]
 80039da:	89a3      	ldrh	r3, [r4, #12]
 80039dc:	f043 0308 	orr.w	r3, r3, #8
 80039e0:	81a3      	strh	r3, [r4, #12]
 80039e2:	6923      	ldr	r3, [r4, #16]
 80039e4:	b94b      	cbnz	r3, 80039fa <__swsetup_r+0x7a>
 80039e6:	89a3      	ldrh	r3, [r4, #12]
 80039e8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80039ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80039f0:	d003      	beq.n	80039fa <__swsetup_r+0x7a>
 80039f2:	4621      	mov	r1, r4
 80039f4:	4628      	mov	r0, r5
 80039f6:	f000 f85c 	bl	8003ab2 <__smakebuf_r>
 80039fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80039fe:	f013 0201 	ands.w	r2, r3, #1
 8003a02:	d00a      	beq.n	8003a1a <__swsetup_r+0x9a>
 8003a04:	2200      	movs	r2, #0
 8003a06:	60a2      	str	r2, [r4, #8]
 8003a08:	6962      	ldr	r2, [r4, #20]
 8003a0a:	4252      	negs	r2, r2
 8003a0c:	61a2      	str	r2, [r4, #24]
 8003a0e:	6922      	ldr	r2, [r4, #16]
 8003a10:	b942      	cbnz	r2, 8003a24 <__swsetup_r+0xa4>
 8003a12:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003a16:	d1c5      	bne.n	80039a4 <__swsetup_r+0x24>
 8003a18:	bd38      	pop	{r3, r4, r5, pc}
 8003a1a:	0799      	lsls	r1, r3, #30
 8003a1c:	bf58      	it	pl
 8003a1e:	6962      	ldrpl	r2, [r4, #20]
 8003a20:	60a2      	str	r2, [r4, #8]
 8003a22:	e7f4      	b.n	8003a0e <__swsetup_r+0x8e>
 8003a24:	2000      	movs	r0, #0
 8003a26:	e7f7      	b.n	8003a18 <__swsetup_r+0x98>
 8003a28:	2000001c 	.word	0x2000001c

08003a2c <_sbrk_r>:
 8003a2c:	b538      	push	{r3, r4, r5, lr}
 8003a2e:	2300      	movs	r3, #0
 8003a30:	4d05      	ldr	r5, [pc, #20]	@ (8003a48 <_sbrk_r+0x1c>)
 8003a32:	4604      	mov	r4, r0
 8003a34:	4608      	mov	r0, r1
 8003a36:	602b      	str	r3, [r5, #0]
 8003a38:	f7fc fe08 	bl	800064c <_sbrk>
 8003a3c:	1c43      	adds	r3, r0, #1
 8003a3e:	d102      	bne.n	8003a46 <_sbrk_r+0x1a>
 8003a40:	682b      	ldr	r3, [r5, #0]
 8003a42:	b103      	cbz	r3, 8003a46 <_sbrk_r+0x1a>
 8003a44:	6023      	str	r3, [r4, #0]
 8003a46:	bd38      	pop	{r3, r4, r5, pc}
 8003a48:	2000026c 	.word	0x2000026c

08003a4c <memchr>:
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	b510      	push	{r4, lr}
 8003a50:	b2c9      	uxtb	r1, r1
 8003a52:	4402      	add	r2, r0
 8003a54:	4293      	cmp	r3, r2
 8003a56:	4618      	mov	r0, r3
 8003a58:	d101      	bne.n	8003a5e <memchr+0x12>
 8003a5a:	2000      	movs	r0, #0
 8003a5c:	e003      	b.n	8003a66 <memchr+0x1a>
 8003a5e:	7804      	ldrb	r4, [r0, #0]
 8003a60:	3301      	adds	r3, #1
 8003a62:	428c      	cmp	r4, r1
 8003a64:	d1f6      	bne.n	8003a54 <memchr+0x8>
 8003a66:	bd10      	pop	{r4, pc}

08003a68 <__swhatbuf_r>:
 8003a68:	b570      	push	{r4, r5, r6, lr}
 8003a6a:	460c      	mov	r4, r1
 8003a6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a70:	4615      	mov	r5, r2
 8003a72:	2900      	cmp	r1, #0
 8003a74:	461e      	mov	r6, r3
 8003a76:	b096      	sub	sp, #88	@ 0x58
 8003a78:	da0c      	bge.n	8003a94 <__swhatbuf_r+0x2c>
 8003a7a:	89a3      	ldrh	r3, [r4, #12]
 8003a7c:	2100      	movs	r1, #0
 8003a7e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003a82:	bf14      	ite	ne
 8003a84:	2340      	movne	r3, #64	@ 0x40
 8003a86:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003a8a:	2000      	movs	r0, #0
 8003a8c:	6031      	str	r1, [r6, #0]
 8003a8e:	602b      	str	r3, [r5, #0]
 8003a90:	b016      	add	sp, #88	@ 0x58
 8003a92:	bd70      	pop	{r4, r5, r6, pc}
 8003a94:	466a      	mov	r2, sp
 8003a96:	f000 f849 	bl	8003b2c <_fstat_r>
 8003a9a:	2800      	cmp	r0, #0
 8003a9c:	dbed      	blt.n	8003a7a <__swhatbuf_r+0x12>
 8003a9e:	9901      	ldr	r1, [sp, #4]
 8003aa0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003aa4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003aa8:	4259      	negs	r1, r3
 8003aaa:	4159      	adcs	r1, r3
 8003aac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003ab0:	e7eb      	b.n	8003a8a <__swhatbuf_r+0x22>

08003ab2 <__smakebuf_r>:
 8003ab2:	898b      	ldrh	r3, [r1, #12]
 8003ab4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003ab6:	079d      	lsls	r5, r3, #30
 8003ab8:	4606      	mov	r6, r0
 8003aba:	460c      	mov	r4, r1
 8003abc:	d507      	bpl.n	8003ace <__smakebuf_r+0x1c>
 8003abe:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003ac2:	6023      	str	r3, [r4, #0]
 8003ac4:	6123      	str	r3, [r4, #16]
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	6163      	str	r3, [r4, #20]
 8003aca:	b003      	add	sp, #12
 8003acc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ace:	466a      	mov	r2, sp
 8003ad0:	ab01      	add	r3, sp, #4
 8003ad2:	f7ff ffc9 	bl	8003a68 <__swhatbuf_r>
 8003ad6:	9f00      	ldr	r7, [sp, #0]
 8003ad8:	4605      	mov	r5, r0
 8003ada:	4639      	mov	r1, r7
 8003adc:	4630      	mov	r0, r6
 8003ade:	f7ff fb0b 	bl	80030f8 <_malloc_r>
 8003ae2:	b948      	cbnz	r0, 8003af8 <__smakebuf_r+0x46>
 8003ae4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ae8:	059a      	lsls	r2, r3, #22
 8003aea:	d4ee      	bmi.n	8003aca <__smakebuf_r+0x18>
 8003aec:	f023 0303 	bic.w	r3, r3, #3
 8003af0:	f043 0302 	orr.w	r3, r3, #2
 8003af4:	81a3      	strh	r3, [r4, #12]
 8003af6:	e7e2      	b.n	8003abe <__smakebuf_r+0xc>
 8003af8:	89a3      	ldrh	r3, [r4, #12]
 8003afa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003afe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b02:	81a3      	strh	r3, [r4, #12]
 8003b04:	9b01      	ldr	r3, [sp, #4]
 8003b06:	6020      	str	r0, [r4, #0]
 8003b08:	b15b      	cbz	r3, 8003b22 <__smakebuf_r+0x70>
 8003b0a:	4630      	mov	r0, r6
 8003b0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003b10:	f000 f81e 	bl	8003b50 <_isatty_r>
 8003b14:	b128      	cbz	r0, 8003b22 <__smakebuf_r+0x70>
 8003b16:	89a3      	ldrh	r3, [r4, #12]
 8003b18:	f023 0303 	bic.w	r3, r3, #3
 8003b1c:	f043 0301 	orr.w	r3, r3, #1
 8003b20:	81a3      	strh	r3, [r4, #12]
 8003b22:	89a3      	ldrh	r3, [r4, #12]
 8003b24:	431d      	orrs	r5, r3
 8003b26:	81a5      	strh	r5, [r4, #12]
 8003b28:	e7cf      	b.n	8003aca <__smakebuf_r+0x18>
	...

08003b2c <_fstat_r>:
 8003b2c:	b538      	push	{r3, r4, r5, lr}
 8003b2e:	2300      	movs	r3, #0
 8003b30:	4d06      	ldr	r5, [pc, #24]	@ (8003b4c <_fstat_r+0x20>)
 8003b32:	4604      	mov	r4, r0
 8003b34:	4608      	mov	r0, r1
 8003b36:	4611      	mov	r1, r2
 8003b38:	602b      	str	r3, [r5, #0]
 8003b3a:	f7fc fd61 	bl	8000600 <_fstat>
 8003b3e:	1c43      	adds	r3, r0, #1
 8003b40:	d102      	bne.n	8003b48 <_fstat_r+0x1c>
 8003b42:	682b      	ldr	r3, [r5, #0]
 8003b44:	b103      	cbz	r3, 8003b48 <_fstat_r+0x1c>
 8003b46:	6023      	str	r3, [r4, #0]
 8003b48:	bd38      	pop	{r3, r4, r5, pc}
 8003b4a:	bf00      	nop
 8003b4c:	2000026c 	.word	0x2000026c

08003b50 <_isatty_r>:
 8003b50:	b538      	push	{r3, r4, r5, lr}
 8003b52:	2300      	movs	r3, #0
 8003b54:	4d05      	ldr	r5, [pc, #20]	@ (8003b6c <_isatty_r+0x1c>)
 8003b56:	4604      	mov	r4, r0
 8003b58:	4608      	mov	r0, r1
 8003b5a:	602b      	str	r3, [r5, #0]
 8003b5c:	f7fc fd5f 	bl	800061e <_isatty>
 8003b60:	1c43      	adds	r3, r0, #1
 8003b62:	d102      	bne.n	8003b6a <_isatty_r+0x1a>
 8003b64:	682b      	ldr	r3, [r5, #0]
 8003b66:	b103      	cbz	r3, 8003b6a <_isatty_r+0x1a>
 8003b68:	6023      	str	r3, [r4, #0]
 8003b6a:	bd38      	pop	{r3, r4, r5, pc}
 8003b6c:	2000026c 	.word	0x2000026c

08003b70 <_init>:
 8003b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b72:	bf00      	nop
 8003b74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b76:	bc08      	pop	{r3}
 8003b78:	469e      	mov	lr, r3
 8003b7a:	4770      	bx	lr

08003b7c <_fini>:
 8003b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b7e:	bf00      	nop
 8003b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b82:	bc08      	pop	{r3}
 8003b84:	469e      	mov	lr, r3
 8003b86:	4770      	bx	lr
